[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/spring-web/src/main/java/akka/stream/alpakka/spring/web/AkkaStreamsRegistrar.java[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.spring.web;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.Materializer;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.javadsl.AsPublisher;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.springframework.core.ReactiveAdapterRegistry;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.springframework.util.Assert;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport static org.springframework.core.ReactiveTypeDescriptor.multiValue;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpublic class AkkaStreamsRegistrar {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private final Materializer materializer;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  public AkkaStreamsRegistrar(Materializer mat) {[0m
[0m[[0m[0mdebug[0m] [0m[0m    materializer = mat;[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  public void registerAdapters(ReactiveAdapterRegistry registry) {[0m
[0m[[0m[0mdebug[0m] [0m[0m    Assert.notNull(registry, "registry must not be null");[0m
[0m[[0m[0mdebug[0m] [0m[0m    registry.registerReactiveType([0m
[0m[[0m[0mdebug[0m] [0m[0m        multiValue(akka.stream.javadsl.Source.class, akka.stream.javadsl.Source::empty),[0m
[0m[[0m[0mdebug[0m] [0m[0m        source ->[0m
[0m[[0m[0mdebug[0m] [0m[0m            ((akka.stream.javadsl.Source<?, ?>) source)[0m
[0m[[0m[0mdebug[0m] [0m[0m                .runWith([0m
[0m[[0m[0mdebug[0m] [0m[0m                    akka.stream.javadsl.Sink.asPublisher(AsPublisher.WITH_FANOUT), materializer),[0m
[0m[[0m[0mdebug[0m] [0m[0m        akka.stream.javadsl.Source::fromPublisher);[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    registry.registerReactiveType([0m
[0m[[0m[0mdebug[0m] [0m[0m        multiValue(akka.stream.scaladsl.Source.class, akka.stream.scaladsl.Source::empty),[0m
[0m[[0m[0mdebug[0m] [0m[0m        source ->[0m
[0m[[0m[0mdebug[0m] [0m[0m            ((akka.stream.scaladsl.Source<?, ?>) source)[0m
[0m[[0m[0mdebug[0m] [0m[0m                .runWith(akka.stream.scaladsl.Sink.asPublisher(true), materializer),[0m
[0m[[0m[0mdebug[0m] [0m[0m        akka.stream.scaladsl.Source::fromPublisher);[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/spring-web/src/main/java/akka/stream/alpakka/spring/web/SpringWebAkkaStreamsConfiguration.java[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.spring.web;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.util.Objects;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.springframework.boot.context.properties.EnableConfigurationProperties;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.springframework.context.annotation.Bean;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.springframework.context.annotation.Configuration;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.springframework.core.ReactiveAdapterRegistry;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m// #configure[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.actor.ActorSystem;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.ActorMaterializer;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.Materializer;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m@Configuration[0m
[0m[[0m[0mdebug[0m] [0m[0m@ConditionalOnClass(akka.stream.javadsl.Source.class)[0m
[0m[[0m[0mdebug[0m] [0m[0m@EnableConfigurationProperties(SpringWebAkkaStreamsProperties.class)[0m
[0m[[0m[0mdebug[0m] [0m[0mpublic class SpringWebAkkaStreamsConfiguration {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private static final String DEFAULT_ACTORY_SYSTEM_NAME = "SpringWebAkkaStreamsSystem";[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private final ActorSystem system;[0m
[0m[[0m[0mdebug[0m] [0m[0m  private final ActorMaterializer mat;[0m
[0m[[0m[0mdebug[0m] [0m[0m  private final SpringWebAkkaStreamsProperties properties;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  public SpringWebAkkaStreamsConfiguration(final SpringWebAkkaStreamsProperties properties) {[0m
[0m[[0m[0mdebug[0m] [0m[0m    this.properties = properties;[0m
[0m[[0m[0mdebug[0m] [0m[0m    final ReactiveAdapterRegistry registry = ReactiveAdapterRegistry.getSharedInstance();[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    system = ActorSystem.create(getActorSystemName(properties));[0m
[0m[[0m[0mdebug[0m] [0m[0m    mat = ActorMaterializer.create(system);[0m
[0m[[0m[0mdebug[0m] [0m[0m    new AkkaStreamsRegistrar(mat).registerAdapters(registry);[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  @Bean[0m
[0m[[0m[0mdebug[0m] [0m[0m  @ConditionalOnMissingBean(ActorSystem.class)[0m
[0m[[0m[0mdebug[0m] [0m[0m  public ActorSystem getActorSystem() {[0m
[0m[[0m[0mdebug[0m] [0m[0m    return system;[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  @Bean[0m
[0m[[0m[0mdebug[0m] [0m[0m  @ConditionalOnMissingBean(Materializer.class)[0m
[0m[[0m[0mdebug[0m] [0m[0m  public ActorMaterializer getMaterializer() {[0m
[0m[[0m[0mdebug[0m] [0m[0m    return mat;[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  public SpringWebAkkaStreamsProperties getProperties() {[0m
[0m[[0m[0mdebug[0m] [0m[0m    return properties;[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private String getActorSystemName(final SpringWebAkkaStreamsProperties properties) {[0m
[0m[[0m[0mdebug[0m] [0m[0m    Objects.requireNonNull([0m
[0m[[0m[0mdebug[0m] [0m[0m        properties,[0m
[0m[[0m[0mdebug[0m] [0m[0m        String.format([0m
[0m[[0m[0mdebug[0m] [0m[0m            "%s is not present in application context",[0m
[0m[[0m[0mdebug[0m] [0m[0m            SpringWebAkkaStreamsProperties.class.getSimpleName()));[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    if (isBlank(properties.getActorSystemName())) {[0m
[0m[[0m[0mdebug[0m] [0m[0m      return DEFAULT_ACTORY_SYSTEM_NAME;[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    return properties.getActorSystemName();[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private boolean isBlank(String str) {[0m
[0m[[0m[0mdebug[0m] [0m[0m    return (str == null || str.isEmpty());[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m// #configure[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/spring-web/src/main/java/akka/stream/alpakka/spring/web/SpringWebAkkaStreamsProperties.java[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.spring.web;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.springframework.boot.context.properties.ConfigurationProperties;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m@ConfigurationProperties(prefix = "akka.stream.alpakka.spring.web")[0m
[0m[[0m[0mdebug[0m] [0m[0mpublic class SpringWebAkkaStreamsProperties {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private String actorSystemName;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  public String getActorSystemName() {[0m
[0m[[0m[0mdebug[0m] [0m[0m    return actorSystemName;[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  public void setActorSystemName(String actorSystemName) {[0m
[0m[[0m[0mdebug[0m] [0m[0m    this.actorSystemName = actorSystemName;[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
