[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/sse/src/main/scala/akka/stream/alpakka/sse/javadsl/EventSource.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.sse[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage javadsl[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.NotUsed[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.http.javadsl.model.{HttpRequest, HttpResponse, Uri}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.http.scaladsl.model.{HttpResponse => SHttpResponse}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.Materializer[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.javadsl.Source[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.http.javadsl.model.sse.ServerSentEvent[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.util.Optional[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.util.concurrent.CompletionStage[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.util.function.{Function => JFunction}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.compat.java8.FutureConverters[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.compat.java8.OptionConverters[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m/**[0m
[0m[[0m[0mdebug[0m] [0m[0m * This stream processing stage establishes a continuous source of server-sent events from the given URI.[0m
[0m[[0m[0mdebug[0m] [0m[0m *[0m
[0m[[0m[0mdebug[0m] [0m[0m * A single source of server-sent events is obtained from the URI. Once completed, either normally or by failure, a next[0m
[0m[[0m[0mdebug[0m] [0m[0m * one is obtained thereby sending a Last-Evend-ID header if available. This continues in an endless cycle.[0m
[0m[[0m[0mdebug[0m] [0m[0m *[0m
[0m[[0m[0mdebug[0m] [0m[0m * The shape of this processing stage is a source of server-sent events; to take effect it must be connected and run.[0m
[0m[[0m[0mdebug[0m] [0m[0m * Progress (including termination) is controlled by the connected flow or sink, e.g. a retry delay can be implemented[0m
[0m[[0m[0mdebug[0m] [0m[0m * by streaming the materialized values of the handler via a throttle.[0m
[0m[[0m[0mdebug[0m] [0m[0m *[0m
[0m[[0m[0mdebug[0m] [0m[0m *{{{[0m
[0m[[0m[0mdebug[0m] [0m[0m * + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +[0m
[0m[[0m[0mdebug[0m] [0m[0m *                                               +---------------------+[0m
[0m[[0m[0mdebug[0m] [0m[0m * |                                             |       trigger       | |[0m
[0m[[0m[0mdebug[0m] [0m[0m *                                               +----------o----------+[0m
[0m[[0m[0mdebug[0m] [0m[0m * |                                                        |            |[0m
[0m[[0m[0mdebug[0m] [0m[0m *                                            Option[String]|[0m
[0m[[0m[0mdebug[0m] [0m[0m * |                                                        v            |[0m
[0m[[0m[0mdebug[0m] [0m[0m *              Option[String]                   +----------o----------+[0m
[0m[[0m[0mdebug[0m] [0m[0m * |            +------------------------------->o        merge        | |[0m
[0m[[0m[0mdebug[0m] [0m[0m *              |                                +----------o----------+[0m
[0m[[0m[0mdebug[0m] [0m[0m * |            |                                           |            |[0m
[0m[[0m[0mdebug[0m] [0m[0m *              |                             Option[String]|[0m
[0m[[0m[0mdebug[0m] [0m[0m * |            |                                           v            |[0m
[0m[[0m[0mdebug[0m] [0m[0m *   +----------o----------+                     +----------o----------+[0m
[0m[[0m[0mdebug[0m] [0m[0m * | | currentLastEventId  |                     |    eventSources     | |[0m
[0m[[0m[0mdebug[0m] [0m[0m *   +----------o----------+                     +----------o----------+[0m
[0m[[0m[0mdebug[0m] [0m[0m * |            ^                                           |            |[0m
[0m[[0m[0mdebug[0m] [0m[0m *              |      (EventSource, Future[Option[String]])|[0m
[0m[[0m[0mdebug[0m] [0m[0m * |            |                                           v            |[0m
[0m[[0m[0mdebug[0m] [0m[0m *              |                                +----------o----------+[0m
[0m[[0m[0mdebug[0m] [0m[0m * |            +--------------------------------o        unzip        | |[0m
[0m[[0m[0mdebug[0m] [0m[0m *              Future[Option[String]]           +----------o----------+[0m
[0m[[0m[0mdebug[0m] [0m[0m * |                                                        |            |[0m
[0m[[0m[0mdebug[0m] [0m[0m *                                               EventSource|[0m
[0m[[0m[0mdebug[0m] [0m[0m * |                                                        v            |[0m
[0m[[0m[0mdebug[0m] [0m[0m *                                               +----------o----------+[0m
[0m[[0m[0mdebug[0m] [0m[0m * |                                  +----------o       flatten       | |[0m
[0m[[0m[0mdebug[0m] [0m[0m *                     ServerSentEvent|          +---------------------+[0m
[0m[[0m[0mdebug[0m] [0m[0m * |                                  v                                  |[0m
[0m[[0m[0mdebug[0m] [0m[0m *  - - - - - - - - - - - - - - - - - o - - - - - - - - - - - - - - - - -[0m
[0m[[0m[0mdebug[0m] [0m[0m *}}}[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0mobject EventSource {[0m
[0m[[0m[0mdebug[0m] [0m[0m  import FutureConverters._[0m
[0m[[0m[0mdebug[0m] [0m[0m  import OptionConverters._[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * @param uri URI with absolute path, e.g. "http://myserver/events[0m
[0m[[0m[0mdebug[0m] [0m[0m   * @param send function to send a HTTP request[0m
[0m[[0m[0mdebug[0m] [0m[0m   * @param lastEventId initial value for Last-Evend-ID header, optional[0m
[0m[[0m[0mdebug[0m] [0m[0m   * @param mat `Materializer`[0m
[0m[[0m[0mdebug[0m] [0m[0m   * @return continuous source of server-sent events[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def create(uri: Uri,[0m
[0m[[0m[0mdebug[0m] [0m[0m             send: JFunction[HttpRequest, CompletionStage[HttpResponse]],[0m
[0m[[0m[0mdebug[0m] [0m[0m             lastEventId: Optional[String],[0m
[0m[[0m[0mdebug[0m] [0m[0m             mat: Materializer): Source[ServerSentEvent, NotUsed] = {[0m
[0m[[0m[0mdebug[0m] [0m[0m    val eventSource =[0m
[0m[[0m[0mdebug[0m] [0m[0m      scaladsl[0m
[0m[[0m[0mdebug[0m] [0m[0m        .EventSource([0m
[0m[[0m[0mdebug[0m] [0m[0m          uri.asScala,[0m
[0m[[0m[0mdebug[0m] [0m[0m          send(_).toScala.map(_.asInstanceOf[SHttpResponse])(mat.executionContext),[0m
[0m[[0m[0mdebug[0m] [0m[0m          lastEventId.asScala[0m
[0m[[0m[0mdebug[0m] [0m[0m        )(mat)[0m
[0m[[0m[0mdebug[0m] [0m[0m        .map(v => v: ServerSentEvent)[0m
[0m[[0m[0mdebug[0m] [0m[0m    eventSource.asJava[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/sse/src/main/scala/akka/stream/alpakka/sse/scaladsl/EventSource.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.sse[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage scaladsl[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.NotUsed[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.http.scaladsl.client.RequestBuilding.Get[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.http.scaladsl.model.headers.Accept[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.http.scaladsl.model.{HttpRequest, HttpResponse, Uri}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.http.scaladsl.unmarshalling.Unmarshal[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.scaladsl.{Broadcast, Flow, GraphDSL, Merge, Source}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.{Materializer, SourceShape}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.http.scaladsl.model.sse.ServerSentEvent[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.http.scaladsl.model.sse.ServerSentEvent.heartbeat[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.http.scaladsl.model.MediaTypes.`text/event-stream`[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.http.scaladsl.model.headers.`Last-Event-ID`[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.http.scaladsl.unmarshalling.sse.EventStreamUnmarshalling[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.concurrent.Future[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.concurrent.duration.{Duration, FiniteDuration}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m/**[0m
[0m[[0m[0mdebug[0m] [0m[0m * This stream processing stage establishes a continuous source of server-sent events from the given URI.[0m
[0m[[0m[0mdebug[0m] [0m[0m *[0m
[0m[[0m[0mdebug[0m] [0m[0m * A single source of server-sent events is obtained from the URI. Once completed, either normally or by failure, a next[0m
[0m[[0m[0mdebug[0m] [0m[0m * one is obtained thereby sending a Last-Evend-ID header if available. This continues in an endless cycle.[0m
[0m[[0m[0mdebug[0m] [0m[0m *[0m
[0m[[0m[0mdebug[0m] [0m[0m * The shape of this processing stage is a source of server-sent events; to take effect it must be connected and run.[0m
[0m[[0m[0mdebug[0m] [0m[0m * Progress (including termination) is controlled by the connected flow or sink, e.g. a retry delay can be implemented[0m
[0m[[0m[0mdebug[0m] [0m[0m * by streaming the materialized values of the handler via a throttle.[0m
[0m[[0m[0mdebug[0m] [0m[0m *[0m
[0m[[0m[0mdebug[0m] [0m[0m *{{{[0m
[0m[[0m[0mdebug[0m] [0m[0m * + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +[0m
[0m[[0m[0mdebug[0m] [0m[0m *                                               +---------------------+[0m
[0m[[0m[0mdebug[0m] [0m[0m * |                                             |       trigger       | |[0m
[0m[[0m[0mdebug[0m] [0m[0m *                                               +----------o----------+[0m
[0m[[0m[0mdebug[0m] [0m[0m * |                                                        |            |[0m
[0m[[0m[0mdebug[0m] [0m[0m *                                            Option[String]|[0m
[0m[[0m[0mdebug[0m] [0m[0m * |                                                        v            |[0m
[0m[[0m[0mdebug[0m] [0m[0m *              Option[String]                   +----------o----------+[0m
[0m[[0m[0mdebug[0m] [0m[0m * |            +------------------------------->o        merge        | |[0m
[0m[[0m[0mdebug[0m] [0m[0m *              |                                +----------o----------+[0m
[0m[[0m[0mdebug[0m] [0m[0m * |            |                                           |            |[0m
[0m[[0m[0mdebug[0m] [0m[0m *              |                             Option[String]|[0m
[0m[[0m[0mdebug[0m] [0m[0m * |            |                                           v            |[0m
[0m[[0m[0mdebug[0m] [0m[0m *   +--------o--------+                         +----------o----------+[0m
[0m[[0m[0mdebug[0m] [0m[0m * | |   lastEventId   |                         |   continuousEvents  | |[0m
[0m[[0m[0mdebug[0m] [0m[0m *   +--------o--------+                         +----------o----------+[0m
[0m[[0m[0mdebug[0m] [0m[0m * |            ^                                           |            |[0m
[0m[[0m[0mdebug[0m] [0m[0m *              |     ServerSentEvent (including delimiters)|[0m
[0m[[0m[0mdebug[0m] [0m[0m * |            |                                           v            |[0m
[0m[[0m[0mdebug[0m] [0m[0m *              |                                +----------o----------+[0m
[0m[[0m[0mdebug[0m] [0m[0m * |            +--------------------------------o        bcast        | |[0m
[0m[[0m[0mdebug[0m] [0m[0m *              ServerSentEvent (incl. delim.)   +----------o----------+[0m
[0m[[0m[0mdebug[0m] [0m[0m * |                                                        |            |[0m
[0m[[0m[0mdebug[0m] [0m[0m *                    ServerSentEvent (including delimiters)|[0m
[0m[[0m[0mdebug[0m] [0m[0m * |                                                        v            |[0m
[0m[[0m[0mdebug[0m] [0m[0m *                                               +----------o----------+[0m
[0m[[0m[0mdebug[0m] [0m[0m * |                                  +----------o       events        | |[0m
[0m[[0m[0mdebug[0m] [0m[0m *                     ServerSentEvent|          +---------------------+[0m
[0m[[0m[0mdebug[0m] [0m[0m * |                                  v                                  |[0m
[0m[[0m[0mdebug[0m] [0m[0m *  - - - - - - - - - - - - - - - - - o - - - - - - - - - - - - - - - - -[0m
[0m[[0m[0mdebug[0m] [0m[0m *}}}[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0mobject EventSource {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  type EventSource = Source[ServerSentEvent, NotUsed][0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private val noEvents = Source.empty[ServerSentEvent][0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private val singleDelimiter = Source.single(heartbeat)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * @param uri URI with absolute path, e.g. "http://myserver/events[0m
[0m[[0m[0mdebug[0m] [0m[0m   * @param send function to send a HTTP request[0m
[0m[[0m[0mdebug[0m] [0m[0m   * @param initialLastEventId initial value for Last-Evend-ID header, `None` by default[0m
[0m[[0m[0mdebug[0m] [0m[0m   * @param retryDelay delay for retrying after completion, `0` by default[0m
[0m[[0m[0mdebug[0m] [0m[0m   * @param mat implicit `Materializer`, needed to obtain server-sent events[0m
[0m[[0m[0mdebug[0m] [0m[0m   * @return continuous source of server-sent events[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def apply(uri: Uri,[0m
[0m[[0m[0mdebug[0m] [0m[0m            send: HttpRequest => Future[HttpResponse],[0m
[0m[[0m[0mdebug[0m] [0m[0m            initialLastEventId: Option[String] = None,[0m
[0m[[0m[0mdebug[0m] [0m[0m            retryDelay: FiniteDuration = Duration.Zero)([0m
[0m[[0m[0mdebug[0m] [0m[0m      implicit mat: Materializer[0m
[0m[[0m[0mdebug[0m] [0m[0m  ): EventSource = {[0m
[0m[[0m[0mdebug[0m] [0m[0m    import EventStreamUnmarshalling._[0m
[0m[[0m[0mdebug[0m] [0m[0m    import mat.executionContext[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    val continuousEvents = {[0m
[0m[[0m[0mdebug[0m] [0m[0m      def getEventSource(lastEventId: Option[String]) = {[0m
[0m[[0m[0mdebug[0m] [0m[0m        val request = {[0m
[0m[[0m[0mdebug[0m] [0m[0m          val r = Get(uri).addHeader(Accept(`text/event-stream`))[0m
[0m[[0m[0mdebug[0m] [0m[0m          lastEventId.foldLeft(r)((r, i) => r.addHeader(`Last-Event-ID`(i)))[0m
[0m[[0m[0mdebug[0m] [0m[0m        }[0m
[0m[[0m[0mdebug[0m] [0m[0m        send(request).flatMap(Unmarshal(_).to[EventSource]).fallbackTo(Future.successful(noEvents))[0m
[0m[[0m[0mdebug[0m] [0m[0m      }[0m
[0m[[0m[0mdebug[0m] [0m[0m      def recover(eventSource: EventSource) = eventSource.recoverWithRetries(1, { case _ => noEvents })[0m
[0m[[0m[0mdebug[0m] [0m[0m      def delimit(eventSource: EventSource) = eventSource.concat(singleDelimiter)[0m
[0m[[0m[0mdebug[0m] [0m[0m      Flow[Option[String]][0m
[0m[[0m[0mdebug[0m] [0m[0m        .mapAsync(1)(getEventSource)[0m
[0m[[0m[0mdebug[0m] [0m[0m        .flatMapConcat((recover _).andThen(delimit))[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    val lastEventId =[0m
[0m[[0m[0mdebug[0m] [0m[0m      Flow[ServerSentEvent][0m
[0m[[0m[0mdebug[0m] [0m[0m        .prepend(Source.single(heartbeat)) // to make sliding and collect-matching work[0m
[0m[[0m[0mdebug[0m] [0m[0m        .sliding(2)[0m
[0m[[0m[0mdebug[0m] [0m[0m        .collect { case Seq(last, event) if event == ServerSentEvent.heartbeat => last }[0m
[0m[[0m[0mdebug[0m] [0m[0m        .scan(initialLastEventId)((prev, current) => current.id.orElse(prev))[0m
[0m[[0m[0mdebug[0m] [0m[0m        .drop(1)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    Source.fromGraph(GraphDSL.create() { implicit builder =>[0m
[0m[[0m[0mdebug[0m] [0m[0m      import GraphDSL.Implicits._[0m
[0m[[0m[0mdebug[0m] [0m[0m      val trigger = builder.add(Source.single(initialLastEventId))[0m
[0m[[0m[0mdebug[0m] [0m[0m      val merge = builder.add(Merge[Option[String]](2))[0m
[0m[[0m[0mdebug[0m] [0m[0m      val bcast = builder.add(Broadcast[ServerSentEvent](2, eagerCancel = true))[0m
[0m[[0m[0mdebug[0m] [0m[0m      val events = builder.add(Flow[ServerSentEvent].filter(_ != heartbeat))[0m
[0m[[0m[0mdebug[0m] [0m[0m      val delay = builder.add(Flow[Option[String]].delay(retryDelay))[0m
[0m[[0m[0mdebug[0m] [0m[0m      // format: OFF[0m
[0m[[0m[0mdebug[0m] [0m[0m      trigger ~> merge ~>   continuousEvents   ~> bcast ~> events[0m
[0m[[0m[0mdebug[0m] [0m[0m                 merge <~ delay <~ lastEventId <~ bcast[0m
[0m[[0m[0mdebug[0m] [0m[0m      // format: ON[0m
[0m[[0m[0mdebug[0m] [0m[0m      SourceShape(events.out)[0m
[0m[[0m[0mdebug[0m] [0m[0m    })[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
