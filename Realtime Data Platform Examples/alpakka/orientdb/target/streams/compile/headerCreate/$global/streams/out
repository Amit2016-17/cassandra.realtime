[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/orientdb/src/main/scala/akka/stream/alpakka/orientdb/javadsl/OrientDbSink.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.orientdb.javadsl[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.util.concurrent.CompletionStage[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.{Done, NotUsed}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.orientdb._[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.javadsl._[0m
[0m[[0m[0mdebug[0m] [0m[0mimport com.orientechnologies.orient.core.record.impl.ODocument[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m/**[0m
[0m[[0m[0mdebug[0m] [0m[0m * Java API.[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0mobject OrientDbSink {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Sink to write `ODocument`s to OrientDB, elements within one list are stored within one transaction.[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def create([0m
[0m[[0m[0mdebug[0m] [0m[0m      className: String,[0m
[0m[[0m[0mdebug[0m] [0m[0m      settings: OrientDbWriteSettings[0m
[0m[[0m[0mdebug[0m] [0m[0m  ): Sink[java.util.List[OrientDbWriteMessage[ODocument, NotUsed]], CompletionStage[Done]] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    OrientDbFlow[0m
[0m[[0m[0mdebug[0m] [0m[0m      .create(className, settings)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .toMat(Sink.ignore[java.util.List[OrientDbWriteMessage[ODocument, NotUsed]]],[0m
[0m[[0m[0mdebug[0m] [0m[0m             Keep.right[NotUsed, CompletionStage[Done]])[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Flow to write elements of type `T` to OrientDB, elements within one list are stored within one transaction.[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def typed[T](className: String,[0m
[0m[[0m[0mdebug[0m] [0m[0m               settings: OrientDbWriteSettings,[0m
[0m[[0m[0mdebug[0m] [0m[0m               clazz: Class[T]): Sink[java.util.List[OrientDbWriteMessage[T, NotUsed]], CompletionStage[Done]] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    OrientDbFlow[0m
[0m[[0m[0mdebug[0m] [0m[0m      .typed[T](className, settings, clazz)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .toMat(Sink.ignore[java.util.List[OrientDbWriteMessage[T, NotUsed]]], Keep.right[NotUsed, CompletionStage[Done]])[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/orientdb/src/main/scala/akka/stream/alpakka/orientdb/javadsl/OrientDbSource.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.orientdb.javadsl[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.NotUsed[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.orientdb._[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.orientdb.impl.OrientDbSourceStage[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.javadsl.Source[0m
[0m[[0m[0mdebug[0m] [0m[0mimport com.orientechnologies.orient.core.record.impl.ODocument[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m/**[0m
[0m[[0m[0mdebug[0m] [0m[0m * Java API.[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0mobject OrientDbSource {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Read `ODocument`s from `className`.[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def create(className: String, settings: OrientDbSourceSettings): Source[OrientDbReadResult[ODocument], NotUsed] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    Source.fromGraph([0m
[0m[[0m[0mdebug[0m] [0m[0m      new OrientDbSourceStage([0m
[0m[[0m[0mdebug[0m] [0m[0m        className,[0m
[0m[[0m[0mdebug[0m] [0m[0m        Option.empty,[0m
[0m[[0m[0mdebug[0m] [0m[0m        settings[0m
[0m[[0m[0mdebug[0m] [0m[0m      )[0m
[0m[[0m[0mdebug[0m] [0m[0m    )[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Read `ODocument`s from `className` or by `query`.[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def create(className: String,[0m
[0m[[0m[0mdebug[0m] [0m[0m             settings: OrientDbSourceSettings,[0m
[0m[[0m[0mdebug[0m] [0m[0m             query: String): Source[OrientDbReadResult[ODocument], NotUsed] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    Source.fromGraph([0m
[0m[[0m[0mdebug[0m] [0m[0m      new OrientDbSourceStage([0m
[0m[[0m[0mdebug[0m] [0m[0m        className,[0m
[0m[[0m[0mdebug[0m] [0m[0m        Option(query),[0m
[0m[[0m[0mdebug[0m] [0m[0m        settings[0m
[0m[[0m[0mdebug[0m] [0m[0m      )[0m
[0m[[0m[0mdebug[0m] [0m[0m    )[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Read elements of `T` from `className` or by `query`.[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def typed[T](className: String,[0m
[0m[[0m[0mdebug[0m] [0m[0m               settings: OrientDbSourceSettings,[0m
[0m[[0m[0mdebug[0m] [0m[0m               clazz: Class[T],[0m
[0m[[0m[0mdebug[0m] [0m[0m               query: String = null): Source[OrientDbReadResult[T], NotUsed] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    Source.fromGraph([0m
[0m[[0m[0mdebug[0m] [0m[0m      new OrientDbSourceStage[T]([0m
[0m[[0m[0mdebug[0m] [0m[0m        className,[0m
[0m[[0m[0mdebug[0m] [0m[0m        Option(query),[0m
[0m[[0m[0mdebug[0m] [0m[0m        settings,[0m
[0m[[0m[0mdebug[0m] [0m[0m        clazz = Some(clazz)[0m
[0m[[0m[0mdebug[0m] [0m[0m      )[0m
[0m[[0m[0mdebug[0m] [0m[0m    )[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/orientdb/src/main/scala/akka/stream/alpakka/orientdb/javadsl/OrientDbFlow.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.orientdb.javadsl[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.NotUsed[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.orientdb._[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.javadsl.Flow[0m
[0m[[0m[0mdebug[0m] [0m[0mimport com.orientechnologies.orient.core.record.impl.ODocument[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.collection.JavaConverters._[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m/**[0m
[0m[[0m[0mdebug[0m] [0m[0m * Java API.[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0mobject OrientDbFlow {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Flow to write `ODocument`s to OrientDB, elements within one list are stored within one transaction.[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def create([0m
[0m[[0m[0mdebug[0m] [0m[0m      className: String,[0m
[0m[[0m[0mdebug[0m] [0m[0m      settings: OrientDbWriteSettings[0m
[0m[[0m[0mdebug[0m] [0m[0m  ): Flow[java.util.List[OrientDbWriteMessage[ODocument, NotUsed]],[0m
[0m[[0m[0mdebug[0m] [0m[0m          java.util.List[OrientDbWriteMessage[ODocument, NotUsed]],[0m
[0m[[0m[0mdebug[0m] [0m[0m          NotUsed] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    akka.stream.scaladsl[0m
[0m[[0m[0mdebug[0m] [0m[0m      .Flow[java.util.List[OrientDbWriteMessage[ODocument, NotUsed]]][0m
[0m[[0m[0mdebug[0m] [0m[0m      .map(_.asScala.toList)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .via(scaladsl.OrientDbFlow.create(className, settings))[0m
[0m[[0m[0mdebug[0m] [0m[0m      .map(_.asJava)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .asJava[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Flow to write `ODocument`s to OrientDB, elements within one list are stored within one transaction.[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Allows a `passThrough` of type `C`.[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def createWithPassThrough[C]([0m
[0m[[0m[0mdebug[0m] [0m[0m      className: String,[0m
[0m[[0m[0mdebug[0m] [0m[0m      settings: OrientDbWriteSettings[0m
[0m[[0m[0mdebug[0m] [0m[0m  ): Flow[java.util.List[OrientDbWriteMessage[ODocument, C]],[0m
[0m[[0m[0mdebug[0m] [0m[0m          java.util.List[OrientDbWriteMessage[ODocument, C]],[0m
[0m[[0m[0mdebug[0m] [0m[0m          NotUsed] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    akka.stream.scaladsl[0m
[0m[[0m[0mdebug[0m] [0m[0m      .Flow[java.util.List[OrientDbWriteMessage[ODocument, C]]][0m
[0m[[0m[0mdebug[0m] [0m[0m      .map(_.asScala.toList)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .via(scaladsl.OrientDbFlow.createWithPassThrough[C](className, settings))[0m
[0m[[0m[0mdebug[0m] [0m[0m      .map(_.asJava)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .asJava[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Flow to write elements of type `T` to OrientDB, elements within one list are stored within one transaction.[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def typed[T]([0m
[0m[[0m[0mdebug[0m] [0m[0m      className: String,[0m
[0m[[0m[0mdebug[0m] [0m[0m      settings: OrientDbWriteSettings,[0m
[0m[[0m[0mdebug[0m] [0m[0m      clazz: Class[T][0m
[0m[[0m[0mdebug[0m] [0m[0m  ): Flow[java.util.List[OrientDbWriteMessage[T, NotUsed]], java.util.List[OrientDbWriteMessage[T, NotUsed]], NotUsed] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    akka.stream.scaladsl[0m
[0m[[0m[0mdebug[0m] [0m[0m      .Flow[java.util.List[OrientDbWriteMessage[T, NotUsed]]][0m
[0m[[0m[0mdebug[0m] [0m[0m      .map(_.asScala.toList)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .via(scaladsl.OrientDbFlow.typed[T](className, settings, clazz))[0m
[0m[[0m[0mdebug[0m] [0m[0m      .map(_.asJava)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .asJava[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Flow to write elements of type `T` to OrientDB, elements within one list are stored within one transaction.[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Allows a `passThrough` of type `C`.[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def typedWithPassThrough[T, C]([0m
[0m[[0m[0mdebug[0m] [0m[0m      className: String,[0m
[0m[[0m[0mdebug[0m] [0m[0m      settings: OrientDbWriteSettings,[0m
[0m[[0m[0mdebug[0m] [0m[0m      clazz: Class[T][0m
[0m[[0m[0mdebug[0m] [0m[0m  ): Flow[java.util.List[OrientDbWriteMessage[T, C]], java.util.List[OrientDbWriteMessage[T, C]], NotUsed] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    akka.stream.scaladsl[0m
[0m[[0m[0mdebug[0m] [0m[0m      .Flow[java.util.List[OrientDbWriteMessage[T, C]]][0m
[0m[[0m[0mdebug[0m] [0m[0m      .map(_.asScala.toList)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .via(scaladsl.OrientDbFlow.typedWithPassThrough[T, C](className, settings, clazz))[0m
[0m[[0m[0mdebug[0m] [0m[0m      .map(_.asJava)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .asJava[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/orientdb/src/main/scala/akka/stream/alpakka/orientdb/OrientDbSourceSettings.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.orientdb[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport com.orientechnologies.orient.core.db.OPartitionedDatabasePool[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mfinal class OrientDbSourceSettings private ([0m
[0m[[0m[0mdebug[0m] [0m[0m    val oDatabasePool: com.orientechnologies.orient.core.db.OPartitionedDatabasePool,[0m
[0m[[0m[0mdebug[0m] [0m[0m    val skip: Int,[0m
[0m[[0m[0mdebug[0m] [0m[0m    val limit: Int[0m
[0m[[0m[0mdebug[0m] [0m[0m) {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def withOrientDBCredentials([0m
[0m[[0m[0mdebug[0m] [0m[0m      value: com.orientechnologies.orient.core.db.OPartitionedDatabasePool[0m
[0m[[0m[0mdebug[0m] [0m[0m  ): OrientDbSourceSettings =[0m
[0m[[0m[0mdebug[0m] [0m[0m    copy(oDatabasePool = value)[0m
[0m[[0m[0mdebug[0m] [0m[0m  def withSkip(value: Int): OrientDbSourceSettings = copy(skip = value)[0m
[0m[[0m[0mdebug[0m] [0m[0m  def withLimit(value: Int): OrientDbSourceSettings = copy(limit = value)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private def copy([0m
[0m[[0m[0mdebug[0m] [0m[0m      oDatabasePool: com.orientechnologies.orient.core.db.OPartitionedDatabasePool = oDatabasePool,[0m
[0m[[0m[0mdebug[0m] [0m[0m      skip: Int = skip,[0m
[0m[[0m[0mdebug[0m] [0m[0m      limit: Int = limit[0m
[0m[[0m[0mdebug[0m] [0m[0m  ): OrientDbSourceSettings = new OrientDbSourceSettings([0m
[0m[[0m[0mdebug[0m] [0m[0m    oDatabasePool = oDatabasePool,[0m
[0m[[0m[0mdebug[0m] [0m[0m    skip = skip,[0m
[0m[[0m[0mdebug[0m] [0m[0m    limit = limit[0m
[0m[[0m[0mdebug[0m] [0m[0m  )[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  override def toString =[0m
[0m[[0m[0mdebug[0m] [0m[0m    "OrientDBSourceSettings(" +[0m
[0m[[0m[0mdebug[0m] [0m[0m    s"oDatabasePool=$oDatabasePool," +[0m
[0m[[0m[0mdebug[0m] [0m[0m    s"skip=$skip," +[0m
[0m[[0m[0mdebug[0m] [0m[0m    s"limit=$limit" +[0m
[0m[[0m[0mdebug[0m] [0m[0m    ")"[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mobject OrientDbSourceSettings {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /** Scala API */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def apply(oDatabasePool: OPartitionedDatabasePool): OrientDbSourceSettings = new OrientDbSourceSettings([0m
[0m[[0m[0mdebug[0m] [0m[0m    oDatabasePool,[0m
[0m[[0m[0mdebug[0m] [0m[0m    skip = 0,[0m
[0m[[0m[0mdebug[0m] [0m[0m    limit = 10[0m
[0m[[0m[0mdebug[0m] [0m[0m  )[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /** Java API */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def create(oDatabasePool: OPartitionedDatabasePool): OrientDbSourceSettings = apply(oDatabasePool)[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/orientdb/src/main/scala/akka/stream/alpakka/orientdb/OrientDbWriteSettings.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.orientdb[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport com.orientechnologies.orient.core.db.OPartitionedDatabasePool[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mfinal class OrientDbWriteSettings private ([0m
[0m[[0m[0mdebug[0m] [0m[0m    val oDatabasePool: com.orientechnologies.orient.core.db.OPartitionedDatabasePool[0m
[0m[[0m[0mdebug[0m] [0m[0m) {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def withOrientDBCredentials([0m
[0m[[0m[0mdebug[0m] [0m[0m      value: com.orientechnologies.orient.core.db.OPartitionedDatabasePool[0m
[0m[[0m[0mdebug[0m] [0m[0m  ): OrientDbWriteSettings = copy(oDatabasePool = value)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private def copy([0m
[0m[[0m[0mdebug[0m] [0m[0m      oDatabasePool: com.orientechnologies.orient.core.db.OPartitionedDatabasePool = oDatabasePool[0m
[0m[[0m[0mdebug[0m] [0m[0m  ): OrientDbWriteSettings = new OrientDbWriteSettings([0m
[0m[[0m[0mdebug[0m] [0m[0m    oDatabasePool = oDatabasePool[0m
[0m[[0m[0mdebug[0m] [0m[0m  )[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  override def toString =[0m
[0m[[0m[0mdebug[0m] [0m[0m    "OrientDBUpdateSettings(" +[0m
[0m[[0m[0mdebug[0m] [0m[0m    s"oDatabasePool=$oDatabasePool" +[0m
[0m[[0m[0mdebug[0m] [0m[0m    ")"[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mobject OrientDbWriteSettings {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /** Scala API */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def apply(oDatabasePool: OPartitionedDatabasePool): OrientDbWriteSettings =[0m
[0m[[0m[0mdebug[0m] [0m[0m    new OrientDbWriteSettings([0m
[0m[[0m[0mdebug[0m] [0m[0m      oDatabasePool: OPartitionedDatabasePool[0m
[0m[[0m[0mdebug[0m] [0m[0m    )[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /** Java API */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def create(oDatabasePool: OPartitionedDatabasePool): OrientDbWriteSettings = apply(oDatabasePool)[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/orientdb/src/main/scala/akka/stream/alpakka/orientdb/scaladsl/OrientDbSink.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.orientdb.scaladsl[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.{Done, NotUsed}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.orientdb._[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.scaladsl.{Keep, Sink}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport com.orientechnologies.orient.core.record.impl.ODocument[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.concurrent.Future[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.collection.immutable[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m/**[0m
[0m[[0m[0mdebug[0m] [0m[0m * Scala API.[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0mobject OrientDbSink {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Sink to write `ODocument`s to OrientDB, elements within one sequence are stored within one transaction.[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def apply([0m
[0m[[0m[0mdebug[0m] [0m[0m      className: String,[0m
[0m[[0m[0mdebug[0m] [0m[0m      settings: OrientDbWriteSettings[0m
[0m[[0m[0mdebug[0m] [0m[0m  ): Sink[immutable.Seq[OrientDbWriteMessage[ODocument, NotUsed]], Future[Done]] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    OrientDbFlow.create(className, settings).toMat(Sink.ignore)(Keep.right)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Flow to write elements of type `T` to OrientDB, elements within one sequence are stored within one transaction.[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def typed[T]([0m
[0m[[0m[0mdebug[0m] [0m[0m      className: String,[0m
[0m[[0m[0mdebug[0m] [0m[0m      settings: OrientDbWriteSettings,[0m
[0m[[0m[0mdebug[0m] [0m[0m      clazz: Class[T][0m
[0m[[0m[0mdebug[0m] [0m[0m  ): Sink[immutable.Seq[OrientDbWriteMessage[T, NotUsed]], Future[Done]] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    OrientDbFlow[0m
[0m[[0m[0mdebug[0m] [0m[0m      .typed(className, settings, clazz)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .toMat(Sink.ignore)(Keep.right)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/orientdb/src/main/scala/akka/stream/alpakka/orientdb/scaladsl/OrientDbSource.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.orientdb.scaladsl[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.NotUsed[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.orientdb._[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.orientdb.impl.OrientDbSourceStage[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.scaladsl.Source[0m
[0m[[0m[0mdebug[0m] [0m[0mimport com.orientechnologies.orient.core.record.impl.ODocument[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m/**[0m
[0m[[0m[0mdebug[0m] [0m[0m * Scala API.[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0mobject OrientDbSource {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Read `ODocument`s from `className` or by `query`.[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def apply(className: String,[0m
[0m[[0m[0mdebug[0m] [0m[0m            settings: OrientDbSourceSettings,[0m
[0m[[0m[0mdebug[0m] [0m[0m            query: Option[String] = None): Source[OrientDbReadResult[ODocument], NotUsed] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    Source.fromGraph([0m
[0m[[0m[0mdebug[0m] [0m[0m      new OrientDbSourceStage([0m
[0m[[0m[0mdebug[0m] [0m[0m        className,[0m
[0m[[0m[0mdebug[0m] [0m[0m        query,[0m
[0m[[0m[0mdebug[0m] [0m[0m        settings[0m
[0m[[0m[0mdebug[0m] [0m[0m      )[0m
[0m[[0m[0mdebug[0m] [0m[0m    )[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Read elements of `T` from `className` or by `query`.[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def typed[T](className: String,[0m
[0m[[0m[0mdebug[0m] [0m[0m               settings: OrientDbSourceSettings,[0m
[0m[[0m[0mdebug[0m] [0m[0m               clazz: Class[T],[0m
[0m[[0m[0mdebug[0m] [0m[0m               query: String = null): Source[OrientDbReadResult[T], NotUsed] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    Source.fromGraph([0m
[0m[[0m[0mdebug[0m] [0m[0m      new OrientDbSourceStage[T]([0m
[0m[[0m[0mdebug[0m] [0m[0m        className,[0m
[0m[[0m[0mdebug[0m] [0m[0m        Option(query),[0m
[0m[[0m[0mdebug[0m] [0m[0m        settings,[0m
[0m[[0m[0mdebug[0m] [0m[0m        clazz = Some(clazz)[0m
[0m[[0m[0mdebug[0m] [0m[0m      )[0m
[0m[[0m[0mdebug[0m] [0m[0m    )[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/orientdb/src/main/scala/akka/stream/alpakka/orientdb/scaladsl/OrientDbFlow.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.orientdb.scaladsl[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.NotUsed[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.orientdb._[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.orientdb.impl.OrientDbFlowStage[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.scaladsl.Flow[0m
[0m[[0m[0mdebug[0m] [0m[0mimport com.orientechnologies.orient.core.record.impl.ODocument[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.collection.immutable[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m/**[0m
[0m[[0m[0mdebug[0m] [0m[0m * Scala API.[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0mobject OrientDbFlow {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Flow to write `ODocument`s to OrientDB, elements within one list are stored within one transaction.[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def create([0m
[0m[[0m[0mdebug[0m] [0m[0m      className: String,[0m
[0m[[0m[0mdebug[0m] [0m[0m      settings: OrientDbWriteSettings[0m
[0m[[0m[0mdebug[0m] [0m[0m  ): Flow[immutable.Seq[OrientDbWriteMessage[ODocument, NotUsed]],[0m
[0m[[0m[0mdebug[0m] [0m[0m          immutable.Seq[OrientDbWriteMessage[ODocument, NotUsed]],[0m
[0m[[0m[0mdebug[0m] [0m[0m          NotUsed] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    Flow[0m
[0m[[0m[0mdebug[0m] [0m[0m      .fromGraph([0m
[0m[[0m[0mdebug[0m] [0m[0m        new OrientDbFlowStage[ODocument, NotUsed]([0m
[0m[[0m[0mdebug[0m] [0m[0m          className,[0m
[0m[[0m[0mdebug[0m] [0m[0m          settings,[0m
[0m[[0m[0mdebug[0m] [0m[0m          None[0m
[0m[[0m[0mdebug[0m] [0m[0m        )[0m
[0m[[0m[0mdebug[0m] [0m[0m      )[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Flow to write `ODocument`s to OrientDB, elements within one sequence are stored within one transaction.[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Allows a `passThrough` of type `C`.[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def createWithPassThrough[C]([0m
[0m[[0m[0mdebug[0m] [0m[0m      className: String,[0m
[0m[[0m[0mdebug[0m] [0m[0m      settings: OrientDbWriteSettings[0m
[0m[[0m[0mdebug[0m] [0m[0m  ): Flow[immutable.Seq[OrientDbWriteMessage[ODocument, C]],[0m
[0m[[0m[0mdebug[0m] [0m[0m          immutable.Seq[OrientDbWriteMessage[ODocument, C]],[0m
[0m[[0m[0mdebug[0m] [0m[0m          NotUsed] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    Flow[0m
[0m[[0m[0mdebug[0m] [0m[0m      .fromGraph([0m
[0m[[0m[0mdebug[0m] [0m[0m        new OrientDbFlowStage[ODocument, C]([0m
[0m[[0m[0mdebug[0m] [0m[0m          className,[0m
[0m[[0m[0mdebug[0m] [0m[0m          settings,[0m
[0m[[0m[0mdebug[0m] [0m[0m          None[0m
[0m[[0m[0mdebug[0m] [0m[0m        )[0m
[0m[[0m[0mdebug[0m] [0m[0m      )[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Flow to write elements of type `T` to OrientDB, elements within one sequence are stored within one transaction.[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def typed[T]([0m
[0m[[0m[0mdebug[0m] [0m[0m      className: String,[0m
[0m[[0m[0mdebug[0m] [0m[0m      settings: OrientDbWriteSettings,[0m
[0m[[0m[0mdebug[0m] [0m[0m      clazz: Class[T][0m
[0m[[0m[0mdebug[0m] [0m[0m  ): Flow[immutable.Seq[OrientDbWriteMessage[T, NotUsed]], immutable.Seq[OrientDbWriteMessage[T, NotUsed]], NotUsed] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    Flow[0m
[0m[[0m[0mdebug[0m] [0m[0m      .fromGraph([0m
[0m[[0m[0mdebug[0m] [0m[0m        new OrientDbFlowStage[T, NotUsed]([0m
[0m[[0m[0mdebug[0m] [0m[0m          className,[0m
[0m[[0m[0mdebug[0m] [0m[0m          settings,[0m
[0m[[0m[0mdebug[0m] [0m[0m          Some(clazz)[0m
[0m[[0m[0mdebug[0m] [0m[0m        )[0m
[0m[[0m[0mdebug[0m] [0m[0m      )[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Flow to write elements of type `T` to OrientDB, elements within one sequence are stored within one transaction.[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Allows a `passThrough` of type `C`.[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def typedWithPassThrough[T, C]([0m
[0m[[0m[0mdebug[0m] [0m[0m      className: String,[0m
[0m[[0m[0mdebug[0m] [0m[0m      settings: OrientDbWriteSettings,[0m
[0m[[0m[0mdebug[0m] [0m[0m      clazz: Class[T][0m
[0m[[0m[0mdebug[0m] [0m[0m  ): Flow[immutable.Seq[OrientDbWriteMessage[T, C]], immutable.Seq[OrientDbWriteMessage[T, C]], NotUsed] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    Flow[0m
[0m[[0m[0mdebug[0m] [0m[0m      .fromGraph([0m
[0m[[0m[0mdebug[0m] [0m[0m        new OrientDbFlowStage[T, C]([0m
[0m[[0m[0mdebug[0m] [0m[0m          className,[0m
[0m[[0m[0mdebug[0m] [0m[0m          settings,[0m
[0m[[0m[0mdebug[0m] [0m[0m          Some(clazz)[0m
[0m[[0m[0mdebug[0m] [0m[0m        )[0m
[0m[[0m[0mdebug[0m] [0m[0m      )[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/orientdb/src/main/scala/akka/stream/alpakka/orientdb/impl/OrientDbSourceStage.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.orientdb.impl[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.util[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.annotation.InternalApi[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.orientdb.{OrientDbReadResult, OrientDbSourceSettings}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.stage.{GraphStage, GraphStageLogic, OutHandler}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.{ActorAttributes, Attributes, Outlet, SourceShape}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport com.orientechnologies.orient.`object`.db.OObjectDatabaseTx[0m
[0m[[0m[0mdebug[0m] [0m[0mimport com.orientechnologies.orient.core.db.document.ODatabaseDocumentTx[0m
[0m[[0m[0mdebug[0m] [0m[0mimport com.orientechnologies.orient.core.sql.query.OSQLSynchQuery[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.collection.JavaConverters._[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m/**[0m
[0m[[0m[0mdebug[0m] [0m[0m * INTERNAL API[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m@InternalApi[0m
[0m[[0m[0mdebug[0m] [0m[0mprivate[orientdb] final class OrientDbSourceStage[T](className: String,[0m
[0m[[0m[0mdebug[0m] [0m[0m                                                     query: Option[String],[0m
[0m[[0m[0mdebug[0m] [0m[0m                                                     settings: OrientDbSourceSettings,[0m
[0m[[0m[0mdebug[0m] [0m[0m                                                     clazz: Option[Class[T]] = None)[0m
[0m[[0m[0mdebug[0m] [0m[0m    extends GraphStage[SourceShape[OrientDbReadResult[T]]] {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  val out: Outlet[OrientDbReadResult[T]] = Outlet("OrientDBSource.out")[0m
[0m[[0m[0mdebug[0m] [0m[0m  override val shape = SourceShape(out)[0m
[0m[[0m[0mdebug[0m] [0m[0m  override def initialAttributes: Attributes =[0m
[0m[[0m[0mdebug[0m] [0m[0m    // see https://orientdb.com/docs/last/Java-Multi-Threading.html[0m
[0m[[0m[0mdebug[0m] [0m[0m    super.initialAttributes.and(ActorAttributes.Dispatcher("alpakka.orientdb.pinned-dispatcher"))[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  override def createLogic(inheritedAttributes: Attributes): GraphStageLogic =[0m
[0m[[0m[0mdebug[0m] [0m[0m    clazz match {[0m
[0m[[0m[0mdebug[0m] [0m[0m      case None =>[0m
[0m[[0m[0mdebug[0m] [0m[0m        query match {[0m
[0m[[0m[0mdebug[0m] [0m[0m          case Some(q) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m            new Logic {[0m
[0m[[0m[0mdebug[0m] [0m[0m              override protected def runQuery(): util.List[T] =[0m
[0m[[0m[0mdebug[0m] [0m[0m                client.query[util.List[T]](new OSQLSynchQuery[T](q))[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m            }[0m
[0m[[0m[0mdebug[0m] [0m[0m          case None =>[0m
[0m[[0m[0mdebug[0m] [0m[0m            new Logic {[0m
[0m[[0m[0mdebug[0m] [0m[0m              override protected def runQuery(): util.List[T] =[0m
[0m[[0m[0mdebug[0m] [0m[0m                client.query[util.List[T]]([0m
[0m[[0m[0mdebug[0m] [0m[0m                  new OSQLSynchQuery[T](s"SELECT * FROM $className SKIP ${skip} LIMIT ${settings.limit}")[0m
[0m[[0m[0mdebug[0m] [0m[0m                )[0m
[0m[[0m[0mdebug[0m] [0m[0m            }[0m
[0m[[0m[0mdebug[0m] [0m[0m        }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m      case Some(c) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m        query match {[0m
[0m[[0m[0mdebug[0m] [0m[0m          case Some(q) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m            new Logic {[0m
[0m[[0m[0mdebug[0m] [0m[0m              override def preStart(): Unit = {[0m
[0m[[0m[0mdebug[0m] [0m[0m                super.preStart()[0m
[0m[[0m[0mdebug[0m] [0m[0m                oObjectClient.getEntityManager.registerEntityClass(c)[0m
[0m[[0m[0mdebug[0m] [0m[0m              }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m              override protected def runQuery(): util.List[T] = {[0m
[0m[[0m[0mdebug[0m] [0m[0m                client.setDatabaseOwner(oObjectClient)[0m
[0m[[0m[0mdebug[0m] [0m[0m                oObjectClient.getEntityManager.registerEntityClass(c)[0m
[0m[[0m[0mdebug[0m] [0m[0m                oObjectClient.query[util.List[T]](new OSQLSynchQuery[T](q))[0m
[0m[[0m[0mdebug[0m] [0m[0m              }[0m
[0m[[0m[0mdebug[0m] [0m[0m            }[0m
[0m[[0m[0mdebug[0m] [0m[0m          case None =>[0m
[0m[[0m[0mdebug[0m] [0m[0m            new Logic {[0m
[0m[[0m[0mdebug[0m] [0m[0m              override def preStart(): Unit = {[0m
[0m[[0m[0mdebug[0m] [0m[0m                super.preStart()[0m
[0m[[0m[0mdebug[0m] [0m[0m                oObjectClient.getEntityManager.registerEntityClass(c)[0m
[0m[[0m[0mdebug[0m] [0m[0m              }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m              override protected def runQuery(): util.List[T] =[0m
[0m[[0m[0mdebug[0m] [0m[0m                oObjectClient[0m
[0m[[0m[0mdebug[0m] [0m[0m                  .query[util.List[T]]([0m
[0m[[0m[0mdebug[0m] [0m[0m                    new OSQLSynchQuery[T]([0m
[0m[[0m[0mdebug[0m] [0m[0m                      s"SELECT * FROM $className SKIP ${skip} LIMIT ${settings.limit}"[0m
[0m[[0m[0mdebug[0m] [0m[0m                    )[0m
[0m[[0m[0mdebug[0m] [0m[0m                  )[0m
[0m[[0m[0mdebug[0m] [0m[0m            }[0m
[0m[[0m[0mdebug[0m] [0m[0m        }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private abstract class Logic extends GraphStageLogic(shape) with OutHandler {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    protected var client: ODatabaseDocumentTx = _[0m
[0m[[0m[0mdebug[0m] [0m[0m    protected var oObjectClient: OObjectDatabaseTx = _[0m
[0m[[0m[0mdebug[0m] [0m[0m    protected var skip = settings.skip[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    override def preStart(): Unit = {[0m
[0m[[0m[0mdebug[0m] [0m[0m      client = settings.oDatabasePool.acquire()[0m
[0m[[0m[0mdebug[0m] [0m[0m      oObjectClient = new OObjectDatabaseTx(client)[0m
[0m[[0m[0mdebug[0m] [0m[0m      client.setDatabaseOwner(oObjectClient)[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    override def postStop(): Unit =[0m
[0m[[0m[0mdebug[0m] [0m[0m      if (client != null) {[0m
[0m[[0m[0mdebug[0m] [0m[0m        if (oObjectClient != null) oObjectClient.close()[0m
[0m[[0m[0mdebug[0m] [0m[0m        client.close()[0m
[0m[[0m[0mdebug[0m] [0m[0m      }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    setHandler(out, this)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    override def onPull(): Unit = {[0m
[0m[[0m[0mdebug[0m] [0m[0m      val data = runQuery().asScala.toList[0m
[0m[[0m[0mdebug[0m] [0m[0m      if (data.isEmpty)[0m
[0m[[0m[0mdebug[0m] [0m[0m        completeStage()[0m
[0m[[0m[0mdebug[0m] [0m[0m      else {[0m
[0m[[0m[0mdebug[0m] [0m[0m        skip += settings.limit[0m
[0m[[0m[0mdebug[0m] [0m[0m        emitMultiple(out, data.map(OrientDbReadResult(_)).toIterator)[0m
[0m[[0m[0mdebug[0m] [0m[0m      }[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    protected def runQuery(): java.util.List[T][0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/orientdb/src/main/scala/akka/stream/alpakka/orientdb/impl/OrientDbFlowStage.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.orientdb.impl[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.annotation.InternalApi[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream._[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.orientdb.{OrientDbWriteMessage, OrientDbWriteSettings}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.stage._[0m
[0m[[0m[0mdebug[0m] [0m[0mimport com.orientechnologies.orient.`object`.db.OObjectDatabaseTx[0m
[0m[[0m[0mdebug[0m] [0m[0mimport com.orientechnologies.orient.core.db.document.ODatabaseDocumentTx[0m
[0m[[0m[0mdebug[0m] [0m[0mimport com.orientechnologies.orient.core.record.ORecord[0m
[0m[[0m[0mdebug[0m] [0m[0mimport com.orientechnologies.orient.core.record.impl.ODocument[0m
[0m[[0m[0mdebug[0m] [0m[0mimport com.orientechnologies.orient.core.tx.OTransaction[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.collection.immutable[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.util.control.NonFatal[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m/**[0m
[0m[[0m[0mdebug[0m] [0m[0m * INTERNAL API[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m@InternalApi[0m
[0m[[0m[0mdebug[0m] [0m[0mprivate[orientdb] class OrientDbFlowStage[T, C]([0m
[0m[[0m[0mdebug[0m] [0m[0m    className: String,[0m
[0m[[0m[0mdebug[0m] [0m[0m    settings: OrientDbWriteSettings,[0m
[0m[[0m[0mdebug[0m] [0m[0m    clazz: Option[Class[T]][0m
[0m[[0m[0mdebug[0m] [0m[0m) extends GraphStage[FlowShape[immutable.Seq[OrientDbWriteMessage[T, C]], immutable.Seq[OrientDbWriteMessage[T, C]]]] {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private val in = Inlet[immutable.Seq[OrientDbWriteMessage[T, C]]]("in")[0m
[0m[[0m[0mdebug[0m] [0m[0m  private val out = Outlet[immutable.Seq[OrientDbWriteMessage[T, C]]]("out")[0m
[0m[[0m[0mdebug[0m] [0m[0m  override val shape = FlowShape(in, out)[0m
[0m[[0m[0mdebug[0m] [0m[0m  override def initialAttributes: Attributes =[0m
[0m[[0m[0mdebug[0m] [0m[0m    // see https://orientdb.com/docs/last/Java-Multi-Threading.html[0m
[0m[[0m[0mdebug[0m] [0m[0m    super.initialAttributes.and(ActorAttributes.Dispatcher("alpakka.orientdb.pinned-dispatcher"))[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  override def createLogic(inheritedAttributes: Attributes): GraphStageLogic =[0m
[0m[[0m[0mdebug[0m] [0m[0m    clazz match {[0m
[0m[[0m[0mdebug[0m] [0m[0m      case Some(c) => new OrientDbTypedLogic(c)[0m
[0m[[0m[0mdebug[0m] [0m[0m      case None => new ORecordLogic(className)[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  sealed abstract class OrientDbLogic extends GraphStageLogic(shape) with InHandler with OutHandler {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    protected var client: ODatabaseDocumentTx = _[0m
[0m[[0m[0mdebug[0m] [0m[0m    protected var oObjectClient: OObjectDatabaseTx = _[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    override def preStart(): Unit = {[0m
[0m[[0m[0mdebug[0m] [0m[0m      client = settings.oDatabasePool.acquire()[0m
[0m[[0m[0mdebug[0m] [0m[0m      oObjectClient = new OObjectDatabaseTx(client)[0m
[0m[[0m[0mdebug[0m] [0m[0m      client.setDatabaseOwner(oObjectClient)[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    override def postStop(): Unit = {[0m
[0m[[0m[0mdebug[0m] [0m[0m      oObjectClient.close()[0m
[0m[[0m[0mdebug[0m] [0m[0m      client.close()[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    protected def write(messages: immutable.Seq[OrientDbWriteMessage[T, C]]): Unit[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    setHandlers(in, out, this)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    override def onPull(): Unit = if (!isClosed(in) && !hasBeenPulled(in)) pull(in)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    override def onPush(): Unit = {[0m
[0m[[0m[0mdebug[0m] [0m[0m      val messages = grab(in)[0m
[0m[[0m[0mdebug[0m] [0m[0m      if (messages.nonEmpty) {[0m
[0m[[0m[0mdebug[0m] [0m[0m        client.begin(OTransaction.TXTYPE.OPTIMISTIC)[0m
[0m[[0m[0mdebug[0m] [0m[0m        try {[0m
[0m[[0m[0mdebug[0m] [0m[0m          write(messages)[0m
[0m[[0m[0mdebug[0m] [0m[0m          client.commit()[0m
[0m[[0m[0mdebug[0m] [0m[0m          push(out, messages)[0m
[0m[[0m[0mdebug[0m] [0m[0m        } catch {[0m
[0m[[0m[0mdebug[0m] [0m[0m          case NonFatal(e) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m            client.rollback()[0m
[0m[[0m[0mdebug[0m] [0m[0m            throw e[0m
[0m[[0m[0mdebug[0m] [0m[0m        }[0m
[0m[[0m[0mdebug[0m] [0m[0m      }[0m
[0m[[0m[0mdebug[0m] [0m[0m      tryPull(in)[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  final class ORecordLogic(className: String) extends OrientDbLogic {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    override def preStart(): Unit = {[0m
[0m[[0m[0mdebug[0m] [0m[0m      super.preStart()[0m
[0m[[0m[0mdebug[0m] [0m[0m      if (!client.getMetadata.getSchema.existsClass(className)) {[0m
[0m[[0m[0mdebug[0m] [0m[0m        client.getMetadata.getSchema.createClass(className)[0m
[0m[[0m[0mdebug[0m] [0m[0m      }[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    protected def write(messages: immutable.Seq[OrientDbWriteMessage[T, C]]): Unit =[0m
[0m[[0m[0mdebug[0m] [0m[0m      messages.foreach {[0m
[0m[[0m[0mdebug[0m] [0m[0m        case OrientDbWriteMessage(oDocument: ODocument, _) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m          val document = new ODocument()[0m
[0m[[0m[0mdebug[0m] [0m[0m          oDocument[0m
[0m[[0m[0mdebug[0m] [0m[0m            .fieldNames()[0m
[0m[[0m[0mdebug[0m] [0m[0m            .zip(oDocument.asInstanceOf[ODocument].fieldValues())[0m
[0m[[0m[0mdebug[0m] [0m[0m            .foreach {[0m
[0m[[0m[0mdebug[0m] [0m[0m              case (fieldName, fieldVal) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m                document.field(fieldName, fieldVal)[0m
[0m[[0m[0mdebug[0m] [0m[0m            }[0m
[0m[[0m[0mdebug[0m] [0m[0m          document.setClassName(className)[0m
[0m[[0m[0mdebug[0m] [0m[0m          client.save(document)[0m
[0m[[0m[0mdebug[0m] [0m[0m          ()[0m
[0m[[0m[0mdebug[0m] [0m[0m        case OrientDbWriteMessage(oRecord: ORecord, _) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m          client.save(oRecord)[0m
[0m[[0m[0mdebug[0m] [0m[0m          ()[0m
[0m[[0m[0mdebug[0m] [0m[0m        case OrientDbWriteMessage(others: AnyRef, _) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m          failStage(new RuntimeException(s"unexpected type [${others.getClass()}], ORecord required"))[0m
[0m[[0m[0mdebug[0m] [0m[0m      }[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  final class OrientDbTypedLogic(clazz: Class[T]) extends OrientDbLogic() {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    override def preStart(): Unit = {[0m
[0m[[0m[0mdebug[0m] [0m[0m      super.preStart()[0m
[0m[[0m[0mdebug[0m] [0m[0m      oObjectClient.getEntityManager.registerEntityClass(clazz)[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    protected def write(messages: immutable.Seq[OrientDbWriteMessage[T, C]]): Unit =[0m
[0m[[0m[0mdebug[0m] [0m[0m      messages.foreach {[0m
[0m[[0m[0mdebug[0m] [0m[0m        case OrientDbWriteMessage(typeRecord: Any, _) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m          oObjectClient.save(typeRecord)[0m
[0m[[0m[0mdebug[0m] [0m[0m          ()[0m
[0m[[0m[0mdebug[0m] [0m[0m      }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/orientdb/src/main/scala/akka/stream/alpakka/orientdb/model.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.orientdb[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.NotUsed[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mobject OrientDbWriteMessage {[0m
[0m[[0m[0mdebug[0m] [0m[0m  // Apply method to use when not using passThrough[0m
[0m[[0m[0mdebug[0m] [0m[0m  def apply[T](oDocument: T): OrientDbWriteMessage[T, NotUsed] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    OrientDbWriteMessage(oDocument, NotUsed)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  // Java-api - without passThrough[0m
[0m[[0m[0mdebug[0m] [0m[0m  def create[T](oDocument: T): OrientDbWriteMessage[T, NotUsed] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    OrientDbWriteMessage(oDocument, NotUsed)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  // Java-api - with passThrough[0m
[0m[[0m[0mdebug[0m] [0m[0m  def create[T, C](oDocument: T, passThrough: C) =[0m
[0m[[0m[0mdebug[0m] [0m[0m    OrientDbWriteMessage(oDocument, passThrough)[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mfinal case class OrientDbWriteMessage[T, C](oDocument: T, passThrough: C)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mfinal case class OrientDbReadResult[T](oDocument: T)[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
