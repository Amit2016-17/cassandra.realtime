[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/sqs/src/main/scala/akka/stream/alpakka/sqs/SqsModel.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.sqs[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.NotUsed[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.annotation.InternalApi[0m
[0m[[0m[0mdebug[0m] [0m[0mimport software.amazon.awssdk.awscore.DefaultAwsResponseMetadata[0m
[0m[[0m[0mdebug[0m] [0m[0mimport software.amazon.awssdk.services.sqs.model._[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.concurrent.duration.FiniteDuration[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0msealed abstract class MessageAction(val message: Message) {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /** Java API */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def getMessage: Message = message[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mobject MessageAction {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Delete the message from the queue.[0m
[0m[[0m[0mdebug[0m] [0m[0m   *[0m
[0m[[0m[0mdebug[0m] [0m[0m   * @see [https://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/API_DeleteMessage.html DeleteMessage][0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  final class Delete private (message: Message) extends MessageAction(message) {[0m
[0m[[0m[0mdebug[0m] [0m[0m    override def toString: String = s"Delete(message=$message)"[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    override def equals(other: Any): Boolean = other match {[0m
[0m[[0m[0mdebug[0m] [0m[0m      case that: Delete => java.util.Objects.equals(this.message, that.message)[0m
[0m[[0m[0mdebug[0m] [0m[0m      case _ => false[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    override def hashCode(): Int = java.util.Objects.hash(message)[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  final object Delete {[0m
[0m[[0m[0mdebug[0m] [0m[0m    def apply(message: Message): Delete = new Delete(message)[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Ignore the message.[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  final class Ignore private (message: Message) extends MessageAction(message) {[0m
[0m[[0m[0mdebug[0m] [0m[0m    override def toString: String = s"Ignore(message=$message)"[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    override def equals(other: Any): Boolean = other match {[0m
[0m[[0m[0mdebug[0m] [0m[0m      case that: Ignore => java.util.Objects.equals(this.message, that.message)[0m
[0m[[0m[0mdebug[0m] [0m[0m      case _ => false[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    override def hashCode(): Int = java.util.Objects.hash(message)[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  final object Ignore {[0m
[0m[[0m[0mdebug[0m] [0m[0m    def apply(message: Message): Ignore = new Ignore(message)[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Change the visibility timeout of the message.[0m
[0m[[0m[0mdebug[0m] [0m[0m   * The maximum allowed timeout value is 12 hours.[0m
[0m[[0m[0mdebug[0m] [0m[0m   *[0m
[0m[[0m[0mdebug[0m] [0m[0m   * @param visibilityTimeout new timeout in seconds[0m
[0m[[0m[0mdebug[0m] [0m[0m   * @see [https://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/API_ChangeMessageVisibility.html ChangeMessageVisibility][0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  final class ChangeMessageVisibility private (message: Message, val visibilityTimeout: Int)[0m
[0m[[0m[0mdebug[0m] [0m[0m      extends MessageAction(message) {[0m
[0m[[0m[0mdebug[0m] [0m[0m    // SQS requirements[0m
[0m[[0m[0mdebug[0m] [0m[0m    require([0m
[0m[[0m[0mdebug[0m] [0m[0m      0 <= visibilityTimeout && visibilityTimeout <= 43200,[0m
[0m[[0m[0mdebug[0m] [0m[0m      s"Invalid value ($visibilityTimeout) for visibilityTimeout. Requirement: 0 <= visibilityTimeout <= 43200"[0m
[0m[[0m[0mdebug[0m] [0m[0m    )[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    /** Java API */[0m
[0m[[0m[0mdebug[0m] [0m[0m    def getVisibilityTimeout: Int = visibilityTimeout[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    override def toString: String = s"ChangeMessageVisibility(message=$message,visibilityTimeout=$visibilityTimeout)"[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    override def equals(other: Any): Boolean = other match {[0m
[0m[[0m[0mdebug[0m] [0m[0m      case that: ChangeMessageVisibility =>[0m
[0m[[0m[0mdebug[0m] [0m[0m        java.util.Objects.equals(this.message, that.message) &&[0m
[0m[[0m[0mdebug[0m] [0m[0m        this.visibilityTimeout == that.visibilityTimeout[0m
[0m[[0m[0mdebug[0m] [0m[0m      case _ => false[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    override def hashCode(): Int = java.util.Objects.hash(message, visibilityTimeout: Integer)[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  object ChangeMessageVisibility {[0m
[0m[[0m[0mdebug[0m] [0m[0m    def apply(message: Message, visibilityTimeout: Int): ChangeMessageVisibility =[0m
[0m[[0m[0mdebug[0m] [0m[0m      new ChangeMessageVisibility(message, visibilityTimeout)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    def apply(message: Message, visibilityTimeout: FiniteDuration): ChangeMessageVisibility =[0m
[0m[[0m[0mdebug[0m] [0m[0m      new ChangeMessageVisibility(message, visibilityTimeout.toSeconds.toInt)[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Java API: Delete the message from the queue.[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def delete(message: Message): MessageAction = Delete(message)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Java API: Ignore the message.[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def ignore(message: Message): MessageAction = Ignore(message)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Java API: Change the visibility timeout of the message.[0m
[0m[[0m[0mdebug[0m] [0m[0m   *[0m
[0m[[0m[0mdebug[0m] [0m[0m   * @param message           the message to change[0m
[0m[[0m[0mdebug[0m] [0m[0m   * @param visibilityTimeout new timeout in seconds[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def changeMessageVisibility(message: Message, visibilityTimeout: Int): MessageAction =[0m
[0m[[0m[0mdebug[0m] [0m[0m    ChangeMessageVisibility(message, visibilityTimeout)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Java API: Change the visibility timeout of the message.[0m
[0m[[0m[0mdebug[0m] [0m[0m   *[0m
[0m[[0m[0mdebug[0m] [0m[0m   * @param message           the message to change[0m
[0m[[0m[0mdebug[0m] [0m[0m   * @param visibilityTimeout new timeout[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def changeMessageVisibility(message: Message, visibilityTimeout: java.time.Duration): MessageAction =[0m
[0m[[0m[0mdebug[0m] [0m[0m    ChangeMessageVisibility(message, visibilityTimeout.getSeconds.toInt)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m/**[0m
[0m[[0m[0mdebug[0m] [0m[0m * Result contained in a Sqs Response.[0m
[0m[[0m[0mdebug[0m] [0m[0m *[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0msealed abstract class SqsResult {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  type Result[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * The SQS response metadata (AWS request ID, ...)[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def responseMetadata: SqsResponseMetadata[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def result: Result[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /** Java API */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def geResponseMetadata: SqsResponseMetadata = responseMetadata[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /** Java API */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def getResult: Result = result[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mobject SqsResult {[0m
[0m[[0m[0mdebug[0m] [0m[0m  private[sqs] val EmptySqsResponseMetadata: SqsResponseMetadata = SqsResponseMetadata.create([0m
[0m[[0m[0mdebug[0m] [0m[0m    DefaultAwsResponseMetadata.create(java.util.Collections.emptyMap())[0m
[0m[[0m[0mdebug[0m] [0m[0m  )[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m/**[0m
[0m[[0m[0mdebug[0m] [0m[0m * Messages returned by a SqsPublishFlow[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0mfinal class SqsPublishResult @InternalApi private[sqs] ([0m
[0m[[0m[0mdebug[0m] [0m[0m    val request: SendMessageRequest,[0m
[0m[[0m[0mdebug[0m] [0m[0m    response: SendMessageResponse[0m
[0m[[0m[0mdebug[0m] [0m[0m) extends SqsResult {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  override type Result = SendMessageResponse[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  override def responseMetadata: SqsResponseMetadata = response.responseMetadata[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  override def result: SendMessageResponse = response[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  override def toString =[0m
[0m[[0m[0mdebug[0m] [0m[0m    s"""SqsPublishResult(request=$request,result=$result)"""[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  override def equals(other: Any): Boolean = other match {[0m
[0m[[0m[0mdebug[0m] [0m[0m    case that: SqsPublishResult =>[0m
[0m[[0m[0mdebug[0m] [0m[0m      java.util.Objects.equals(this.request, that.request) &&[0m
[0m[[0m[0mdebug[0m] [0m[0m      java.util.Objects.equals(this.result, that.result)[0m
[0m[[0m[0mdebug[0m] [0m[0m    case _ => false[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  override def hashCode(): Int = java.util.Objects.hash(request, result)[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m/**[0m
[0m[[0m[0mdebug[0m] [0m[0m * Messages returned by a SqsPublishFlow.grouped or batched[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0mfinal class SqsPublishResultEntry @InternalApi private[sqs] ([0m
[0m[[0m[0mdebug[0m] [0m[0m    val request: SendMessageRequest,[0m
[0m[[0m[0mdebug[0m] [0m[0m    override val result: SendMessageBatchResultEntry,[0m
[0m[[0m[0mdebug[0m] [0m[0m    override val responseMetadata: SqsResponseMetadata[0m
[0m[[0m[0mdebug[0m] [0m[0m) extends SqsResult {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  override type Result = SendMessageBatchResultEntry[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  override def toString =[0m
[0m[[0m[0mdebug[0m] [0m[0m    s"""SqsPublishResultEntry(request=$request,result=$result)"""[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  override def equals(other: Any): Boolean = other match {[0m
[0m[[0m[0mdebug[0m] [0m[0m    case that: SqsPublishResultEntry =>[0m
[0m[[0m[0mdebug[0m] [0m[0m      java.util.Objects.equals(this.request, that.request) &&[0m
[0m[[0m[0mdebug[0m] [0m[0m      java.util.Objects.equals(this.result, that.result)[0m
[0m[[0m[0mdebug[0m] [0m[0m    case _ => false[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  override def hashCode(): Int = java.util.Objects.hash(request, result)[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m/**[0m
[0m[[0m[0mdebug[0m] [0m[0m * Messages returned by a SqsAckFlow[0m
[0m[[0m[0mdebug[0m] [0m[0m *[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0msealed abstract class SqsAckResult extends SqsResult {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def messageAction: MessageAction[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /** Java API */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def getMessageAction: MessageAction = messageAction[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mobject SqsAckResult {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Delete acknowledgment[0m
[0m[[0m[0mdebug[0m] [0m[0m   * @param messageAction the delete message action[0m
[0m[[0m[0mdebug[0m] [0m[0m   * @param result the sqs DeleteMessageResponse[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  final class SqsDeleteResult @InternalApi private[sqs] ([0m
[0m[[0m[0mdebug[0m] [0m[0m      override val messageAction: MessageAction.Delete,[0m
[0m[[0m[0mdebug[0m] [0m[0m      override val result: DeleteMessageResponse[0m
[0m[[0m[0mdebug[0m] [0m[0m  ) extends SqsAckResult {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    override type Result = DeleteMessageResponse[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    override def responseMetadata: SqsResponseMetadata = result.responseMetadata[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    override def toString: String =[0m
[0m[[0m[0mdebug[0m] [0m[0m      s"SqsDeleteResult(messageAction=$messageAction,result=$result)"[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    override def equals(other: Any): Boolean = other match {[0m
[0m[[0m[0mdebug[0m] [0m[0m      case that: SqsDeleteResult =>[0m
[0m[[0m[0mdebug[0m] [0m[0m        java.util.Objects.equals(this.messageAction, that.messageAction) &&[0m
[0m[[0m[0mdebug[0m] [0m[0m        java.util.Objects.equals(this.result, that.result)[0m
[0m[[0m[0mdebug[0m] [0m[0m      case _ => false[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    override def hashCode(): Int = java.util.Objects.hash(messageAction, result)[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Ignore acknowledgment[0m
[0m[[0m[0mdebug[0m] [0m[0m   * No requests are executed on the SQS service for ignore messageAction.[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Its result is [[akka.NotUsed]] and the responseMetadata is always empty[0m
[0m[[0m[0mdebug[0m] [0m[0m   * @param messageAction the ignore message action[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  final class SqsIgnoreResult @InternalApi private[sqs] ([0m
[0m[[0m[0mdebug[0m] [0m[0m      override val messageAction: MessageAction.Ignore[0m
[0m[[0m[0mdebug[0m] [0m[0m  ) extends SqsAckResult {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    override type Result = NotUsed.type[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    override def responseMetadata: SqsResponseMetadata = SqsResult.EmptySqsResponseMetadata[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    override def result: Result = NotUsed[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    override def toString: String =[0m
[0m[[0m[0mdebug[0m] [0m[0m      s"SqsIgnoreResult(messageAction=$messageAction)"[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    override def equals(other: Any): Boolean = other match {[0m
[0m[[0m[0mdebug[0m] [0m[0m      case that: SqsIgnoreResult =>[0m
[0m[[0m[0mdebug[0m] [0m[0m        java.util.Objects.equals(this.messageAction, that.messageAction)[0m
[0m[[0m[0mdebug[0m] [0m[0m      case _ => false[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    override def hashCode(): Int = java.util.Objects.hash(messageAction)[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * ChangeMessageVisibility acknowledgement[0m
[0m[[0m[0mdebug[0m] [0m[0m   * @param messageAction the change message visibility action[0m
[0m[[0m[0mdebug[0m] [0m[0m   * @param result the sqs ChangeMessageVisibilityResponse[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  final class SqsChangeMessageVisibilityResult @InternalApi private[sqs] ([0m
[0m[[0m[0mdebug[0m] [0m[0m      override val messageAction: MessageAction.ChangeMessageVisibility,[0m
[0m[[0m[0mdebug[0m] [0m[0m      override val result: ChangeMessageVisibilityResponse[0m
[0m[[0m[0mdebug[0m] [0m[0m  ) extends SqsAckResult {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    override type Result = ChangeMessageVisibilityResponse[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    override def responseMetadata: SqsResponseMetadata = result.responseMetadata[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    override def toString: String =[0m
[0m[[0m[0mdebug[0m] [0m[0m      s"SqsChangeMessageVisibilityResult(messageAction=$messageAction,result=$result)"[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    override def equals(other: Any): Boolean = other match {[0m
[0m[[0m[0mdebug[0m] [0m[0m      case that: SqsChangeMessageVisibilityResult =>[0m
[0m[[0m[0mdebug[0m] [0m[0m        java.util.Objects.equals(this.messageAction, that.messageAction) &&[0m
[0m[[0m[0mdebug[0m] [0m[0m        java.util.Objects.equals(this.result, that.result)[0m
[0m[[0m[0mdebug[0m] [0m[0m      case _ => false[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    override def hashCode(): Int = java.util.Objects.hash(messageAction, result)[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m/**[0m
[0m[[0m[0mdebug[0m] [0m[0m * Messages returned by a SqsAckFlow.[0m
[0m[[0m[0mdebug[0m] [0m[0m *[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0msealed abstract class SqsAckResultEntry extends SqsResult {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def messageAction: MessageAction[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /** Java API */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def getMessageAction: MessageAction = messageAction[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mobject SqsAckResultEntry {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Delete acknowledgement within a batch[0m
[0m[[0m[0mdebug[0m] [0m[0m   * @param messageAction the delete message action[0m
[0m[[0m[0mdebug[0m] [0m[0m   * @param result the sqs DeleteMessageBatchResultEntry[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  final class SqsDeleteResultEntry(override val messageAction: MessageAction.Delete,[0m
[0m[[0m[0mdebug[0m] [0m[0m                                   override val result: DeleteMessageBatchResultEntry,[0m
[0m[[0m[0mdebug[0m] [0m[0m                                   override val responseMetadata: SqsResponseMetadata)[0m
[0m[[0m[0mdebug[0m] [0m[0m      extends SqsAckResultEntry {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    override type Result = DeleteMessageBatchResultEntry[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    override def toString: String =[0m
[0m[[0m[0mdebug[0m] [0m[0m      s"SqsDeleteResultEntry(messageAction=$messageAction,result=$result)"[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    override def equals(other: Any): Boolean = other match {[0m
[0m[[0m[0mdebug[0m] [0m[0m      case that: SqsDeleteResultEntry =>[0m
[0m[[0m[0mdebug[0m] [0m[0m        java.util.Objects.equals(this.messageAction, that.messageAction) &&[0m
[0m[[0m[0mdebug[0m] [0m[0m        java.util.Objects.equals(this.result, that.result)[0m
[0m[[0m[0mdebug[0m] [0m[0m      case _ => false[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    override def hashCode(): Int = java.util.Objects.hash(messageAction, result)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Ignore acknowledgment within a batch[0m
[0m[[0m[0mdebug[0m] [0m[0m   * No requests are executed on the SQS service for ignore messageAction.[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Its result is [[akka.NotUsed]] and the responseMetadata is always empty[0m
[0m[[0m[0mdebug[0m] [0m[0m   * @param messageAction the ignore message action[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  final class SqsIgnoreResultEntry @InternalApi private[sqs] ([0m
[0m[[0m[0mdebug[0m] [0m[0m      override val messageAction: MessageAction.Ignore[0m
[0m[[0m[0mdebug[0m] [0m[0m  ) extends SqsAckResultEntry {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    override type Result = NotUsed.type[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    override def responseMetadata: SqsResponseMetadata = SqsResult.EmptySqsResponseMetadata[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    override def result: Result = NotUsed[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    override def toString: String =[0m
[0m[[0m[0mdebug[0m] [0m[0m      s"SqsIgnoreResultEntry(messageAction=$messageAction)"[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    override def equals(other: Any): Boolean = other match {[0m
[0m[[0m[0mdebug[0m] [0m[0m      case that: SqsIgnoreResultEntry =>[0m
[0m[[0m[0mdebug[0m] [0m[0m        java.util.Objects.equals(this.messageAction, that.messageAction)[0m
[0m[[0m[0mdebug[0m] [0m[0m      case _ => false[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    override def hashCode(): Int = java.util.Objects.hash(messageAction)[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * ChangeMessageVisibility acknowledgement within a batch[0m
[0m[[0m[0mdebug[0m] [0m[0m   * @param messageAction the change message visibility action[0m
[0m[[0m[0mdebug[0m] [0m[0m   * @param result the sqs ChangeMessageVisibilityBatchResultEntry[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  final class SqsChangeMessageVisibilityResultEntry(override val messageAction: MessageAction.ChangeMessageVisibility,[0m
[0m[[0m[0mdebug[0m] [0m[0m                                                    override val result: ChangeMessageVisibilityBatchResultEntry,[0m
[0m[[0m[0mdebug[0m] [0m[0m                                                    override val responseMetadata: SqsResponseMetadata)[0m
[0m[[0m[0mdebug[0m] [0m[0m      extends SqsAckResultEntry {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    override type Result = ChangeMessageVisibilityBatchResultEntry[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    override def toString: String =[0m
[0m[[0m[0mdebug[0m] [0m[0m      s"SqsChangeMessageVisibilityResultEntry(messageAction=$messageAction,result=$result)"[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    override def equals(other: Any): Boolean = other match {[0m
[0m[[0m[0mdebug[0m] [0m[0m      case that: SqsChangeMessageVisibilityResultEntry =>[0m
[0m[[0m[0mdebug[0m] [0m[0m        java.util.Objects.equals(this.messageAction, that.messageAction) &&[0m
[0m[[0m[0mdebug[0m] [0m[0m        java.util.Objects.equals(this.result, that.result)[0m
[0m[[0m[0mdebug[0m] [0m[0m      case _ => false[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    override def hashCode(): Int = java.util.Objects.hash(messageAction, result)[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/sqs/src/main/scala/akka/stream/alpakka/sqs/SqsAckBatchSettings.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.sqs[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mfinal class SqsAckBatchSettings private (val concurrentRequests: Int) {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  require(concurrentRequests > 0)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def withConcurrentRequests(value: Int): SqsAckBatchSettings = copy(concurrentRequests = value)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private def copy(concurrentRequests: Int = concurrentRequests): SqsAckBatchSettings =[0m
[0m[[0m[0mdebug[0m] [0m[0m    new SqsAckBatchSettings(concurrentRequests = concurrentRequests)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  override def toString =[0m
[0m[[0m[0mdebug[0m] [0m[0m    s"""SqsAckBatchSettings(concurrentRequests=$concurrentRequests)"""[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mobject SqsAckBatchSettings {[0m
[0m[[0m[0mdebug[0m] [0m[0m  val Defaults = new SqsAckBatchSettings([0m
[0m[[0m[0mdebug[0m] [0m[0m    concurrentRequests = 1[0m
[0m[[0m[0mdebug[0m] [0m[0m  )[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /** Scala API */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def apply(): SqsAckBatchSettings = Defaults[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /** Java API */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def create(): SqsAckBatchSettings = Defaults[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/sqs/src/main/scala/akka/stream/alpakka/sqs/javadsl/SqsSource.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.sqs.javadsl[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.NotUsed[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.sqs.SqsSourceSettings[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.javadsl.Source[0m
[0m[[0m[0mdebug[0m] [0m[0mimport software.amazon.awssdk.services.sqs.SqsAsyncClient[0m
[0m[[0m[0mdebug[0m] [0m[0mimport software.amazon.awssdk.services.sqs.model.Message[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m/**[0m
[0m[[0m[0mdebug[0m] [0m[0m * Java API to create SQS sources.[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0mobject SqsSource {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * creates a [[akka.stream.javadsl.Source Source]] for a SQS queue using [[software.amazon.awssdk.services.sqs.SqsAsyncClient SqsAsyncClient]][0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def create(queueUrl: String, settings: SqsSourceSettings, sqs: SqsAsyncClient): Source[Message, NotUsed] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    akka.stream.alpakka.sqs.scaladsl.SqsSource(queueUrl, settings)(sqs).asJava[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/sqs/src/main/scala/akka/stream/alpakka/sqs/javadsl/SqsAckFlow.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.sqs.javadsl[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.NotUsed[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.annotation.ApiMayChange[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.sqs._[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.javadsl.Flow[0m
[0m[[0m[0mdebug[0m] [0m[0mimport software.amazon.awssdk.services.sqs.SqsAsyncClient[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m/**[0m
[0m[[0m[0mdebug[0m] [0m[0m * Java API to create acknowledging SQS flows.[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m@ApiMayChange[0m
[0m[[0m[0mdebug[0m] [0m[0mobject SqsAckFlow {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * creates a [[akka.stream.javadsl.Flow Flow]] for ack a single SQS message at a time using an [[software.amazon.awssdk.services.sqs.SqsAsyncClient]].[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def create(queueUrl: String,[0m
[0m[[0m[0mdebug[0m] [0m[0m             settings: SqsAckSettings,[0m
[0m[[0m[0mdebug[0m] [0m[0m             sqsClient: SqsAsyncClient): Flow[MessageAction, SqsAckResult, NotUsed] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    akka.stream.alpakka.sqs.scaladsl.SqsAckFlow.apply(queueUrl, settings)(sqsClient).asJava[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * creates a [[akka.stream.javadsl.Flow Flow]] for ack grouped SQS messages using an [[software.amazon.awssdk.services.sqs.SqsAsyncClient]].[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def grouped(queueUrl: String,[0m
[0m[[0m[0mdebug[0m] [0m[0m              settings: SqsAckGroupedSettings,[0m
[0m[[0m[0mdebug[0m] [0m[0m              sqsClient: SqsAsyncClient): Flow[MessageAction, SqsAckResultEntry, NotUsed] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    akka.stream.alpakka.sqs.scaladsl.SqsAckFlow.grouped(queueUrl, settings)(sqsClient).asJava[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/sqs/src/main/scala/akka/stream/alpakka/sqs/javadsl/SqsPublishFlow.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.sqs.javadsl[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.NotUsed[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.annotation.ApiMayChange[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.sqs.{[0m
[0m[[0m[0mdebug[0m] [0m[0m  SqsPublishBatchSettings,[0m
[0m[[0m[0mdebug[0m] [0m[0m  SqsPublishGroupedSettings,[0m
[0m[[0m[0mdebug[0m] [0m[0m  SqsPublishResult,[0m
[0m[[0m[0mdebug[0m] [0m[0m  SqsPublishResultEntry,[0m
[0m[[0m[0mdebug[0m] [0m[0m  SqsPublishSettings[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.javadsl.Flow[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.scaladsl.{Flow => SFlow}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport software.amazon.awssdk.services.sqs.SqsAsyncClient[0m
[0m[[0m[0mdebug[0m] [0m[0mimport software.amazon.awssdk.services.sqs.model.SendMessageRequest[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.collection.JavaConverters._[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m/**[0m
[0m[[0m[0mdebug[0m] [0m[0m * Java API to create SQS flows.[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m@ApiMayChange[0m
[0m[[0m[0mdebug[0m] [0m[0mobject SqsPublishFlow {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * creates a [[akka.stream.javadsl.Flow Flow]] to publish messages to a SQS queue using an [[software.amazon.awssdk.services.sqs.SqsAsyncClient AmazonSQSAsync]][0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def create(queueUrl: String,[0m
[0m[[0m[0mdebug[0m] [0m[0m             settings: SqsPublishSettings,[0m
[0m[[0m[0mdebug[0m] [0m[0m             sqsClient: SqsAsyncClient): Flow[SendMessageRequest, SqsPublishResult, NotUsed] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    akka.stream.alpakka.sqs.scaladsl.SqsPublishFlow.apply(queueUrl, settings)(sqsClient).asJava[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * creates a [[akka.stream.javadsl.Flow Flow]] to publish messages to SQS queues based on the message queue url using an [[software.amazon.awssdk.services.sqs.SqsAsyncClient AmazonSQSAsync]][0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def create(settings: SqsPublishSettings,[0m
[0m[[0m[0mdebug[0m] [0m[0m             sqsClient: SqsAsyncClient): Flow[SendMessageRequest, SqsPublishResult, NotUsed] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    akka.stream.alpakka.sqs.scaladsl.SqsPublishFlow.apply(settings)(sqsClient).asJava[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * creates a [[akka.stream.javadsl.Flow Flow]] that groups messages and publish them in batches to a SQS queue using an [[software.amazon.awssdk.services.sqs.SqsAsyncClient AmazonSQSAsync]][0m
[0m[[0m[0mdebug[0m] [0m[0m   * @see https://doc.akka.io/docs/akka/current/stream/operators/Source-or-Flow/groupedWithin.html#groupedwithin[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def grouped([0m
[0m[[0m[0mdebug[0m] [0m[0m      queueUrl: String,[0m
[0m[[0m[0mdebug[0m] [0m[0m      settings: SqsPublishGroupedSettings,[0m
[0m[[0m[0mdebug[0m] [0m[0m      sqsClient: SqsAsyncClient[0m
[0m[[0m[0mdebug[0m] [0m[0m  ): Flow[SendMessageRequest, SqsPublishResultEntry, NotUsed] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    akka.stream.alpakka.sqs.scaladsl.SqsPublishFlow[0m
[0m[[0m[0mdebug[0m] [0m[0m      .grouped(queueUrl, settings)(sqsClient)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .asJava[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * creates a [[akka.stream.javadsl.Flow Flow]] to publish messages in batches to a SQS queue using an [[software.amazon.awssdk.services.sqs.SqsAsyncClient AmazonSQSAsync]][0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def batch([0m
[0m[[0m[0mdebug[0m] [0m[0m      queueUrl: String,[0m
[0m[[0m[0mdebug[0m] [0m[0m      settings: SqsPublishBatchSettings,[0m
[0m[[0m[0mdebug[0m] [0m[0m      sqsClient: SqsAsyncClient[0m
[0m[[0m[0mdebug[0m] [0m[0m  ): Flow[java.lang.Iterable[SendMessageRequest], java.util.List[SqsPublishResultEntry], NotUsed] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    SFlow[java.lang.Iterable[SendMessageRequest]][0m
[0m[[0m[0mdebug[0m] [0m[0m      .map(_.asScala)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .via(akka.stream.alpakka.sqs.scaladsl.SqsPublishFlow.batch(queueUrl, settings)(sqsClient))[0m
[0m[[0m[0mdebug[0m] [0m[0m      .map(_.asJava)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .asJava[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/sqs/src/main/scala/akka/stream/alpakka/sqs/javadsl/SqsPublishSink.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.sqs.javadsl[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.util.concurrent.CompletionStage[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.Done[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.sqs._[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.javadsl.Sink[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.scaladsl.{Flow, Keep}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport software.amazon.awssdk.services.sqs.SqsAsyncClient[0m
[0m[[0m[0mdebug[0m] [0m[0mimport software.amazon.awssdk.services.sqs.model.SendMessageRequest[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.collection.JavaConverters._[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.compat.java8.FutureConverters.FutureOps[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m/**[0m
[0m[[0m[0mdebug[0m] [0m[0m * Java API to create SQS Sinks.[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0mobject SqsPublishSink {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * creates a [[akka.stream.javadsl.Sink Sink]] that accepts strings and publishes them as messages to a SQS queue using an [[software.amazon.awssdk.services.sqs.SqsAsyncClient SqsAsyncClient]][0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def create(queueUrl: String,[0m
[0m[[0m[0mdebug[0m] [0m[0m             settings: SqsPublishSettings,[0m
[0m[[0m[0mdebug[0m] [0m[0m             sqsClient: SqsAsyncClient): Sink[String, CompletionStage[Done]] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    scaladsl.SqsPublishSink.apply(queueUrl, settings)(sqsClient).mapMaterializedValue(_.toJava).asJava[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * creates a [[akka.stream.javadsl.Sink Sink]] to publish messages to a SQS queue using an [[software.amazon.awssdk.services.sqs.SqsAsyncClient SqsAsyncClient]][0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def messageSink(queueUrl: String,[0m
[0m[[0m[0mdebug[0m] [0m[0m                  settings: SqsPublishSettings,[0m
[0m[[0m[0mdebug[0m] [0m[0m                  sqsClient: SqsAsyncClient): Sink[SendMessageRequest, CompletionStage[Done]] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    scaladsl.SqsPublishSink[0m
[0m[[0m[0mdebug[0m] [0m[0m      .messageSink(queueUrl, settings)(sqsClient)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .mapMaterializedValue(_.toJava)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .asJava[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * creates a [[akka.stream.javadsl.Sink Sink]] to publish messages to SQS queues based on the message queue url using an [[software.amazon.awssdk.services.sqs.SqsAsyncClient SqsAsyncClient]][0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def messageSink(settings: SqsPublishSettings,[0m
[0m[[0m[0mdebug[0m] [0m[0m                  sqsClient: SqsAsyncClient): Sink[SendMessageRequest, CompletionStage[Done]] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    scaladsl.SqsPublishSink[0m
[0m[[0m[0mdebug[0m] [0m[0m      .messageSink(settings)(sqsClient)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .mapMaterializedValue(_.toJava)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .asJava[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * creates a [[akka.stream.javadsl.Sink Sink]] that groups strings and publishes them as messages in batches to a SQS queue using an [[software.amazon.awssdk.services.sqs.SqsAsyncClient SqsAsyncClient]][0m
[0m[[0m[0mdebug[0m] [0m[0m   * @see https://doc.akka.io/docs/akka/current/stream/operators/Source-or-Flow/groupedWithin.html#groupedwithin[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def grouped(queueUrl: String,[0m
[0m[[0m[0mdebug[0m] [0m[0m              settings: SqsPublishGroupedSettings,[0m
[0m[[0m[0mdebug[0m] [0m[0m              sqsClient: SqsAsyncClient): Sink[String, CompletionStage[Done]] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    scaladsl.SqsPublishSink.grouped(queueUrl, settings)(sqsClient).mapMaterializedValue(_.toJava).asJava[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * creates a [[akka.stream.javadsl.Sink Sink]] that groups messages and publishes them in batches to a SQS queue using an [[software.amazon.awssdk.services.sqs.SqsAsyncClient SqsAsyncClient]][0m
[0m[[0m[0mdebug[0m] [0m[0m   * @see https://doc.akka.io/docs/akka/current/stream/operators/Source-or-Flow/groupedWithin.html#groupedwithin[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def groupedMessageSink(queueUrl: String,[0m
[0m[[0m[0mdebug[0m] [0m[0m                         settings: SqsPublishGroupedSettings,[0m
[0m[[0m[0mdebug[0m] [0m[0m                         sqsClient: SqsAsyncClient): Sink[SendMessageRequest, CompletionStage[Done]] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    scaladsl.SqsPublishSink[0m
[0m[[0m[0mdebug[0m] [0m[0m      .groupedMessageSink(queueUrl, settings)(sqsClient)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .mapMaterializedValue(_.toJava)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .asJava[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * creates a [[akka.stream.javadsl.Sink Sink]] that accepts an iterable of strings and publish them as messages in batches to a SQS queue using an [[software.amazon.awssdk.services.sqs.SqsAsyncClient SqsAsyncClient]][0m
[0m[[0m[0mdebug[0m] [0m[0m   * @see https://doc.akka.io/docs/akka/current/stream/operators/Source-or-Flow/groupedWithin.html#groupedwithin[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def batch(queueUrl: String,[0m
[0m[[0m[0mdebug[0m] [0m[0m            settings: SqsPublishBatchSettings,[0m
[0m[[0m[0mdebug[0m] [0m[0m            sqsClient: SqsAsyncClient): Sink[java.lang.Iterable[String], CompletionStage[Done]] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    Flow[java.lang.Iterable[String]][0m
[0m[[0m[0mdebug[0m] [0m[0m      .map(_.asScala)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .toMat(scaladsl.SqsPublishSink.batch(queueUrl, settings)(sqsClient))(Keep.right)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .mapMaterializedValue(_.toJava)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .asJava[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * creates a [[akka.stream.javadsl.Sink Sink]] to publish messages in batches to a SQS queue using an [[software.amazon.awssdk.services.sqs.SqsAsyncClient SqsAsyncClient]][0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def batchedMessageSink([0m
[0m[[0m[0mdebug[0m] [0m[0m      queueUrl: String,[0m
[0m[[0m[0mdebug[0m] [0m[0m      settings: SqsPublishBatchSettings,[0m
[0m[[0m[0mdebug[0m] [0m[0m      sqsClient: SqsAsyncClient[0m
[0m[[0m[0mdebug[0m] [0m[0m  ): Sink[java.lang.Iterable[SendMessageRequest], CompletionStage[Done]] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    Flow[java.lang.Iterable[SendMessageRequest]][0m
[0m[[0m[0mdebug[0m] [0m[0m      .map(_.asScala)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .toMat(scaladsl.SqsPublishSink.batchedMessageSink(queueUrl, settings)(sqsClient))(Keep.right)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .mapMaterializedValue(_.toJava)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .asJava[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/sqs/src/main/scala/akka/stream/alpakka/sqs/javadsl/SqsAckSink.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.sqs.javadsl[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.util.concurrent.CompletionStage[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.Done[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.sqs.{MessageAction, SqsAckGroupedSettings, SqsAckSettings}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.javadsl.Sink[0m
[0m[[0m[0mdebug[0m] [0m[0mimport software.amazon.awssdk.services.sqs.SqsAsyncClient[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.compat.java8.FutureConverters.FutureOps[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m/**[0m
[0m[[0m[0mdebug[0m] [0m[0m * Java API to create acknowledging sinks.[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0mobject SqsAckSink {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * creates a [[akka.stream.javadsl.Sink Sink]] for ack a single SQS message at a time using an [[software.amazon.awssdk.services.sqs.SqsAsyncClient]].[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def create(queueUrl: String,[0m
[0m[[0m[0mdebug[0m] [0m[0m             settings: SqsAckSettings,[0m
[0m[[0m[0mdebug[0m] [0m[0m             sqsClient: SqsAsyncClient): Sink[MessageAction, CompletionStage[Done]] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    akka.stream.alpakka.sqs.scaladsl.SqsAckSink[0m
[0m[[0m[0mdebug[0m] [0m[0m      .apply(queueUrl, settings)(sqsClient)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .mapMaterializedValue(_.toJava)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .asJava[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * creates a [[akka.stream.javadsl.Sink Sink]] for ack grouped SQS messages using an [[software.amazon.awssdk.services.sqs.SqsAsyncClient]].[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def createGrouped(queueUrl: String,[0m
[0m[[0m[0mdebug[0m] [0m[0m                    settings: SqsAckGroupedSettings,[0m
[0m[[0m[0mdebug[0m] [0m[0m                    sqsClient: SqsAsyncClient): Sink[MessageAction, CompletionStage[Done]] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    akka.stream.alpakka.sqs.scaladsl.SqsAckSink[0m
[0m[[0m[0mdebug[0m] [0m[0m      .grouped(queueUrl, settings)(sqsClient)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .mapMaterializedValue(_.toJava)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .asJava[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/sqs/src/main/scala/akka/stream/alpakka/sqs/testkit/MessageFactory.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.sqs.testkit[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.sqs.SqsAckResult.{SqsChangeMessageVisibilityResult, SqsDeleteResult, SqsIgnoreResult}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.sqs.SqsAckResultEntry.{[0m
[0m[[0m[0mdebug[0m] [0m[0m  SqsChangeMessageVisibilityResultEntry,[0m
[0m[[0m[0mdebug[0m] [0m[0m  SqsDeleteResultEntry,[0m
[0m[[0m[0mdebug[0m] [0m[0m  SqsIgnoreResultEntry[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.sqs.{MessageAction, SqsPublishResult, SqsPublishResultEntry, SqsResult}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport software.amazon.awssdk.services.sqs.model._[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m/**[0m
[0m[[0m[0mdebug[0m] [0m[0m * Message factory class for testing purposes[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0mobject MessageFactory {[0m
[0m[[0m[0mdebug[0m] [0m[0m  def createSqsPublishResult(request: SendMessageRequest, response: SendMessageResponse): SqsPublishResult =[0m
[0m[[0m[0mdebug[0m] [0m[0m    new SqsPublishResult(request, response)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def createSqsPublishResultEntry([0m
[0m[[0m[0mdebug[0m] [0m[0m      request: SendMessageRequest,[0m
[0m[[0m[0mdebug[0m] [0m[0m      result: SendMessageBatchResultEntry,[0m
[0m[[0m[0mdebug[0m] [0m[0m      responseMetadata: SqsResponseMetadata = SqsResult.EmptySqsResponseMetadata[0m
[0m[[0m[0mdebug[0m] [0m[0m  ): SqsPublishResultEntry =[0m
[0m[[0m[0mdebug[0m] [0m[0m    new SqsPublishResultEntry(request, result, responseMetadata)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def createSqsDeleteResult(messageAction: MessageAction.Delete, response: DeleteMessageResponse): SqsDeleteResult =[0m
[0m[[0m[0mdebug[0m] [0m[0m    new SqsDeleteResult(messageAction, response)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def createSqsIgnoreResult(messageAction: MessageAction.Ignore): SqsIgnoreResult =[0m
[0m[[0m[0mdebug[0m] [0m[0m    new SqsIgnoreResult(messageAction)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def createSqsChangeMessageVisibilityResult([0m
[0m[[0m[0mdebug[0m] [0m[0m      messageAction: MessageAction.ChangeMessageVisibility,[0m
[0m[[0m[0mdebug[0m] [0m[0m      response: ChangeMessageVisibilityResponse[0m
[0m[[0m[0mdebug[0m] [0m[0m  ): SqsChangeMessageVisibilityResult =[0m
[0m[[0m[0mdebug[0m] [0m[0m    new SqsChangeMessageVisibilityResult(messageAction, response)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def createSqsDeleteResultEntry([0m
[0m[[0m[0mdebug[0m] [0m[0m      messageAction: MessageAction.Delete,[0m
[0m[[0m[0mdebug[0m] [0m[0m      result: DeleteMessageBatchResultEntry,[0m
[0m[[0m[0mdebug[0m] [0m[0m      responseMetadata: SqsResponseMetadata = SqsResult.EmptySqsResponseMetadata[0m
[0m[[0m[0mdebug[0m] [0m[0m  ): SqsDeleteResultEntry =[0m
[0m[[0m[0mdebug[0m] [0m[0m    new SqsDeleteResultEntry(messageAction, result, responseMetadata)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def createSqsIgnoreResultEntry(messageAction: MessageAction.Ignore): SqsIgnoreResultEntry =[0m
[0m[[0m[0mdebug[0m] [0m[0m    new SqsIgnoreResultEntry(messageAction)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def createSqsChangeMessageVisibilityResultEntry([0m
[0m[[0m[0mdebug[0m] [0m[0m      messageAction: MessageAction.ChangeMessageVisibility,[0m
[0m[[0m[0mdebug[0m] [0m[0m      result: ChangeMessageVisibilityBatchResultEntry,[0m
[0m[[0m[0mdebug[0m] [0m[0m      responseMetadata: SqsResponseMetadata = SqsResult.EmptySqsResponseMetadata[0m
[0m[[0m[0mdebug[0m] [0m[0m  ): SqsChangeMessageVisibilityResultEntry =[0m
[0m[[0m[0mdebug[0m] [0m[0m    new SqsChangeMessageVisibilityResultEntry(messageAction, result, responseMetadata)[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/sqs/src/main/scala/akka/stream/alpakka/sqs/SqsBatchException.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.sqs[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.annotation.InternalApi[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mfinal class SqsBatchException @InternalApi private[sqs] (val batchSize: Int, message: String)[0m
[0m[[0m[0mdebug[0m] [0m[0m    extends Exception(message) {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  @InternalApi[0m
[0m[[0m[0mdebug[0m] [0m[0m  private[sqs] def this(batchSize: Int, cause: Throwable) {[0m
[0m[[0m[0mdebug[0m] [0m[0m    this(batchSize, cause.getMessage)[0m
[0m[[0m[0mdebug[0m] [0m[0m    initCause(cause)[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  @InternalApi[0m
[0m[[0m[0mdebug[0m] [0m[0m  private[sqs] def this(batchSize: Int, message: String, cause: Throwable) {[0m
[0m[[0m[0mdebug[0m] [0m[0m    this(batchSize, message)[0m
[0m[[0m[0mdebug[0m] [0m[0m    initCause(cause)[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /** Java API */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def getBatchSize: Int = batchSize[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/sqs/src/main/scala/akka/stream/alpakka/sqs/SqsAckGroupedSettings.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.sqs[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.concurrent.duration.{FiniteDuration, TimeUnit}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.concurrent.duration._[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.util.JavaDurationConverters._[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mfinal class SqsAckGroupedSettings private (val maxBatchSize: Int,[0m
[0m[[0m[0mdebug[0m] [0m[0m                                           val maxBatchWait: scala.concurrent.duration.FiniteDuration,[0m
[0m[[0m[0mdebug[0m] [0m[0m                                           val concurrentRequests: Int) {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  require(concurrentRequests > 0)[0m
[0m[[0m[0mdebug[0m] [0m[0m  require([0m
[0m[[0m[0mdebug[0m] [0m[0m    maxBatchSize > 0 && maxBatchSize <= 10,[0m
[0m[[0m[0mdebug[0m] [0m[0m    s"Invalid value for maxBatchSize: $maxBatchSize. It should be 0 < maxBatchSize < 10, due to the Amazon SQS requirements."[0m
[0m[[0m[0mdebug[0m] [0m[0m  )[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def withMaxBatchSize(value: Int): SqsAckGroupedSettings = copy(maxBatchSize = value)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /** Scala API */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def withMaxBatchWait(value: scala.concurrent.duration.FiniteDuration): SqsAckGroupedSettings =[0m
[0m[[0m[0mdebug[0m] [0m[0m    copy(maxBatchWait = value)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /** Java API */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def withMaxBatchWait(value: java.time.Duration): SqsAckGroupedSettings =[0m
[0m[[0m[0mdebug[0m] [0m[0m    withMaxBatchWait([0m
[0m[[0m[0mdebug[0m] [0m[0m      scala.concurrent.duration.FiniteDuration(value.toMillis, java.util.concurrent.TimeUnit.MILLISECONDS)[0m
[0m[[0m[0mdebug[0m] [0m[0m    )[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Java API[0m
[0m[[0m[0mdebug[0m] [0m[0m   *[0m
[0m[[0m[0mdebug[0m] [0m[0m   * @deprecated use withMaxBatchWait(java.time.Duration) instead[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  @deprecated("use withMaxBatchWait(java.time.Duration) instead", "1.0-M1")[0m
[0m[[0m[0mdebug[0m] [0m[0m  def withMaxBatchWait(length: Long, unit: TimeUnit): SqsAckGroupedSettings =[0m
[0m[[0m[0mdebug[0m] [0m[0m    this.copy(maxBatchWait = FiniteDuration(length, unit))[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def withConcurrentRequests(value: Int): SqsAckGroupedSettings = copy(concurrentRequests = value)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private def copy(maxBatchSize: Int = maxBatchSize,[0m
[0m[[0m[0mdebug[0m] [0m[0m                   maxBatchWait: scala.concurrent.duration.FiniteDuration = maxBatchWait,[0m
[0m[[0m[0mdebug[0m] [0m[0m                   concurrentRequests: Int = concurrentRequests): SqsAckGroupedSettings =[0m
[0m[[0m[0mdebug[0m] [0m[0m    new SqsAckGroupedSettings(maxBatchSize = maxBatchSize,[0m
[0m[[0m[0mdebug[0m] [0m[0m                              maxBatchWait = maxBatchWait,[0m
[0m[[0m[0mdebug[0m] [0m[0m                              concurrentRequests = concurrentRequests)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  override def toString =[0m
[0m[[0m[0mdebug[0m] [0m[0m    s"""SqsAckGroupedSettings(maxBatchSize=$maxBatchSize,maxBatchWait=$maxBatchWait,concurrentRequests=$concurrentRequests)"""[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mobject SqsAckGroupedSettings {[0m
[0m[[0m[0mdebug[0m] [0m[0m  val Defaults = new SqsAckGroupedSettings([0m
[0m[[0m[0mdebug[0m] [0m[0m    maxBatchSize = 10,[0m
[0m[[0m[0mdebug[0m] [0m[0m    maxBatchWait = 500.millis,[0m
[0m[[0m[0mdebug[0m] [0m[0m    concurrentRequests = 1[0m
[0m[[0m[0mdebug[0m] [0m[0m  )[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /** Scala API */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def apply(): SqsAckGroupedSettings = Defaults[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /** Java API */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def create(): SqsAckGroupedSettings = Defaults[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /** Scala API */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def apply([0m
[0m[[0m[0mdebug[0m] [0m[0m      maxBatchSize: Int,[0m
[0m[[0m[0mdebug[0m] [0m[0m      maxBatchWait: scala.concurrent.duration.FiniteDuration,[0m
[0m[[0m[0mdebug[0m] [0m[0m      concurrentRequests: Int[0m
[0m[[0m[0mdebug[0m] [0m[0m  ): SqsAckGroupedSettings = new SqsAckGroupedSettings([0m
[0m[[0m[0mdebug[0m] [0m[0m    maxBatchSize,[0m
[0m[[0m[0mdebug[0m] [0m[0m    maxBatchWait,[0m
[0m[[0m[0mdebug[0m] [0m[0m    concurrentRequests[0m
[0m[[0m[0mdebug[0m] [0m[0m  )[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /** Java API */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def create([0m
[0m[[0m[0mdebug[0m] [0m[0m      maxBatchSize: Int,[0m
[0m[[0m[0mdebug[0m] [0m[0m      maxBatchWait: java.time.Duration,[0m
[0m[[0m[0mdebug[0m] [0m[0m      concurrentRequests: Int[0m
[0m[[0m[0mdebug[0m] [0m[0m  ): SqsAckGroupedSettings = new SqsAckGroupedSettings([0m
[0m[[0m[0mdebug[0m] [0m[0m    maxBatchSize,[0m
[0m[[0m[0mdebug[0m] [0m[0m    maxBatchWait.asScala,[0m
[0m[[0m[0mdebug[0m] [0m[0m    concurrentRequests[0m
[0m[[0m[0mdebug[0m] [0m[0m  )[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/sqs/src/main/scala/akka/stream/alpakka/sqs/SqsPublishSettings.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.sqs[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mfinal class SqsPublishSettings private (val maxInFlight: Int) {[0m
[0m[[0m[0mdebug[0m] [0m[0m  require(maxInFlight > 0)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def withMaxInFlight(maxInFlight: Int): SqsPublishSettings = copy(maxInFlight = maxInFlight)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private def copy(maxInFlight: Int = maxInFlight) = new SqsPublishSettings(maxInFlight)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  override def toString: String =[0m
[0m[[0m[0mdebug[0m] [0m[0m    "SqsPublishSettings(" +[0m
[0m[[0m[0mdebug[0m] [0m[0m    s"maxInFlight=$maxInFlight" +[0m
[0m[[0m[0mdebug[0m] [0m[0m    ")"[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mobject SqsPublishSettings {[0m
[0m[[0m[0mdebug[0m] [0m[0m  val Defaults = new SqsPublishSettings(maxInFlight = 10)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Scala API[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def apply(): SqsPublishSettings = Defaults[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Java API[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def create(): SqsPublishSettings = Defaults[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/sqs/src/main/scala/akka/stream/alpakka/sqs/SqsAckSettings.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.sqs[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mfinal class SqsAckSettings private (val maxInFlight: Int) {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  require(maxInFlight > 0)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def withMaxInFlight(value: Int): SqsAckSettings = copy(maxInFlight = value)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private def copy(maxInFlight: Int = maxInFlight): SqsAckSettings =[0m
[0m[[0m[0mdebug[0m] [0m[0m    new SqsAckSettings(maxInFlight = maxInFlight)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  override def toString =[0m
[0m[[0m[0mdebug[0m] [0m[0m    s"""SqsAckSinkSettings(maxInFlight=$maxInFlight)"""[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mobject SqsAckSettings {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  val Defaults = new SqsAckSettings(maxInFlight = 10)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /** Scala API */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def apply(): SqsAckSettings = Defaults[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /** Java API */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def create(): SqsAckSettings = Defaults[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /** Scala API */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def apply([0m
[0m[[0m[0mdebug[0m] [0m[0m      maxInFlight: Int[0m
[0m[[0m[0mdebug[0m] [0m[0m  ): SqsAckSettings = new SqsAckSettings([0m
[0m[[0m[0mdebug[0m] [0m[0m    maxInFlight[0m
[0m[[0m[0mdebug[0m] [0m[0m  )[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /** Java API */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def create([0m
[0m[[0m[0mdebug[0m] [0m[0m      maxInFlight: Int[0m
[0m[[0m[0mdebug[0m] [0m[0m  ): SqsAckSettings = new SqsAckSettings([0m
[0m[[0m[0mdebug[0m] [0m[0m    maxInFlight[0m
[0m[[0m[0mdebug[0m] [0m[0m  )[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/sqs/src/main/scala/akka/stream/alpakka/sqs/SqsPublishGroupedSettings.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.sqs[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.util.concurrent.TimeUnit[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.concurrent.duration.FiniteDuration[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.concurrent.duration._[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mfinal class SqsPublishGroupedSettings private (val maxBatchSize: Int,[0m
[0m[[0m[0mdebug[0m] [0m[0m                                               val maxBatchWait: scala.concurrent.duration.FiniteDuration,[0m
[0m[[0m[0mdebug[0m] [0m[0m                                               val concurrentRequests: Int) {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  require([0m
[0m[[0m[0mdebug[0m] [0m[0m    maxBatchSize > 0 && maxBatchSize <= 10,[0m
[0m[[0m[0mdebug[0m] [0m[0m    s"Invalid value for maxBatchSize: $maxBatchSize. It should be 0 < maxBatchSize < 10, due to the Amazon SQS requirements."[0m
[0m[[0m[0mdebug[0m] [0m[0m  )[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def withMaxBatchSize(value: Int): SqsPublishGroupedSettings = copy(maxBatchSize = value)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /** Scala API */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def withMaxBatchWait(value: scala.concurrent.duration.FiniteDuration): SqsPublishGroupedSettings =[0m
[0m[[0m[0mdebug[0m] [0m[0m    copy(maxBatchWait = value)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /** Java API */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def withMaxBatchWait(value: java.time.Duration): SqsPublishGroupedSettings =[0m
[0m[[0m[0mdebug[0m] [0m[0m    withMaxBatchWait([0m
[0m[[0m[0mdebug[0m] [0m[0m      scala.concurrent.duration.FiniteDuration(value.toMillis, java.util.concurrent.TimeUnit.MILLISECONDS)[0m
[0m[[0m[0mdebug[0m] [0m[0m    )[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Java API[0m
[0m[[0m[0mdebug[0m] [0m[0m   *[0m
[0m[[0m[0mdebug[0m] [0m[0m   * @deprecated use withMaxBatchWait(java.time.Duration) instead[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  @deprecated("use withMaxBatchWait(java.time.Duration) instead", "1.0-M1")[0m
[0m[[0m[0mdebug[0m] [0m[0m  def withMaxBatchWait(length: Long, unit: TimeUnit): SqsPublishGroupedSettings =[0m
[0m[[0m[0mdebug[0m] [0m[0m    copy(maxBatchWait = FiniteDuration(length, unit))[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def withConcurrentRequests(value: Int): SqsPublishGroupedSettings = copy(concurrentRequests = value)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private def copy(maxBatchSize: Int = maxBatchSize,[0m
[0m[[0m[0mdebug[0m] [0m[0m                   maxBatchWait: scala.concurrent.duration.FiniteDuration = maxBatchWait,[0m
[0m[[0m[0mdebug[0m] [0m[0m                   concurrentRequests: Int = concurrentRequests): SqsPublishGroupedSettings =[0m
[0m[[0m[0mdebug[0m] [0m[0m    new SqsPublishGroupedSettings(maxBatchSize = maxBatchSize,[0m
[0m[[0m[0mdebug[0m] [0m[0m                                  maxBatchWait = maxBatchWait,[0m
[0m[[0m[0mdebug[0m] [0m[0m                                  concurrentRequests = concurrentRequests)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  override def toString =[0m
[0m[[0m[0mdebug[0m] [0m[0m    s"""SqsPublishGroupedSettings(maxBatchSize=$maxBatchSize,maxBatchWait=$maxBatchWait,concurrentRequests=$concurrentRequests)"""[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mobject SqsPublishGroupedSettings {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  val Defaults = new SqsPublishGroupedSettings([0m
[0m[[0m[0mdebug[0m] [0m[0m    maxBatchSize = 10,[0m
[0m[[0m[0mdebug[0m] [0m[0m    maxBatchWait = 500.millis,[0m
[0m[[0m[0mdebug[0m] [0m[0m    concurrentRequests = 1[0m
[0m[[0m[0mdebug[0m] [0m[0m  )[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /** Scala API */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def apply(): SqsPublishGroupedSettings = Defaults[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /** Java API */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def create(): SqsPublishGroupedSettings = Defaults[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/sqs/src/main/scala/akka/stream/alpakka/sqs/scaladsl/SqsSource.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.sqs.scaladsl[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka._[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream._[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.sqs.SqsSourceSettings[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.scaladsl.Source[0m
[0m[[0m[0mdebug[0m] [0m[0mimport software.amazon.awssdk.services.sqs.SqsAsyncClient[0m
[0m[[0m[0mdebug[0m] [0m[0mimport software.amazon.awssdk.services.sqs.model.{Message, QueueAttributeName, ReceiveMessageRequest}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.collection.JavaConverters._[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.compat.java8.FutureConverters._[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m/**[0m
[0m[[0m[0mdebug[0m] [0m[0m * Scala API to create SQS sources.[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0mobject SqsSource {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * creates a [[akka.stream.scaladsl.Source Source]] for a SQS queue using [[software.amazon.awssdk.services.sqs.SqsAsyncClient SqsAsyncClient]][0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def apply([0m
[0m[[0m[0mdebug[0m] [0m[0m      queueUrl: String,[0m
[0m[[0m[0mdebug[0m] [0m[0m      settings: SqsSourceSettings = SqsSourceSettings.Defaults[0m
[0m[[0m[0mdebug[0m] [0m[0m  )(implicit sqsClient: SqsAsyncClient): Source[Message, NotUsed] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    Source[0m
[0m[[0m[0mdebug[0m] [0m[0m      .repeat {[0m
[0m[[0m[0mdebug[0m] [0m[0m        val requestBuilder =[0m
[0m[[0m[0mdebug[0m] [0m[0m          ReceiveMessageRequest[0m
[0m[[0m[0mdebug[0m] [0m[0m            .builder()[0m
[0m[[0m[0mdebug[0m] [0m[0m            .queueUrl(queueUrl)[0m
[0m[[0m[0mdebug[0m] [0m[0m            .attributeNames(settings.attributeNames.map(_.name).map(QueueAttributeName.fromValue).asJava)[0m
[0m[[0m[0mdebug[0m] [0m[0m            .messageAttributeNames(settings.messageAttributeNames.map(_.name).asJava)[0m
[0m[[0m[0mdebug[0m] [0m[0m            .maxNumberOfMessages(settings.maxBatchSize)[0m
[0m[[0m[0mdebug[0m] [0m[0m            .waitTimeSeconds(settings.waitTimeSeconds)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m        settings.visibilityTimeout match {[0m
[0m[[0m[0mdebug[0m] [0m[0m          case None => requestBuilder.build()[0m
[0m[[0m[0mdebug[0m] [0m[0m          case Some(t) => requestBuilder.visibilityTimeout(t.toSeconds.toInt).build()[0m
[0m[[0m[0mdebug[0m] [0m[0m        }[0m
[0m[[0m[0mdebug[0m] [0m[0m      }[0m
[0m[[0m[0mdebug[0m] [0m[0m      .mapAsync(settings.parallelRequests)(sqsClient.receiveMessage(_).toScala)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .map(_.messages().asScala.toList)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .takeWhile(messages => !settings.closeOnEmptyReceive || messages.nonEmpty)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .mapConcat(identity)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .buffer(settings.maxBufferSize, OverflowStrategy.backpressure)[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/sqs/src/main/scala/akka/stream/alpakka/sqs/scaladsl/SqsAckFlow.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.sqs.scaladsl[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.util.concurrent.CompletionException[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.NotUsed[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.annotation.ApiMayChange[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.dispatch.ExecutionContexts.sameThreadExecutionContext[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.FlowShape[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.sqs.MessageAction._[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.sqs.SqsAckResult._[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.sqs.SqsAckResultEntry._[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.sqs._[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.scaladsl.{Flow, GraphDSL, Merge, Partition}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport software.amazon.awssdk.services.sqs.SqsAsyncClient[0m
[0m[[0m[0mdebug[0m] [0m[0mimport software.amazon.awssdk.services.sqs.model._[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.collection.JavaConverters._[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.collection.immutable[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.compat.java8.FutureConverters._[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.concurrent.Future[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m/**[0m
[0m[[0m[0mdebug[0m] [0m[0m * Scala API to create acknowledging SQS flows.[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m@ApiMayChange[0m
[0m[[0m[0mdebug[0m] [0m[0mobject SqsAckFlow {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * creates a [[akka.stream.scaladsl.Flow Flow]] for ack a single SQS message at a time using an [[software.amazon.awssdk.services.sqs.SqsAsyncClient]].[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def apply(queueUrl: String, settings: SqsAckSettings = SqsAckSettings.Defaults)([0m
[0m[[0m[0mdebug[0m] [0m[0m      implicit sqsClient: SqsAsyncClient[0m
[0m[[0m[0mdebug[0m] [0m[0m  ): Flow[MessageAction, SqsAckResult, NotUsed] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    Flow[MessageAction][0m
[0m[[0m[0mdebug[0m] [0m[0m      .mapAsync(settings.maxInFlight) {[0m
[0m[[0m[0mdebug[0m] [0m[0m        case messageAction: MessageAction.Delete =>[0m
[0m[[0m[0mdebug[0m] [0m[0m          val request =[0m
[0m[[0m[0mdebug[0m] [0m[0m            DeleteMessageRequest[0m
[0m[[0m[0mdebug[0m] [0m[0m              .builder()[0m
[0m[[0m[0mdebug[0m] [0m[0m              .queueUrl(queueUrl)[0m
[0m[[0m[0mdebug[0m] [0m[0m              .receiptHandle(messageAction.message.receiptHandle())[0m
[0m[[0m[0mdebug[0m] [0m[0m              .build()[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m          sqsClient[0m
[0m[[0m[0mdebug[0m] [0m[0m            .deleteMessage(request)[0m
[0m[[0m[0mdebug[0m] [0m[0m            .toScala[0m
[0m[[0m[0mdebug[0m] [0m[0m            .map(resp => new SqsDeleteResult(messageAction, resp))(sameThreadExecutionContext)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m        case messageAction: MessageAction.ChangeMessageVisibility =>[0m
[0m[[0m[0mdebug[0m] [0m[0m          val request =[0m
[0m[[0m[0mdebug[0m] [0m[0m            ChangeMessageVisibilityRequest[0m
[0m[[0m[0mdebug[0m] [0m[0m              .builder()[0m
[0m[[0m[0mdebug[0m] [0m[0m              .queueUrl(queueUrl)[0m
[0m[[0m[0mdebug[0m] [0m[0m              .receiptHandle(messageAction.message.receiptHandle())[0m
[0m[[0m[0mdebug[0m] [0m[0m              .visibilityTimeout(messageAction.visibilityTimeout)[0m
[0m[[0m[0mdebug[0m] [0m[0m              .build()[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m          sqsClient[0m
[0m[[0m[0mdebug[0m] [0m[0m            .changeMessageVisibility(request)[0m
[0m[[0m[0mdebug[0m] [0m[0m            .toScala[0m
[0m[[0m[0mdebug[0m] [0m[0m            .map(resp => new SqsChangeMessageVisibilityResult(messageAction, resp))(sameThreadExecutionContext)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m        case messageAction: MessageAction.Ignore =>[0m
[0m[[0m[0mdebug[0m] [0m[0m          Future.successful(new SqsIgnoreResult(messageAction))[0m
[0m[[0m[0mdebug[0m] [0m[0m      }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * creates a [[akka.stream.scaladsl.Flow Flow]] for ack grouped SQS messages using an [[software.amazon.awssdk.services.sqs.SqsAsyncClient]].[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def grouped(queueUrl: String, settings: SqsAckGroupedSettings = SqsAckGroupedSettings.Defaults)([0m
[0m[[0m[0mdebug[0m] [0m[0m      implicit sqsClient: SqsAsyncClient[0m
[0m[[0m[0mdebug[0m] [0m[0m  ): Flow[MessageAction, SqsAckResultEntry, NotUsed] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    Flow.fromGraph([0m
[0m[[0m[0mdebug[0m] [0m[0m      GraphDSL.create() { implicit builder =>[0m
[0m[[0m[0mdebug[0m] [0m[0m        import GraphDSL.Implicits._[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m        val p = builder.add(Partition[MessageAction](3, {[0m
[0m[[0m[0mdebug[0m] [0m[0m          case _: Delete => 0[0m
[0m[[0m[0mdebug[0m] [0m[0m          case _: ChangeMessageVisibility => 1[0m
[0m[[0m[0mdebug[0m] [0m[0m          case _: Ignore => 2[0m
[0m[[0m[0mdebug[0m] [0m[0m        }))[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m        val merge = builder.add(Merge[SqsAckResultEntry](3))[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m        val mapDelete = Flow[MessageAction].collectType[Delete][0m
[0m[[0m[0mdebug[0m] [0m[0m        val mapChangeMessageVisibility = Flow[MessageAction].collectType[ChangeMessageVisibility][0m
[0m[[0m[0mdebug[0m] [0m[0m        val mapChangeIgnore = Flow[MessageAction].collectType[Ignore][0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m        p.out(0) ~> mapDelete ~> groupedDelete(queueUrl, settings) ~> merge[0m
[0m[[0m[0mdebug[0m] [0m[0m        p.out(1) ~> mapChangeMessageVisibility ~> groupedChangeMessageVisibility(queueUrl, settings) ~> merge[0m
[0m[[0m[0mdebug[0m] [0m[0m        p.out(2) ~> mapChangeIgnore ~> Flow[Ignore].map(new SqsIgnoreResultEntry(_)) ~> merge[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m        FlowShape(p.in, merge.out)[0m
[0m[[0m[0mdebug[0m] [0m[0m      }[0m
[0m[[0m[0mdebug[0m] [0m[0m    )[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private def groupedDelete(queueUrl: String, settings: SqsAckGroupedSettings)([0m
[0m[[0m[0mdebug[0m] [0m[0m      implicit sqsClient: SqsAsyncClient[0m
[0m[[0m[0mdebug[0m] [0m[0m  ): Flow[MessageAction.Delete, SqsDeleteResultEntry, NotUsed] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    Flow[MessageAction.Delete][0m
[0m[[0m[0mdebug[0m] [0m[0m      .groupedWithin(settings.maxBatchSize, settings.maxBatchWait)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .map { actions =>[0m
[0m[[0m[0mdebug[0m] [0m[0m        val entries = actions.zipWithIndex.map {[0m
[0m[[0m[0mdebug[0m] [0m[0m          case (a, i) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m            DeleteMessageBatchRequestEntry[0m
[0m[[0m[0mdebug[0m] [0m[0m              .builder()[0m
[0m[[0m[0mdebug[0m] [0m[0m              .id(i.toString)[0m
[0m[[0m[0mdebug[0m] [0m[0m              .receiptHandle(a.message.receiptHandle())[0m
[0m[[0m[0mdebug[0m] [0m[0m              .build()[0m
[0m[[0m[0mdebug[0m] [0m[0m        }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m        actions -> DeleteMessageBatchRequest[0m
[0m[[0m[0mdebug[0m] [0m[0m          .builder()[0m
[0m[[0m[0mdebug[0m] [0m[0m          .queueUrl(queueUrl)[0m
[0m[[0m[0mdebug[0m] [0m[0m          .entries(entries.asJava)[0m
[0m[[0m[0mdebug[0m] [0m[0m          .build()[0m
[0m[[0m[0mdebug[0m] [0m[0m      }[0m
[0m[[0m[0mdebug[0m] [0m[0m      .mapAsync(settings.concurrentRequests) {[0m
[0m[[0m[0mdebug[0m] [0m[0m        case (actions: immutable.Seq[Delete], request) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m          sqsClient[0m
[0m[[0m[0mdebug[0m] [0m[0m            .deleteMessageBatch(request)[0m
[0m[[0m[0mdebug[0m] [0m[0m            .toScala[0m
[0m[[0m[0mdebug[0m] [0m[0m            .map {[0m
[0m[[0m[0mdebug[0m] [0m[0m              case response if response.failed().isEmpty =>[0m
[0m[[0m[0mdebug[0m] [0m[0m                val responseMetadata = response.responseMetadata()[0m
[0m[[0m[0mdebug[0m] [0m[0m                val resultEntries = response.successful().asScala.map(e => e.id.toInt -> e).toMap[0m
[0m[[0m[0mdebug[0m] [0m[0m                actions.zipWithIndex.map {[0m
[0m[[0m[0mdebug[0m] [0m[0m                  case (a, i) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m                    val result = resultEntries(i)[0m
[0m[[0m[0mdebug[0m] [0m[0m                    new SqsDeleteResultEntry(a, result, responseMetadata)[0m
[0m[[0m[0mdebug[0m] [0m[0m                }[0m
[0m[[0m[0mdebug[0m] [0m[0m              case resp =>[0m
[0m[[0m[0mdebug[0m] [0m[0m                val numberOfMessages = request.entries().size()[0m
[0m[[0m[0mdebug[0m] [0m[0m                val nrOfFailedMessages = resp.failed().size()[0m
[0m[[0m[0mdebug[0m] [0m[0m                throw new SqsBatchException([0m
[0m[[0m[0mdebug[0m] [0m[0m                  numberOfMessages,[0m
[0m[[0m[0mdebug[0m] [0m[0m                  s"Some messages are failed to delete. $nrOfFailedMessages of $numberOfMessages messages are failed"[0m
[0m[[0m[0mdebug[0m] [0m[0m                )[0m
[0m[[0m[0mdebug[0m] [0m[0m            }(sameThreadExecutionContext)[0m
[0m[[0m[0mdebug[0m] [0m[0m            .recoverWith {[0m
[0m[[0m[0mdebug[0m] [0m[0m              case e: CompletionException =>[0m
[0m[[0m[0mdebug[0m] [0m[0m                Future.failed(new SqsBatchException(request.entries().size(), e.getMessage, e.getCause))[0m
[0m[[0m[0mdebug[0m] [0m[0m              case e =>[0m
[0m[[0m[0mdebug[0m] [0m[0m                Future.failed(new SqsBatchException(request.entries().size(), e.getMessage, e))[0m
[0m[[0m[0mdebug[0m] [0m[0m            }(sameThreadExecutionContext)[0m
[0m[[0m[0mdebug[0m] [0m[0m      }[0m
[0m[[0m[0mdebug[0m] [0m[0m      .mapConcat(identity)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private def groupedChangeMessageVisibility(queueUrl: String, settings: SqsAckGroupedSettings)([0m
[0m[[0m[0mdebug[0m] [0m[0m      implicit sqsClient: SqsAsyncClient[0m
[0m[[0m[0mdebug[0m] [0m[0m  ): Flow[MessageAction.ChangeMessageVisibility, SqsChangeMessageVisibilityResultEntry, NotUsed] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    Flow[MessageAction.ChangeMessageVisibility][0m
[0m[[0m[0mdebug[0m] [0m[0m      .groupedWithin(settings.maxBatchSize, settings.maxBatchWait)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .map { actions =>[0m
[0m[[0m[0mdebug[0m] [0m[0m        val entries = actions.zipWithIndex.map {[0m
[0m[[0m[0mdebug[0m] [0m[0m          case (a, i) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m            ChangeMessageVisibilityBatchRequestEntry[0m
[0m[[0m[0mdebug[0m] [0m[0m              .builder()[0m
[0m[[0m[0mdebug[0m] [0m[0m              .id(i.toString)[0m
[0m[[0m[0mdebug[0m] [0m[0m              .receiptHandle(a.message.receiptHandle())[0m
[0m[[0m[0mdebug[0m] [0m[0m              .visibilityTimeout(a.visibilityTimeout)[0m
[0m[[0m[0mdebug[0m] [0m[0m              .build()[0m
[0m[[0m[0mdebug[0m] [0m[0m        }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m        actions -> ChangeMessageVisibilityBatchRequest[0m
[0m[[0m[0mdebug[0m] [0m[0m          .builder()[0m
[0m[[0m[0mdebug[0m] [0m[0m          .queueUrl(queueUrl)[0m
[0m[[0m[0mdebug[0m] [0m[0m          .entries(entries.asJava)[0m
[0m[[0m[0mdebug[0m] [0m[0m          .build()[0m
[0m[[0m[0mdebug[0m] [0m[0m      }[0m
[0m[[0m[0mdebug[0m] [0m[0m      .mapAsync(settings.concurrentRequests) {[0m
[0m[[0m[0mdebug[0m] [0m[0m        case (actions, request) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m          sqsClient[0m
[0m[[0m[0mdebug[0m] [0m[0m            .changeMessageVisibilityBatch(request)[0m
[0m[[0m[0mdebug[0m] [0m[0m            .toScala[0m
[0m[[0m[0mdebug[0m] [0m[0m            .map {[0m
[0m[[0m[0mdebug[0m] [0m[0m              case response if response.failed().isEmpty =>[0m
[0m[[0m[0mdebug[0m] [0m[0m                val responseMetadata = response.responseMetadata()[0m
[0m[[0m[0mdebug[0m] [0m[0m                val resultEntries = response.successful().asScala.map(e => e.id.toInt -> e).toMap[0m
[0m[[0m[0mdebug[0m] [0m[0m                actions.zipWithIndex.map {[0m
[0m[[0m[0mdebug[0m] [0m[0m                  case (a, i) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m                    val result = resultEntries(i)[0m
[0m[[0m[0mdebug[0m] [0m[0m                    new SqsChangeMessageVisibilityResultEntry(a, result, responseMetadata)[0m
[0m[[0m[0mdebug[0m] [0m[0m                }[0m
[0m[[0m[0mdebug[0m] [0m[0m              case resp =>[0m
[0m[[0m[0mdebug[0m] [0m[0m                val numberOfMessages = request.entries().size()[0m
[0m[[0m[0mdebug[0m] [0m[0m                val nrOfFailedMessages = resp.failed().size()[0m
[0m[[0m[0mdebug[0m] [0m[0m                throw new SqsBatchException([0m
[0m[[0m[0mdebug[0m] [0m[0m                  numberOfMessages,[0m
[0m[[0m[0mdebug[0m] [0m[0m                  s"Some messages are failed to change visibility. $nrOfFailedMessages of $numberOfMessages messages are failed"[0m
[0m[[0m[0mdebug[0m] [0m[0m                )[0m
[0m[[0m[0mdebug[0m] [0m[0m            }(sameThreadExecutionContext)[0m
[0m[[0m[0mdebug[0m] [0m[0m            .recoverWith {[0m
[0m[[0m[0mdebug[0m] [0m[0m              case e: CompletionException =>[0m
[0m[[0m[0mdebug[0m] [0m[0m                Future.failed(new SqsBatchException(request.entries().size(), e.getMessage, e.getCause))[0m
[0m[[0m[0mdebug[0m] [0m[0m              case e =>[0m
[0m[[0m[0mdebug[0m] [0m[0m                Future.failed(new SqsBatchException(request.entries().size(), e.getMessage, e))[0m
[0m[[0m[0mdebug[0m] [0m[0m            }(sameThreadExecutionContext)[0m
[0m[[0m[0mdebug[0m] [0m[0m      }[0m
[0m[[0m[0mdebug[0m] [0m[0m      .mapConcat(identity)[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/sqs/src/main/scala/akka/stream/alpakka/sqs/scaladsl/SqsPublishFlow.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.sqs.scaladsl[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.util.concurrent.CompletionException[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.NotUsed[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.annotation.ApiMayChange[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.dispatch.ExecutionContexts.sameThreadExecutionContext[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.sqs.{SqsBatchException, _}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.scaladsl.{Flow, Source}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport software.amazon.awssdk.services.sqs.SqsAsyncClient[0m
[0m[[0m[0mdebug[0m] [0m[0mimport software.amazon.awssdk.services.sqs.model._[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.collection.JavaConverters._[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.compat.java8.FutureConverters._[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m/**[0m
[0m[[0m[0mdebug[0m] [0m[0m * Scala API to create publishing SQS flows.[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m@ApiMayChange[0m
[0m[[0m[0mdebug[0m] [0m[0mobject SqsPublishFlow {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * creates a [[akka.stream.scaladsl.Flow Flow]] to publish messages to a SQS queue using an [[software.amazon.awssdk.services.sqs.SqsAsyncClient SqsAsyncClient]][0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def apply(queueUrl: String, settings: SqsPublishSettings)([0m
[0m[[0m[0mdebug[0m] [0m[0m      implicit sqsClient: SqsAsyncClient[0m
[0m[[0m[0mdebug[0m] [0m[0m  ): Flow[SendMessageRequest, SqsPublishResult, NotUsed] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    Flow[0m
[0m[[0m[0mdebug[0m] [0m[0m      .fromFunction((r: SendMessageRequest) => r.toBuilder.queueUrl(queueUrl).build())[0m
[0m[[0m[0mdebug[0m] [0m[0m      .via(apply(settings))[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * creates a [[akka.stream.scaladsl.Flow Flow]] to publish messages to a SQS queue using an [[software.amazon.awssdk.services.sqs.SqsAsyncClient SqsAsyncClient]][0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def apply(queueUrl: String)([0m
[0m[[0m[0mdebug[0m] [0m[0m      implicit sqsClient: SqsAsyncClient[0m
[0m[[0m[0mdebug[0m] [0m[0m  ): Flow[SendMessageRequest, SqsPublishResult, NotUsed] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    apply(queueUrl, SqsPublishSettings.Defaults)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * creates a [[akka.stream.scaladsl.Flow Flow]] to publish messages to SQS queues based on the message queue url using an [[software.amazon.awssdk.services.sqs.SqsAsyncClient SqsAsyncClient]][0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def apply(settings: SqsPublishSettings = SqsPublishSettings.Defaults)([0m
[0m[[0m[0mdebug[0m] [0m[0m      implicit sqsClient: SqsAsyncClient[0m
[0m[[0m[0mdebug[0m] [0m[0m  ): Flow[SendMessageRequest, SqsPublishResult, NotUsed] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    Flow[SendMessageRequest][0m
[0m[[0m[0mdebug[0m] [0m[0m      .mapAsync(settings.maxInFlight) { req =>[0m
[0m[[0m[0mdebug[0m] [0m[0m        sqsClient[0m
[0m[[0m[0mdebug[0m] [0m[0m          .sendMessage(req)[0m
[0m[[0m[0mdebug[0m] [0m[0m          .toScala[0m
[0m[[0m[0mdebug[0m] [0m[0m          .map(req -> _)(sameThreadExecutionContext)[0m
[0m[[0m[0mdebug[0m] [0m[0m      }[0m
[0m[[0m[0mdebug[0m] [0m[0m      .map { case (request, response) => new SqsPublishResult(request, response) }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * creates a [[akka.stream.scaladsl.Flow Flow]] that groups messages and publishes them in batches to a SQS queue using an [[software.amazon.awssdk.services.sqs.SqsAsyncClient SqsAsyncClient]][0m
[0m[[0m[0mdebug[0m] [0m[0m   *[0m
[0m[[0m[0mdebug[0m] [0m[0m   * @see https://doc.akka.io/docs/akka/current/stream/operators/Source-or-Flow/groupedWithin.html#groupedwithin[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def grouped(queueUrl: String, settings: SqsPublishGroupedSettings = SqsPublishGroupedSettings.Defaults)([0m
[0m[[0m[0mdebug[0m] [0m[0m      implicit sqsClient: SqsAsyncClient[0m
[0m[[0m[0mdebug[0m] [0m[0m  ): Flow[SendMessageRequest, SqsPublishResultEntry, NotUsed] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    Flow[SendMessageRequest][0m
[0m[[0m[0mdebug[0m] [0m[0m      .groupedWithin(settings.maxBatchSize, settings.maxBatchWait)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .via(batch(queueUrl, SqsPublishBatchSettings.create().withConcurrentRequests(settings.concurrentRequests)))[0m
[0m[[0m[0mdebug[0m] [0m[0m      .mapConcat(identity)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * creates a [[akka.stream.scaladsl.Flow Flow]] to publish messages in batches to a SQS queue using an [[software.amazon.awssdk.services.sqs.SqsAsyncClient SqsAsyncClient]][0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def batch(queueUrl: String, settings: SqsPublishBatchSettings = SqsPublishBatchSettings.Defaults)([0m
[0m[[0m[0mdebug[0m] [0m[0m      implicit sqsClient: SqsAsyncClient[0m
[0m[[0m[0mdebug[0m] [0m[0m  ): Flow[Iterable[SendMessageRequest], List[SqsPublishResultEntry], NotUsed] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    Flow[Iterable[SendMessageRequest]][0m
[0m[[0m[0mdebug[0m] [0m[0m      .map { requests =>[0m
[0m[[0m[0mdebug[0m] [0m[0m        val entries = requests.zipWithIndex.map {[0m
[0m[[0m[0mdebug[0m] [0m[0m          case (r, i) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m            SendMessageBatchRequestEntry[0m
[0m[[0m[0mdebug[0m] [0m[0m              .builder()[0m
[0m[[0m[0mdebug[0m] [0m[0m              .id(i.toString)[0m
[0m[[0m[0mdebug[0m] [0m[0m              .messageBody(r.messageBody())[0m
[0m[[0m[0mdebug[0m] [0m[0m              .messageAttributes(r.messageAttributes())[0m
[0m[[0m[0mdebug[0m] [0m[0m              .messageGroupId(r.messageGroupId())[0m
[0m[[0m[0mdebug[0m] [0m[0m              .messageDeduplicationId(r.messageDeduplicationId())[0m
[0m[[0m[0mdebug[0m] [0m[0m              .build()[0m
[0m[[0m[0mdebug[0m] [0m[0m        }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m        requests -> SendMessageBatchRequest[0m
[0m[[0m[0mdebug[0m] [0m[0m          .builder()[0m
[0m[[0m[0mdebug[0m] [0m[0m          .queueUrl(queueUrl)[0m
[0m[[0m[0mdebug[0m] [0m[0m          .entries(entries.toList.asJava)[0m
[0m[[0m[0mdebug[0m] [0m[0m          .build()[0m
[0m[[0m[0mdebug[0m] [0m[0m      }[0m
[0m[[0m[0mdebug[0m] [0m[0m      .mapAsync(settings.concurrentRequests) {[0m
[0m[[0m[0mdebug[0m] [0m[0m        case (requests, batchRequest) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m          sqsClient[0m
[0m[[0m[0mdebug[0m] [0m[0m            .sendMessageBatch(batchRequest)[0m
[0m[[0m[0mdebug[0m] [0m[0m            .toScala[0m
[0m[[0m[0mdebug[0m] [0m[0m            .map {[0m
[0m[[0m[0mdebug[0m] [0m[0m              case response if response.failed().isEmpty =>[0m
[0m[[0m[0mdebug[0m] [0m[0m                val responseMetadata = response.responseMetadata()[0m
[0m[[0m[0mdebug[0m] [0m[0m                val resultEntries = response.successful().asScala.map(e => e.id.toInt -> e).toMap[0m
[0m[[0m[0mdebug[0m] [0m[0m                requests.zipWithIndex.map {[0m
[0m[[0m[0mdebug[0m] [0m[0m                  case (r, i) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m                    val result = resultEntries(i)[0m
[0m[[0m[0mdebug[0m] [0m[0m                    new SqsPublishResultEntry(r, result, responseMetadata)[0m
[0m[[0m[0mdebug[0m] [0m[0m                }.toList[0m
[0m[[0m[0mdebug[0m] [0m[0m              case response =>[0m
[0m[[0m[0mdebug[0m] [0m[0m                val numberOfMessages = batchRequest.entries().size()[0m
[0m[[0m[0mdebug[0m] [0m[0m                val nrOfFailedMessages = response.failed().size()[0m
[0m[[0m[0mdebug[0m] [0m[0m                throw new SqsBatchException([0m
[0m[[0m[0mdebug[0m] [0m[0m                  numberOfMessages,[0m
[0m[[0m[0mdebug[0m] [0m[0m                  s"Some messages are failed to send. $nrOfFailedMessages of $numberOfMessages messages are failed"[0m
[0m[[0m[0mdebug[0m] [0m[0m                )[0m
[0m[[0m[0mdebug[0m] [0m[0m            }(sameThreadExecutionContext)[0m
[0m[[0m[0mdebug[0m] [0m[0m      }[0m
[0m[[0m[0mdebug[0m] [0m[0m      .recoverWithRetries(1, {[0m
[0m[[0m[0mdebug[0m] [0m[0m        case e: CompletionException =>[0m
[0m[[0m[0mdebug[0m] [0m[0m          Source.failed(e.getCause)[0m
[0m[[0m[0mdebug[0m] [0m[0m        case e: SqsBatchException =>[0m
[0m[[0m[0mdebug[0m] [0m[0m          Source.failed(e)[0m
[0m[[0m[0mdebug[0m] [0m[0m        case e =>[0m
[0m[[0m[0mdebug[0m] [0m[0m          Source.failed(e)[0m
[0m[[0m[0mdebug[0m] [0m[0m      })[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/sqs/src/main/scala/akka/stream/alpakka/sqs/scaladsl/SqsPublishSink.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.sqs.scaladsl[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.Done[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.sqs.{SqsPublishBatchSettings, SqsPublishGroupedSettings, SqsPublishSettings}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.scaladsl.{Flow, Keep, Sink}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport software.amazon.awssdk.services.sqs.SqsAsyncClient[0m
[0m[[0m[0mdebug[0m] [0m[0mimport software.amazon.awssdk.services.sqs.model.SendMessageRequest[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.concurrent.Future[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m/**[0m
[0m[[0m[0mdebug[0m] [0m[0m * Scala API to create publishing SQS sinks.[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0mobject SqsPublishSink {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * creates a [[akka.stream.scaladsl.Sink Sink]] that accepts strings and publishes them as messages to a SQS queue using an [[software.amazon.awssdk.services.sqs.SqsAsyncClient SqsAsyncClient]][0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def apply([0m
[0m[[0m[0mdebug[0m] [0m[0m      queueUrl: String,[0m
[0m[[0m[0mdebug[0m] [0m[0m      settings: SqsPublishSettings = SqsPublishSettings.Defaults[0m
[0m[[0m[0mdebug[0m] [0m[0m  )(implicit sqsClient: SqsAsyncClient): Sink[String, Future[Done]] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    Flow[0m
[0m[[0m[0mdebug[0m] [0m[0m      .fromFunction((msg: String) => SendMessageRequest.builder().queueUrl(queueUrl).messageBody(msg).build())[0m
[0m[[0m[0mdebug[0m] [0m[0m      .toMat(messageSink(queueUrl, settings))(Keep.right)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * creates a [[akka.stream.scaladsl.Sink Sink]] that groups strings and publishes them as messages in batches to a SQS queue using an [[software.amazon.awssdk.services.sqs.SqsAsyncClient SqsAsyncClient]][0m
[0m[[0m[0mdebug[0m] [0m[0m   *[0m
[0m[[0m[0mdebug[0m] [0m[0m   * @see https://doc.akka.io/docs/akka/current/stream/operators/Source-or-Flow/groupedWithin.html#groupedwithin[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def grouped(queueUrl: String, settings: SqsPublishGroupedSettings = SqsPublishGroupedSettings.Defaults)([0m
[0m[[0m[0mdebug[0m] [0m[0m      implicit sqsClient: SqsAsyncClient[0m
[0m[[0m[0mdebug[0m] [0m[0m  ): Sink[String, Future[Done]] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    Flow[0m
[0m[[0m[0mdebug[0m] [0m[0m      .fromFunction((msg: String) => SendMessageRequest.builder().queueUrl(queueUrl).messageBody(msg).build())[0m
[0m[[0m[0mdebug[0m] [0m[0m      .toMat(groupedMessageSink(queueUrl, settings))(Keep.right)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * creates a [[akka.stream.scaladsl.Sink Sink]] that accepts an iterable of strings and publish them as messages in batches to a SQS queue using an [[software.amazon.awssdk.services.sqs.SqsAsyncClient SqsAsyncClient]][0m
[0m[[0m[0mdebug[0m] [0m[0m   *[0m
[0m[[0m[0mdebug[0m] [0m[0m   * @see https://doc.akka.io/docs/akka/current/stream/operators/Source-or-Flow/groupedWithin.html#groupedwithin[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def batch([0m
[0m[[0m[0mdebug[0m] [0m[0m      queueUrl: String,[0m
[0m[[0m[0mdebug[0m] [0m[0m      settings: SqsPublishBatchSettings = SqsPublishBatchSettings.Defaults[0m
[0m[[0m[0mdebug[0m] [0m[0m  )(implicit sqsClient: SqsAsyncClient): Sink[Iterable[String], Future[Done]] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    Flow[0m
[0m[[0m[0mdebug[0m] [0m[0m      .fromFunction([0m
[0m[[0m[0mdebug[0m] [0m[0m        (msgs: Iterable[String]) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m          msgs.map(msg => SendMessageRequest.builder().queueUrl(queueUrl).messageBody(msg).build())[0m
[0m[[0m[0mdebug[0m] [0m[0m      )[0m
[0m[[0m[0mdebug[0m] [0m[0m      .toMat(batchedMessageSink(queueUrl, settings))(Keep.right)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * creates a [[akka.stream.scaladsl.Sink Sink]] to publish messages to a SQS queue using an [[software.amazon.awssdk.services.sqs.SqsAsyncClient SqsAsyncClient]][0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def messageSink([0m
[0m[[0m[0mdebug[0m] [0m[0m      queueUrl: String,[0m
[0m[[0m[0mdebug[0m] [0m[0m      settings: SqsPublishSettings[0m
[0m[[0m[0mdebug[0m] [0m[0m  )(implicit sqsClient: SqsAsyncClient): Sink[SendMessageRequest, Future[Done]] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    SqsPublishFlow.apply(queueUrl, settings).toMat(Sink.ignore)(Keep.right)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * creates a [[akka.stream.scaladsl.Sink Sink]] to publish messages to a SQS queue using an [[software.amazon.awssdk.services.sqs.SqsAsyncClient SqsAsyncClient]][0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def messageSink(queueUrl: String)(implicit sqsClient: SqsAsyncClient): Sink[SendMessageRequest, Future[Done]] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    SqsPublishFlow.apply(queueUrl, SqsPublishSettings.Defaults).toMat(Sink.ignore)(Keep.right)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * creates a [[akka.stream.scaladsl.Sink Sink]] to publish messages to SQS queues based on the message queue url using an [[software.amazon.awssdk.services.sqs.SqsAsyncClient SqsAsyncClient]][0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def messageSink([0m
[0m[[0m[0mdebug[0m] [0m[0m      settings: SqsPublishSettings = SqsPublishSettings.Defaults[0m
[0m[[0m[0mdebug[0m] [0m[0m  )(implicit sqsClient: SqsAsyncClient): Sink[SendMessageRequest, Future[Done]] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    SqsPublishFlow.apply(settings).toMat(Sink.ignore)(Keep.right)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * creates a [[akka.stream.scaladsl.Sink Sink]] that groups messages and publishes them in batches to a SQS queue using an [[software.amazon.awssdk.services.sqs.SqsAsyncClient SqsAsyncClient]][0m
[0m[[0m[0mdebug[0m] [0m[0m   *[0m
[0m[[0m[0mdebug[0m] [0m[0m   * @see https://doc.akka.io/docs/akka/current/stream/operators/Source-or-Flow/groupedWithin.html#groupedwithin[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def groupedMessageSink([0m
[0m[[0m[0mdebug[0m] [0m[0m      queueUrl: String,[0m
[0m[[0m[0mdebug[0m] [0m[0m      settings: SqsPublishGroupedSettings = SqsPublishGroupedSettings.Defaults[0m
[0m[[0m[0mdebug[0m] [0m[0m  )(implicit sqsClient: SqsAsyncClient): Sink[SendMessageRequest, Future[Done]] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    SqsPublishFlow.grouped(queueUrl, settings).toMat(Sink.ignore)(Keep.right)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * creates a [[akka.stream.scaladsl.Sink Sink]] to publish messages in batches to a SQS queue using an [[software.amazon.awssdk.services.sqs.SqsAsyncClient SqsAsyncClient]][0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def batchedMessageSink([0m
[0m[[0m[0mdebug[0m] [0m[0m      queueUrl: String,[0m
[0m[[0m[0mdebug[0m] [0m[0m      settings: SqsPublishBatchSettings = SqsPublishBatchSettings.Defaults[0m
[0m[[0m[0mdebug[0m] [0m[0m  )(implicit sqsClient: SqsAsyncClient): Sink[Iterable[SendMessageRequest], Future[Done]] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    SqsPublishFlow.batch(queueUrl, settings).toMat(Sink.ignore)(Keep.right)[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/sqs/src/main/scala/akka/stream/alpakka/sqs/scaladsl/SqsAckSink.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.sqs.scaladsl[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.Done[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.sqs.{MessageAction, SqsAckGroupedSettings, SqsAckSettings}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.scaladsl.{Keep, Sink}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport software.amazon.awssdk.services.sqs.SqsAsyncClient[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.concurrent.Future[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m/**[0m
[0m[[0m[0mdebug[0m] [0m[0m * Scala API to create acknowledging SQS sinks.[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0mobject SqsAckSink {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * creates a [[akka.stream.scaladsl.Sink Sink]] for ack a single SQS message at a time using an [[software.amazon.awssdk.services.sqs.SqsAsyncClient]].[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def apply(queueUrl: String, settings: SqsAckSettings = SqsAckSettings.Defaults)([0m
[0m[[0m[0mdebug[0m] [0m[0m      implicit sqsClient: SqsAsyncClient[0m
[0m[[0m[0mdebug[0m] [0m[0m  ): Sink[MessageAction, Future[Done]] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    SqsAckFlow.apply(queueUrl, settings).toMat(Sink.ignore)(Keep.right)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * creates a [[akka.stream.scaladsl.Sink Sink]] for ack grouped SQS messages using an [[software.amazon.awssdk.services.sqs.SqsAsyncClient]].[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def grouped(queueUrl: String, settings: SqsAckGroupedSettings = SqsAckGroupedSettings.Defaults)([0m
[0m[[0m[0mdebug[0m] [0m[0m      implicit sqsClient: SqsAsyncClient[0m
[0m[[0m[0mdebug[0m] [0m[0m  ): Sink[MessageAction, Future[Done]] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    SqsAckFlow.grouped(queueUrl, settings).toMat(Sink.ignore)(Keep.right)[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/sqs/src/main/scala/akka/stream/alpakka/sqs/SqsPublishBatchSettings.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.sqs[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mfinal class SqsPublishBatchSettings private (val concurrentRequests: Int) {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def withConcurrentRequests(value: Int): SqsPublishBatchSettings = copy(concurrentRequests = value)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private def copy(concurrentRequests: Int = concurrentRequests): SqsPublishBatchSettings =[0m
[0m[[0m[0mdebug[0m] [0m[0m    new SqsPublishBatchSettings(concurrentRequests = concurrentRequests)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  override def toString =[0m
[0m[[0m[0mdebug[0m] [0m[0m    s"""SqsPublishBatchSettings(concurrentRequests=$concurrentRequests)"""[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mobject SqsPublishBatchSettings {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  val Defaults = new SqsPublishBatchSettings([0m
[0m[[0m[0mdebug[0m] [0m[0m    concurrentRequests = 1[0m
[0m[[0m[0mdebug[0m] [0m[0m  )[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /** Scala API */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def apply(): SqsPublishBatchSettings = Defaults[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /** Java API */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def create(): SqsPublishBatchSettings = Defaults[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/sqs/src/main/scala/akka/stream/alpakka/sqs/SqsSourceSettings.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.sqs[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.time.temporal.ChronoUnit[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.collection.immutable[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.collection.JavaConverters._[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.concurrent.duration.FiniteDuration[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mfinal class SqsSourceSettings private ([0m
[0m[[0m[0mdebug[0m] [0m[0m    val waitTimeSeconds: Int,[0m
[0m[[0m[0mdebug[0m] [0m[0m    val maxBufferSize: Int,[0m
[0m[[0m[0mdebug[0m] [0m[0m    val parallelRequests: Int,[0m
[0m[[0m[0mdebug[0m] [0m[0m    val maxBatchSize: Int,[0m
[0m[[0m[0mdebug[0m] [0m[0m    val attributeNames: immutable.Seq[AttributeName],[0m
[0m[[0m[0mdebug[0m] [0m[0m    val messageAttributeNames: immutable.Seq[MessageAttributeName],[0m
[0m[[0m[0mdebug[0m] [0m[0m    val closeOnEmptyReceive: Boolean,[0m
[0m[[0m[0mdebug[0m] [0m[0m    val visibilityTimeout: Option[FiniteDuration][0m
[0m[[0m[0mdebug[0m] [0m[0m) {[0m
[0m[[0m[0mdebug[0m] [0m[0m  require(maxBatchSize <= maxBufferSize, "maxBatchSize must be lower or equal than maxBufferSize")[0m
[0m[[0m[0mdebug[0m] [0m[0m  // SQS requirements[0m
[0m[[0m[0mdebug[0m] [0m[0m  require(0 <= waitTimeSeconds && waitTimeSeconds <= 20,[0m
[0m[[0m[0mdebug[0m] [0m[0m          s"Invalid value ($waitTimeSeconds) for waitTimeSeconds. Requirement: 0 <= waitTimeSeconds <= 20 ")[0m
[0m[[0m[0mdebug[0m] [0m[0m  require(1 <= maxBatchSize && maxBatchSize <= 10,[0m
[0m[[0m[0mdebug[0m] [0m[0m          s"Invalid value ($maxBatchSize) for maxBatchSize. Requirement: 1 <= maxBatchSize <= 10 ")[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * The duration in seconds for which the call waits for a message to arrive in the queue before returning.[0m
[0m[[0m[0mdebug[0m] [0m[0m   * (see WaitTimeSeconds in AWS docs).[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Default: 20 seconds[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def withWaitTimeSeconds(seconds: Int): SqsSourceSettings = copy(waitTimeSeconds = seconds)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * The duration for which the call waits for a message to arrive in the queue before returning.[0m
[0m[[0m[0mdebug[0m] [0m[0m   * (see WaitTimeSeconds in AWS docs).[0m
[0m[[0m[0mdebug[0m] [0m[0m   *[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Default: 20 seconds[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def withWaitTime(duration: FiniteDuration): SqsSourceSettings = copy(waitTimeSeconds = duration.toSeconds.toInt)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Java API[0m
[0m[[0m[0mdebug[0m] [0m[0m   *[0m
[0m[[0m[0mdebug[0m] [0m[0m   * The duration in seconds for which the call waits for a message to arrive in the queue before returning.[0m
[0m[[0m[0mdebug[0m] [0m[0m   * (see WaitTimeSeconds in AWS docs).[0m
[0m[[0m[0mdebug[0m] [0m[0m   *[0m
[0m[[0m[0mdebug[0m] [0m[0m   *  Default: 20 seconds[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def withWaitTime(duration: java.time.Duration): SqsSourceSettings =[0m
[0m[[0m[0mdebug[0m] [0m[0m    copy(waitTimeSeconds = duration.get(ChronoUnit.SECONDS).toInt)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Internal buffer size used by the Source.[0m
[0m[[0m[0mdebug[0m] [0m[0m   *[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Default: 100 messages[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def withMaxBufferSize(maxBufferSize: Int): SqsSourceSettings = copy(maxBufferSize = maxBufferSize)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def withParallelRequests(value: Int): SqsSourceSettings = copy(parallelRequests = value)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * The maximum number of messages to return (see MaxNumberOfMessages in AWS docs).[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Default: 10[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def withMaxBatchSize(maxBatchSize: Int): SqsSourceSettings = copy(maxBatchSize = maxBatchSize)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def withAttribute(attribute: AttributeName): SqsSourceSettings = copy(attributeNames = immutable.Seq(attribute))[0m
[0m[[0m[0mdebug[0m] [0m[0m  def withAttributes(attributes: immutable.Seq[AttributeName]): SqsSourceSettings = copy(attributeNames = attributes)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /** Java API */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def withAttributes(attributes: java.util.List[AttributeName]): SqsSourceSettings =[0m
[0m[[0m[0mdebug[0m] [0m[0m    copy(attributeNames = attributes.asScala.toList)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def withMessageAttribute(attributes: MessageAttributeName): SqsSourceSettings =[0m
[0m[[0m[0mdebug[0m] [0m[0m    copy(messageAttributeNames = immutable.Seq(attributes))[0m
[0m[[0m[0mdebug[0m] [0m[0m  def withMessageAttributes(attributes: immutable.Seq[MessageAttributeName]): SqsSourceSettings =[0m
[0m[[0m[0mdebug[0m] [0m[0m    copy(messageAttributeNames = attributes)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /** Java API */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def withMessageAttributes(attributes: java.util.List[MessageAttributeName]): SqsSourceSettings =[0m
[0m[[0m[0mdebug[0m] [0m[0m    copy(messageAttributeNames = attributes.asScala.toList)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * If true, the source completes when no messages are available.[0m
[0m[[0m[0mdebug[0m] [0m[0m   *[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Default: false[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def withCloseOnEmptyReceive(value: Boolean): SqsSourceSettings =[0m
[0m[[0m[0mdebug[0m] [0m[0m    if (value == closeOnEmptyReceive) this[0m
[0m[[0m[0mdebug[0m] [0m[0m    else copy(closeOnEmptyReceive = value)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * the period of time (in seconds) during which Amazon SQS prevents other consumers[0m
[0m[[0m[0mdebug[0m] [0m[0m   * from receiving and processing an already received message (see Amazon SQS doc)[0m
[0m[[0m[0mdebug[0m] [0m[0m   *[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Default: None - taken from the SQS queue configuration[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def withVisibilityTimeout(timeout: FiniteDuration): SqsSourceSettings =[0m
[0m[[0m[0mdebug[0m] [0m[0m    copy(visibilityTimeout = Some(timeout))[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private def copy([0m
[0m[[0m[0mdebug[0m] [0m[0m      waitTimeSeconds: Int = waitTimeSeconds,[0m
[0m[[0m[0mdebug[0m] [0m[0m      maxBufferSize: Int = maxBufferSize,[0m
[0m[[0m[0mdebug[0m] [0m[0m      parallelRequests: Int = parallelRequests,[0m
[0m[[0m[0mdebug[0m] [0m[0m      maxBatchSize: Int = maxBatchSize,[0m
[0m[[0m[0mdebug[0m] [0m[0m      attributeNames: immutable.Seq[AttributeName] = attributeNames,[0m
[0m[[0m[0mdebug[0m] [0m[0m      messageAttributeNames: immutable.Seq[MessageAttributeName] = messageAttributeNames,[0m
[0m[[0m[0mdebug[0m] [0m[0m      closeOnEmptyReceive: Boolean = closeOnEmptyReceive,[0m
[0m[[0m[0mdebug[0m] [0m[0m      visibilityTimeout: Option[FiniteDuration] = visibilityTimeout[0m
[0m[[0m[0mdebug[0m] [0m[0m  ): SqsSourceSettings = new SqsSourceSettings([0m
[0m[[0m[0mdebug[0m] [0m[0m    waitTimeSeconds,[0m
[0m[[0m[0mdebug[0m] [0m[0m    maxBufferSize,[0m
[0m[[0m[0mdebug[0m] [0m[0m    parallelRequests,[0m
[0m[[0m[0mdebug[0m] [0m[0m    maxBatchSize,[0m
[0m[[0m[0mdebug[0m] [0m[0m    attributeNames,[0m
[0m[[0m[0mdebug[0m] [0m[0m    messageAttributeNames,[0m
[0m[[0m[0mdebug[0m] [0m[0m    closeOnEmptyReceive,[0m
[0m[[0m[0mdebug[0m] [0m[0m    visibilityTimeout[0m
[0m[[0m[0mdebug[0m] [0m[0m  )[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  override def toString: String =[0m
[0m[[0m[0mdebug[0m] [0m[0m    "SqsSourceSettings(" +[0m
[0m[[0m[0mdebug[0m] [0m[0m    s"waitTimeSeconds=$waitTimeSeconds, " +[0m
[0m[[0m[0mdebug[0m] [0m[0m    s"maxBufferSize=$maxBufferSize, " +[0m
[0m[[0m[0mdebug[0m] [0m[0m    s"parallelRequests=$parallelRequests, " +[0m
[0m[[0m[0mdebug[0m] [0m[0m    s"maxBatchSize=$maxBatchSize, " +[0m
[0m[[0m[0mdebug[0m] [0m[0m    s"attributeNames=${attributeNames.mkString(",")}, " +[0m
[0m[[0m[0mdebug[0m] [0m[0m    s"messageAttributeNames=${messageAttributeNames.mkString(",")}, " +[0m
[0m[[0m[0mdebug[0m] [0m[0m    s"closeOnEmptyReceive=$closeOnEmptyReceive," +[0m
[0m[[0m[0mdebug[0m] [0m[0m    s"visibilityTomeout=${visibilityTimeout.map(_.toCoarsest)}" +[0m
[0m[[0m[0mdebug[0m] [0m[0m    ")"[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mobject SqsSourceSettings {[0m
[0m[[0m[0mdebug[0m] [0m[0m  val Defaults = new SqsSourceSettings([0m
[0m[[0m[0mdebug[0m] [0m[0m    waitTimeSeconds = 20,[0m
[0m[[0m[0mdebug[0m] [0m[0m    maxBufferSize = 100,[0m
[0m[[0m[0mdebug[0m] [0m[0m    parallelRequests = 1,[0m
[0m[[0m[0mdebug[0m] [0m[0m    maxBatchSize = 10,[0m
[0m[[0m[0mdebug[0m] [0m[0m    attributeNames = immutable.Seq.empty,[0m
[0m[[0m[0mdebug[0m] [0m[0m    messageAttributeNames = immutable.Seq.empty,[0m
[0m[[0m[0mdebug[0m] [0m[0m    closeOnEmptyReceive = false,[0m
[0m[[0m[0mdebug[0m] [0m[0m    visibilityTimeout = None[0m
[0m[[0m[0mdebug[0m] [0m[0m  )[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Scala API[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def apply(): SqsSourceSettings = Defaults[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Java API[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def create(): SqsSourceSettings = Defaults[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m/**[0m
[0m[[0m[0mdebug[0m] [0m[0m * Message attribure names described at[0m
[0m[[0m[0mdebug[0m] [0m[0m * https://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/API_ReceiveMessage.html#API_ReceiveMessage_RequestParameters[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0mfinal class MessageAttributeName private (val name: String) {[0m
[0m[[0m[0mdebug[0m] [0m[0m  require([0m
[0m[[0m[0mdebug[0m] [0m[0m    name.matches("[0-9a-zA-Z_\\-.*]+"),[0m
[0m[[0m[0mdebug[0m] [0m[0m    "MessageAttributeNames may only contain alphanumeric characters and the underscore (_), hyphen (-), period (.), or star (*)"[0m
[0m[[0m[0mdebug[0m] [0m[0m  )[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  require([0m
[0m[[0m[0mdebug[0m] [0m[0m    !name.matches("(^\\.[^*].*)|(.*\\.\\..*)|(.*\\.$)"),[0m
[0m[[0m[0mdebug[0m] [0m[0m    "MessageAttributeNames cannot start or end with a period (.) or have multiple periods in succession (..)"[0m
[0m[[0m[0mdebug[0m] [0m[0m  )[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  require(name.length <= 256, "MessageAttributeNames may not be longer than 256 characters")[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def getName: String = name[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  override def toString: String = s"MessageAttributeName($name)"[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mobject MessageAttributeName {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Scala API:[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Create an instance containing `name`[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def apply(name: String): MessageAttributeName = new MessageAttributeName(name)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Java API:[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Create an instance containing `name`[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def create(name: String): MessageAttributeName = new MessageAttributeName(name)[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m/**[0m
[0m[[0m[0mdebug[0m] [0m[0m * Source parameters as described at[0m
[0m[[0m[0mdebug[0m] [0m[0m * https://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/API_ReceiveMessage.html#API_ReceiveMessage_RequestParameters[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0msealed abstract class AttributeName(val name: String)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mcase object All extends AttributeName("All")[0m
[0m[[0m[0mdebug[0m] [0m[0mcase object ApproximateFirstReceiveTimestamp extends AttributeName("ApproximateFirstReceiveTimestamp")[0m
[0m[[0m[0mdebug[0m] [0m[0mcase object ApproximateReceiveCount extends AttributeName("ApproximateReceiveCount")[0m
[0m[[0m[0mdebug[0m] [0m[0mcase object SenderId extends AttributeName("SenderId")[0m
[0m[[0m[0mdebug[0m] [0m[0mcase object SentTimestamp extends AttributeName("SentTimestamp")[0m
[0m[[0m[0mdebug[0m] [0m[0mcase object MessageDeduplicationId extends AttributeName("MessageDeduplicationId")[0m
[0m[[0m[0mdebug[0m] [0m[0mcase object MessageGroupId extends AttributeName("MessageGroupId")[0m
[0m[[0m[0mdebug[0m] [0m[0mcase object SequenceNumber extends AttributeName("SequenceNumber")[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mcase object Policy extends AttributeName("Policy")[0m
[0m[[0m[0mdebug[0m] [0m[0mcase object VisibilityTimeout extends AttributeName("VisibilityTimeout")[0m
[0m[[0m[0mdebug[0m] [0m[0mcase object MaximumMessageSize extends AttributeName("MaximumMessageSize")[0m
[0m[[0m[0mdebug[0m] [0m[0mcase object MessageRetentionPeriod extends AttributeName("MessageRetentionPeriod")[0m
[0m[[0m[0mdebug[0m] [0m[0mcase object ApproximateNumberOfMessages extends AttributeName("ApproximateNumberOfMessages")[0m
[0m[[0m[0mdebug[0m] [0m[0mcase object ApproximateNumberOfMessagesNotVisible extends AttributeName("ApproximateNumberOfMessagesNotVisible")[0m
[0m[[0m[0mdebug[0m] [0m[0mcase object CreatedTimestamp extends AttributeName("CreatedTimestamp")[0m
[0m[[0m[0mdebug[0m] [0m[0mcase object LastModifiedTimestamp extends AttributeName("LastModifiedTimestamp")[0m
[0m[[0m[0mdebug[0m] [0m[0mcase object QueueArn extends AttributeName("QueueArn")[0m
[0m[[0m[0mdebug[0m] [0m[0mcase object ApproximateNumberOfMessagesDelayed extends AttributeName("ApproximateNumberOfMessagesDelayed")[0m
[0m[[0m[0mdebug[0m] [0m[0mcase object DelaySeconds extends AttributeName("DelaySeconds")[0m
[0m[[0m[0mdebug[0m] [0m[0mcase object ReceiveMessageWaitTimeSeconds extends AttributeName("ReceiveMessageWaitTimeSeconds")[0m
[0m[[0m[0mdebug[0m] [0m[0mcase object RedrivePolicy extends AttributeName("RedrivePolicy")[0m
[0m[[0m[0mdebug[0m] [0m[0mcase object FifoQueue extends AttributeName("FifoQueue")[0m
[0m[[0m[0mdebug[0m] [0m[0mcase object ContentBasedDeduplication extends AttributeName("ContentBasedDeduplication")[0m
[0m[[0m[0mdebug[0m] [0m[0mcase object KmsMasterKeyId extends AttributeName("KmsMasterKeyId")[0m
[0m[[0m[0mdebug[0m] [0m[0mcase object KmsDataKeyReusePeriodSeconds extends AttributeName("KmsDataKeyReusePeriodSeconds")[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m/**[0m
[0m[[0m[0mdebug[0m] [0m[0m * Java API:[0m
[0m[[0m[0mdebug[0m] [0m[0m *[0m
[0m[[0m[0mdebug[0m] [0m[0m * Source parameters as described at[0m
[0m[[0m[0mdebug[0m] [0m[0m * https://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/API_ReceiveMessage.html#API_ReceiveMessage_RequestParameters[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0mobject Attribute {[0m
[0m[[0m[0mdebug[0m] [0m[0m  val all = All[0m
[0m[[0m[0mdebug[0m] [0m[0m  val approximateFirstReceiveTimestamp = ApproximateFirstReceiveTimestamp[0m
[0m[[0m[0mdebug[0m] [0m[0m  val approximateReceiveCount = ApproximateReceiveCount[0m
[0m[[0m[0mdebug[0m] [0m[0m  val senderId = SenderId[0m
[0m[[0m[0mdebug[0m] [0m[0m  val sentTimestamp = SentTimestamp[0m
[0m[[0m[0mdebug[0m] [0m[0m  val messageDeduplicationId = MessageDeduplicationId[0m
[0m[[0m[0mdebug[0m] [0m[0m  val messageGroupId = MessageGroupId[0m
[0m[[0m[0mdebug[0m] [0m[0m  val sequenceNumber = SequenceNumber[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  val policy = Policy[0m
[0m[[0m[0mdebug[0m] [0m[0m  val visibilityTimeout = VisibilityTimeout[0m
[0m[[0m[0mdebug[0m] [0m[0m  val maximumMessageSize = MaximumMessageSize[0m
[0m[[0m[0mdebug[0m] [0m[0m  val messageRetentionPeriod = MessageRetentionPeriod[0m
[0m[[0m[0mdebug[0m] [0m[0m  val approximateNumberOfMessages = ApproximateNumberOfMessages[0m
[0m[[0m[0mdebug[0m] [0m[0m  val approximateNumberOfMessagesNotVisible = ApproximateNumberOfMessagesNotVisible[0m
[0m[[0m[0mdebug[0m] [0m[0m  val createdTimestamp = CreatedTimestamp[0m
[0m[[0m[0mdebug[0m] [0m[0m  val lastModifiedTimestamp = LastModifiedTimestamp[0m
[0m[[0m[0mdebug[0m] [0m[0m  val queueArn = QueueArn[0m
[0m[[0m[0mdebug[0m] [0m[0m  val approximateNumberOfMessagesDelayed = ApproximateNumberOfMessagesDelayed[0m
[0m[[0m[0mdebug[0m] [0m[0m  val delaySeconds = DelaySeconds[0m
[0m[[0m[0mdebug[0m] [0m[0m  val receiveMessageWaitTimeSeconds = ReceiveMessageWaitTimeSeconds[0m
[0m[[0m[0mdebug[0m] [0m[0m  val redrivePolicy = RedrivePolicy[0m
[0m[[0m[0mdebug[0m] [0m[0m  val fifoQueue = FifoQueue[0m
[0m[[0m[0mdebug[0m] [0m[0m  val contentBasedDeduplication = ContentBasedDeduplication[0m
[0m[[0m[0mdebug[0m] [0m[0m  val kmsMasterKeyId = KmsMasterKeyId[0m
[0m[[0m[0mdebug[0m] [0m[0m  val kmsDataKeyReusePeriodSeconds = KmsDataKeyReusePeriodSeconds[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
