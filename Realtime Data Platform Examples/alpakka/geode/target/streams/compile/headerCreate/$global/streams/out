[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/geode/src/main/scala/akka/stream/alpakka/geode/AkkaPdxSerializer.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.geode[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.apache.geode.pdx.PdxSerializer[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m/**[0m
[0m[[0m[0mdebug[0m] [0m[0m * Base interface for Geode `PdxSerializer`s in Alpakka Geode.[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0mtrait AkkaPdxSerializer[V] extends PdxSerializer {[0m
[0m[[0m[0mdebug[0m] [0m[0m  def clazz: Class[V][0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/geode/src/main/scala/akka/stream/alpakka/geode/scaladsl/Geode.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.geode.scaladsl[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.geode.impl._[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.geode.impl.pdx.{PdxDecoder, PdxEncoder, ShapelessPdxSerializer}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.geode.impl.stage.{GeodeContinuousSourceStage, GeodeFiniteSourceStage, GeodeFlowStage}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.geode.{AkkaPdxSerializer, GeodeSettings, RegionSettings}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.scaladsl.{Flow, Keep, Sink, Source}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.{Done, NotUsed}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.apache.geode.cache.client.ClientCacheFactory[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.concurrent.Future[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.reflect.ClassTag[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m/**[0m
[0m[[0m[0mdebug[0m] [0m[0m * Scala API: Geode client without server event subscription.[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0mclass Geode(settings: GeodeSettings) extends GeodeCache(settings) {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * This method is overloaded by [[PoolSubscription]] to provide server event subscriptions.[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  override protected def configure(factory: ClientCacheFactory): ClientCacheFactory =[0m
[0m[[0m[0mdebug[0m] [0m[0m    factory.addPoolLocator(settings.hostname, settings.port)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def query[V <: AnyRef](query: String, serializer: AkkaPdxSerializer[V]): Source[V, Future[Done]] = {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    registerPDXSerializer(serializer, serializer.clazz)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    Source.fromGraph(new GeodeFiniteSourceStage[V](cache, query))[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def flow[K, V <: AnyRef](settings: RegionSettings[K, V], serializer: AkkaPdxSerializer[V]): Flow[V, V, NotUsed] = {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    registerPDXSerializer(serializer, serializer.clazz)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    Flow.fromGraph(new GeodeFlowStage[K, V](cache, settings))[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def sink[K, V <: AnyRef](settings: RegionSettings[K, V], serializer: AkkaPdxSerializer[V]): Sink[V, Future[Done]] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    Flow[V].via(flow(settings, serializer)).toMat(Sink.ignore)(Keep.right)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Shapeless powered implicit serializer.[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def query[V <: AnyRef]([0m
[0m[[0m[0mdebug[0m] [0m[0m      query: String[0m
[0m[[0m[0mdebug[0m] [0m[0m  )(implicit tag: ClassTag[V], enc: PdxEncoder[V], dec: PdxDecoder[V]): Source[V, Future[Done]] = {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    registerPDXSerializer(new ShapelessPdxSerializer[V](enc, dec), tag.runtimeClass)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    Source.fromGraph(new GeodeFiniteSourceStage[V](cache, query))[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Shapeless powered implicit serializer.[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def flow[K, V <: AnyRef]([0m
[0m[[0m[0mdebug[0m] [0m[0m      settings: RegionSettings[K, V][0m
[0m[[0m[0mdebug[0m] [0m[0m  )(implicit tag: ClassTag[V], enc: PdxEncoder[V], dec: PdxDecoder[V]): Flow[V, V, NotUsed] = {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    registerPDXSerializer(new ShapelessPdxSerializer[V](enc, dec), tag.runtimeClass)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    Flow.fromGraph(new GeodeFlowStage[K, V](cache, settings))[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Shapeless powered implicit serializer.[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def sink[K, V <: AnyRef]([0m
[0m[[0m[0mdebug[0m] [0m[0m      settings: RegionSettings[K, V][0m
[0m[[0m[0mdebug[0m] [0m[0m  )(implicit tag: ClassTag[V], enc: PdxEncoder[V], dec: PdxDecoder[V]): Sink[V, Future[Done]] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    Flow[V].via(flow(settings)).toMat(Sink.ignore)(Keep.right)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mtrait PoolSubscription extends Geode {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Pool subscription is mandatory for continuous query.[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  final override protected def configure(factory: ClientCacheFactory) =[0m
[0m[[0m[0mdebug[0m] [0m[0m    super.configure(factory).setPoolSubscriptionEnabled(true)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def continuousQuery[V <: AnyRef](queryName: Symbol,[0m
[0m[[0m[0mdebug[0m] [0m[0m                                   query: String,[0m
[0m[[0m[0mdebug[0m] [0m[0m                                   serializer: AkkaPdxSerializer[V]): Source[V, Future[Done]] = {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    registerPDXSerializer(serializer, serializer.clazz)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    Source.fromGraph(new GeodeContinuousSourceStage[V](cache, queryName.name, query))[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Shapeless powered implicit serializer.[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def continuousQuery[V <: AnyRef]([0m
[0m[[0m[0mdebug[0m] [0m[0m      queryName: Symbol,[0m
[0m[[0m[0mdebug[0m] [0m[0m      query: String[0m
[0m[[0m[0mdebug[0m] [0m[0m  )(implicit tag: ClassTag[V], enc: PdxEncoder[V], dec: PdxDecoder[V]): Source[V, Future[Done]] = {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    registerPDXSerializer(new ShapelessPdxSerializer[V](enc, dec), tag.runtimeClass)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    Source.fromGraph(new GeodeContinuousSourceStage[V](cache, queryName.name, query))[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def closeContinuousQuery(queryName: Symbol) =[0m
[0m[[0m[0mdebug[0m] [0m[0m    for {[0m
[0m[[0m[0mdebug[0m] [0m[0m      qs <- Option(cache.getQueryService())[0m
[0m[[0m[0mdebug[0m] [0m[0m      query <- Option(qs.getCq(queryName.name))[0m
[0m[[0m[0mdebug[0m] [0m[0m    } yield (query.close())[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/geode/src/main/scala/akka/stream/alpakka/geode/impl/GeodeCache.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.geode.impl[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.annotation.InternalApi[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.geode.GeodeSettings[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.geode.impl.pdx.DelegatingPdxSerializer[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.apache.geode.cache.client.{ClientCache, ClientCacheFactory}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.apache.geode.pdx.PdxSerializer[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m/**[0m
[0m[[0m[0mdebug[0m] [0m[0m * Base of all geode client.[0m
[0m[[0m[0mdebug[0m] [0m[0m *[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m@InternalApi[0m
[0m[[0m[0mdebug[0m] [0m[0mprivate[geode] abstract class GeodeCache(geodeSettings: GeodeSettings) {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private lazy val serializer = new DelegatingPdxSerializer(geodeSettings.pdxCompat)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  protected def registerPDXSerializer[V](pdxSerializer: PdxSerializer, clazz: Class[V]): Unit =[0m
[0m[[0m[0mdebug[0m] [0m[0m    serializer.register(pdxSerializer, clazz)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * This method will overloaded to provide server event subscription.[0m
[0m[[0m[0mdebug[0m] [0m[0m   *[0m
[0m[[0m[0mdebug[0m] [0m[0m   * @return[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  protected def configure(factory: ClientCacheFactory): ClientCacheFactory[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Return ClientCacheFactory:[0m
[0m[[0m[0mdebug[0m] [0m[0m   * <ul>[0m
[0m[[0m[0mdebug[0m] [0m[0m   * <li>with PDX support</li>[0m
[0m[[0m[0mdebug[0m] [0m[0m   * <li>configured by sub classes</li>[0m
[0m[[0m[0mdebug[0m] [0m[0m   * <li>customized by client application</li>[0m
[0m[[0m[0mdebug[0m] [0m[0m   * </ul>[0m
[0m[[0m[0mdebug[0m] [0m[0m   *[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  final protected def newCacheFactory(): ClientCacheFactory = {[0m
[0m[[0m[0mdebug[0m] [0m[0m    val factory = configure(new ClientCacheFactory().setPdxSerializer(serializer))[0m
[0m[[0m[0mdebug[0m] [0m[0m    geodeSettings.configure.map(_(factory)).getOrElse(factory)[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  lazy val cache: ClientCache = newCacheFactory().create()[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def close(keepAlive: Boolean = false): Unit = cache.close(keepAlive)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/geode/src/main/scala/akka/stream/alpakka/geode/impl/GeodeCapabilities.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.geode.impl[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.annotation.InternalApi[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.geode.RegionSettings[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.stage.StageLogging[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.apache.geode.cache.client.{ClientCache, ClientRegionShortcut}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.util.control.NonFatal[0m
[0m[[0m[0mdebug[0m] [0m[0m@InternalApi[0m
[0m[[0m[0mdebug[0m] [0m[0mprivate[geode] trait GeodeCapabilities[K, V] { this: StageLogging =>[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def regionSettings: RegionSettings[K, V][0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def clientCache: ClientCache[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private lazy val region =[0m
[0m[[0m[0mdebug[0m] [0m[0m    clientCache.createClientRegionFactory[K, V](ClientRegionShortcut.CACHING_PROXY).create(regionSettings.name)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def put(v: V): Unit = region.put(regionSettings.keyExtractor(v), v)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def close(): Unit =[0m
[0m[[0m[0mdebug[0m] [0m[0m    try {[0m
[0m[[0m[0mdebug[0m] [0m[0m      if (clientCache.isClosed)[0m
[0m[[0m[0mdebug[0m] [0m[0m        return[0m
[0m[[0m[0mdebug[0m] [0m[0m      region.close()[0m
[0m[[0m[0mdebug[0m] [0m[0m      log.debug("region closed")[0m
[0m[[0m[0mdebug[0m] [0m[0m    } catch {[0m
[0m[[0m[0mdebug[0m] [0m[0m      case NonFatal(ex) => log.error(ex, "Problem occurred during producer region closing")[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/geode/src/main/scala/akka/stream/alpakka/geode/impl/stage/GeodeContinuousSourceStage.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.geode.impl.stage[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.Done[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.annotation.InternalApi[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.stage._[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.{ActorAttributes, Attributes, Outlet, SourceShape}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.apache.geode.cache.client.ClientCache[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.concurrent.{Future, Promise}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m@InternalApi[0m
[0m[[0m[0mdebug[0m] [0m[0mprivate[geode] class GeodeContinuousSourceStage[V](cache: ClientCache, name: String, sql: String)[0m
[0m[[0m[0mdebug[0m] [0m[0m    extends GraphStageWithMaterializedValue[SourceShape[V], Future[Done]] {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  override protected def initialAttributes: Attributes =[0m
[0m[[0m[0mdebug[0m] [0m[0m    super.initialAttributes and Attributes.name("GeodeContinuousSource") and ActorAttributes.IODispatcher[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  val out = Outlet[V](s"geode.continuousSource")[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  override def shape: SourceShape[V] = SourceShape.of(out)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  override def createLogicAndMaterializedValue(inheritedAttributes: Attributes): (GraphStageLogic, Future[Done]) = {[0m
[0m[[0m[0mdebug[0m] [0m[0m    val subPromise = Promise[Done][0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    (new GeodeCQueryGraphLogic[V](shape, cache, name, sql) {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m      override val onConnect: AsyncCallback[Unit] = getAsyncCallback[Unit] { v =>[0m
[0m[[0m[0mdebug[0m] [0m[0m        subPromise.success(Done)[0m
[0m[[0m[0mdebug[0m] [0m[0m      }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m      val onElement: AsyncCallback[V] = getAsyncCallback[V] { element =>[0m
[0m[[0m[0mdebug[0m] [0m[0m        if (isAvailable(out) && incomingQueueIsEmpty) {[0m
[0m[[0m[0mdebug[0m] [0m[0m          pushElement(out, element)[0m
[0m[[0m[0mdebug[0m] [0m[0m        } else[0m
[0m[[0m[0mdebug[0m] [0m[0m          enqueue(element)[0m
[0m[[0m[0mdebug[0m] [0m[0m        handleTerminaison()[0m
[0m[[0m[0mdebug[0m] [0m[0m      }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m      //[0m
[0m[[0m[0mdebug[0m] [0m[0m      // This handler, will first forward initial (old) result, then new ones (continuous).[0m
[0m[[0m[0mdebug[0m] [0m[0m      //[0m
[0m[[0m[0mdebug[0m] [0m[0m      setHandler([0m
[0m[[0m[0mdebug[0m] [0m[0m        out,[0m
[0m[[0m[0mdebug[0m] [0m[0m        new OutHandler {[0m
[0m[[0m[0mdebug[0m] [0m[0m          override def onPull() = {[0m
[0m[[0m[0mdebug[0m] [0m[0m            if (initialResultsIterator.hasNext)[0m
[0m[[0m[0mdebug[0m] [0m[0m              push(out, initialResultsIterator.next())[0m
[0m[[0m[0mdebug[0m] [0m[0m            else[0m
[0m[[0m[0mdebug[0m] [0m[0m              dequeue() foreach { e =>[0m
[0m[[0m[0mdebug[0m] [0m[0m                pushElement(out, e)[0m
[0m[[0m[0mdebug[0m] [0m[0m              }[0m
[0m[[0m[0mdebug[0m] [0m[0m            handleTerminaison()[0m
[0m[[0m[0mdebug[0m] [0m[0m          }[0m
[0m[[0m[0mdebug[0m] [0m[0m        }[0m
[0m[[0m[0mdebug[0m] [0m[0m      )[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    }, subPromise.future)[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/geode/src/main/scala/akka/stream/alpakka/geode/impl/stage/GeodeQueryGraphLogic.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.geode.impl.stage[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.annotation.InternalApi[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.SourceShape[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.stage.StageLogging[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.apache.geode.cache.client.ClientCache[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.apache.geode.cache.query.SelectResults[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.util.Try[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m@InternalApi[0m
[0m[[0m[0mdebug[0m] [0m[0mprivate[geode] abstract class GeodeQueryGraphLogic[V](val shape: SourceShape[V],[0m
[0m[[0m[0mdebug[0m] [0m[0m                                                      val clientCache: ClientCache,[0m
[0m[[0m[0mdebug[0m] [0m[0m                                                      val query: String)[0m
[0m[[0m[0mdebug[0m] [0m[0m    extends GeodeSourceStageLogic[V](shape, clientCache)[0m
[0m[[0m[0mdebug[0m] [0m[0m    with StageLogging {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  override def executeQuery() = Try {[0m
[0m[[0m[0mdebug[0m] [0m[0m    qs.newQuery(query)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .execute()[0m
[0m[[0m[0mdebug[0m] [0m[0m      .asInstanceOf[SelectResults[V]][0m
[0m[[0m[0mdebug[0m] [0m[0m      .iterator()[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/geode/src/main/scala/akka/stream/alpakka/geode/impl/stage/GeodeFiniteSourceStage.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.geode.impl.stage[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.Done[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.annotation.InternalApi[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.stage._[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.{ActorAttributes, Attributes, Outlet, SourceShape}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.apache.geode.cache.client.ClientCache[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.concurrent.{Future, Promise}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m@InternalApi[0m
[0m[[0m[0mdebug[0m] [0m[0mprivate[geode] class GeodeFiniteSourceStage[V](cache: ClientCache, sql: String)[0m
[0m[[0m[0mdebug[0m] [0m[0m    extends GraphStageWithMaterializedValue[SourceShape[V], Future[Done]] {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  override protected def initialAttributes: Attributes =[0m
[0m[[0m[0mdebug[0m] [0m[0m    super.initialAttributes and Attributes.name("GeodeFiniteSource") and ActorAttributes.IODispatcher[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  val out = Outlet[V]("geode.finiteSource")[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  override def shape: SourceShape[V] = SourceShape.of(out)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  override def createLogicAndMaterializedValue(inheritedAttributes: Attributes): (GraphStageLogic, Future[Done]) = {[0m
[0m[[0m[0mdebug[0m] [0m[0m    val subPromise = Promise[Done][0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    (new GeodeQueryGraphLogic[V](shape, cache, sql) {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m      override val onConnect: AsyncCallback[Unit] = getAsyncCallback[Unit] { v =>[0m
[0m[[0m[0mdebug[0m] [0m[0m        subPromise.success(Done)[0m
[0m[[0m[0mdebug[0m] [0m[0m      }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m      setHandler([0m
[0m[[0m[0mdebug[0m] [0m[0m        out,[0m
[0m[[0m[0mdebug[0m] [0m[0m        new OutHandler {[0m
[0m[[0m[0mdebug[0m] [0m[0m          override def onPull() =[0m
[0m[[0m[0mdebug[0m] [0m[0m            if (initialResultsIterator.hasNext)[0m
[0m[[0m[0mdebug[0m] [0m[0m              push(out, initialResultsIterator.next())[0m
[0m[[0m[0mdebug[0m] [0m[0m            else[0m
[0m[[0m[0mdebug[0m] [0m[0m              completeStage()[0m
[0m[[0m[0mdebug[0m] [0m[0m        }[0m
[0m[[0m[0mdebug[0m] [0m[0m      )[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    }, subPromise.future)[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/geode/src/main/scala/akka/stream/alpakka/geode/impl/stage/GeodeFlowStage.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.geode.impl.stage[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.annotation.InternalApi[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream._[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.geode.RegionSettings[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.geode.impl.GeodeCapabilities[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.stage._[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.apache.geode.cache.client.ClientCache[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m@InternalApi[0m
[0m[[0m[0mdebug[0m] [0m[0mprivate[geode] class GeodeFlowStage[K, T <: AnyRef](cache: ClientCache, settings: RegionSettings[K, T])[0m
[0m[[0m[0mdebug[0m] [0m[0m    extends GraphStage[FlowShape[T, T]] {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  override protected def initialAttributes: Attributes =[0m
[0m[[0m[0mdebug[0m] [0m[0m    super.initialAttributes and Attributes.name("GeodeFlow") and ActorAttributes.IODispatcher[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private val in = Inlet[T]("geode.in")[0m
[0m[[0m[0mdebug[0m] [0m[0m  private val out = Outlet[T]("geode.out")[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  override val shape = FlowShape(in, out)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  override def createLogic(inheritedAttributes: Attributes): GraphStageLogic =[0m
[0m[[0m[0mdebug[0m] [0m[0m    new GraphStageLogic(shape) with StageLogging with GeodeCapabilities[K, T] {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m      override protected def logSource = classOf[GeodeFlowStage[K, T]][0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m      val regionSettings = settings[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m      val clientCache = cache[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m      setHandler(out, new OutHandler {[0m
[0m[[0m[0mdebug[0m] [0m[0m        override def onPull() =[0m
[0m[[0m[0mdebug[0m] [0m[0m          pull(in)[0m
[0m[[0m[0mdebug[0m] [0m[0m      })[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m      setHandler(in, new InHandler {[0m
[0m[[0m[0mdebug[0m] [0m[0m        override def onPush() = {[0m
[0m[[0m[0mdebug[0m] [0m[0m          val msg = grab(in)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m          put(msg)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m          push(out, msg)[0m
[0m[[0m[0mdebug[0m] [0m[0m        }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m      })[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m      override def postStop() = {[0m
[0m[[0m[0mdebug[0m] [0m[0m        log.debug("Stage completed")[0m
[0m[[0m[0mdebug[0m] [0m[0m        close()[0m
[0m[[0m[0mdebug[0m] [0m[0m      }[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/geode/src/main/scala/akka/stream/alpakka/geode/impl/stage/GeodeCQueryGraphLogic.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.geode.impl.stage[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.util[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.util.concurrent.Semaphore[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.annotation.InternalApi[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.stage.{AsyncCallback, StageLogging}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.{Outlet, SourceShape}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.apache.geode.cache.client.ClientCache[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.apache.geode.cache.query.{CqAttributesFactory, CqEvent, CqQuery, Struct}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.apache.geode.cache.util.CqListenerAdapter[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.collection.mutable[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.util.Try[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m@InternalApi[0m
[0m[[0m[0mdebug[0m] [0m[0mprivate[geode] abstract class GeodeCQueryGraphLogic[V](val shape: SourceShape[V],[0m
[0m[[0m[0mdebug[0m] [0m[0m                                                       val clientCache: ClientCache,[0m
[0m[[0m[0mdebug[0m] [0m[0m                                                       val queryName: String,[0m
[0m[[0m[0mdebug[0m] [0m[0m                                                       val sql: String)[0m
[0m[[0m[0mdebug[0m] [0m[0m    extends GeodeSourceStageLogic[V](shape, clientCache)[0m
[0m[[0m[0mdebug[0m] [0m[0m    with StageLogging {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Queue containing, only[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  private val incomingQueue = mutable.Queue[V]()[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private val semaphore = new Semaphore(10)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  val onElement: AsyncCallback[V][0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private var query: CqQuery = _[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  override def executeQuery() = Try {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    val cqf = new CqAttributesFactory()[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    val eventListener = new CqListenerAdapter() {[0m
[0m[[0m[0mdebug[0m] [0m[0m      override def onEvent(ev: CqEvent): Unit =[0m
[0m[[0m[0mdebug[0m] [0m[0m        onGeodeElement((ev.getNewValue().asInstanceOf[V]))[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m      override def onError(ev: CqEvent): Unit =[0m
[0m[[0m[0mdebug[0m] [0m[0m        log.error(ev.getThrowable, s"$ev")[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m      override def close(): Unit = {[0m
[0m[[0m[0mdebug[0m] [0m[0m        log.debug("closes")[0m
[0m[[0m[0mdebug[0m] [0m[0m        inFinish.invoke(())[0m
[0m[[0m[0mdebug[0m] [0m[0m      }[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m    cqf.addCqListener(eventListener)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    val cqa = cqf.create()[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    query = qs.newCq(queryName, sql, cqa)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    buildInitialResulsIterator(query)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private def buildInitialResulsIterator(q: CqQuery) = {[0m
[0m[[0m[0mdebug[0m] [0m[0m    val res = q.executeWithInitialResults[Struct][0m
[0m[[0m[0mdebug[0m] [0m[0m    val it = res.iterator()[0m
[0m[[0m[0mdebug[0m] [0m[0m    new util.Iterator[V] {[0m
[0m[[0m[0mdebug[0m] [0m[0m      override def next(): V =[0m
[0m[[0m[0mdebug[0m] [0m[0m        it.next().getFieldValues()(1).asInstanceOf[V][0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m      override def hasNext: Boolean = it.hasNext[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * May lock on semaphore.acquires().[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  protected def onGeodeElement(v: V): Unit = {[0m
[0m[[0m[0mdebug[0m] [0m[0m    semaphore.acquire()[0m
[0m[[0m[0mdebug[0m] [0m[0m    onElement.invoke(v)[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  protected def incomingQueueIsEmpty = incomingQueue.isEmpty[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  protected def enqueue(v: V): Unit =[0m
[0m[[0m[0mdebug[0m] [0m[0m    incomingQueue.enqueue(v)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  protected def dequeue(): Option[V] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    if (incomingQueue.isEmpty)[0m
[0m[[0m[0mdebug[0m] [0m[0m      None[0m
[0m[[0m[0mdebug[0m] [0m[0m    else[0m
[0m[[0m[0mdebug[0m] [0m[0m      Some(incomingQueue.dequeue())[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Pushes an element downstream and releases a semaphore acquired in onGeodeElement.[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  protected def pushElement(out: Outlet[V], element: V) = {[0m
[0m[[0m[0mdebug[0m] [0m[0m    push(out, element)[0m
[0m[[0m[0mdebug[0m] [0m[0m    semaphore.release()[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  override def postStop(): Unit = {[0m
[0m[[0m[0mdebug[0m] [0m[0m    if (clientCache.isClosed)[0m
[0m[[0m[0mdebug[0m] [0m[0m      return[0m
[0m[[0m[0mdebug[0m] [0m[0m    qs.closeCqs()[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Geode upstream is terminated.[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  @volatile[0m
[0m[[0m[0mdebug[0m] [0m[0m  private var upstreamTerminated = false[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  val inFinish: AsyncCallback[Unit] = getAsyncCallback[Unit] { v =>[0m
[0m[[0m[0mdebug[0m] [0m[0m    upstreamTerminated = true[0m
[0m[[0m[0mdebug[0m] [0m[0m    handleTerminaison()[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def handleTerminaison() =[0m
[0m[[0m[0mdebug[0m] [0m[0m    if (upstreamTerminated && incomingQueue.isEmpty)[0m
[0m[[0m[0mdebug[0m] [0m[0m      completeStage()[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/geode/src/main/scala/akka/stream/alpakka/geode/impl/stage/GeodeSourceStageLogic.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.geode.impl.stage[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.annotation.InternalApi[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.SourceShape[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.stage.{AsyncCallback, GraphStageLogic}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.apache.geode.cache.client.ClientCache[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.util.{Failure, Success, Try}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m@InternalApi[0m
[0m[[0m[0mdebug[0m] [0m[0mprivate[geode] abstract class GeodeSourceStageLogic[V](shape: SourceShape[V], clientCache: ClientCache)[0m
[0m[[0m[0mdebug[0m] [0m[0m    extends GraphStageLogic(shape) {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  protected var initialResultsIterator: java.util.Iterator[V] = _[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  val onConnect: AsyncCallback[Unit][0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  lazy val qs = clientCache.getQueryService()[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def executeQuery(): Try[java.util.Iterator[V]][0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  final override def preStart(): Unit = executeQuery() match {[0m
[0m[[0m[0mdebug[0m] [0m[0m    case Success(it) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m      initialResultsIterator = it[0m
[0m[[0m[0mdebug[0m] [0m[0m      onConnect.invoke(())[0m
[0m[[0m[0mdebug[0m] [0m[0m    case Failure(e) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m      failStage(e)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/geode/src/main/scala/akka/stream/alpakka/geode/impl/pdx/DelegatingPdxSerializer.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.geode.impl.pdx[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.util.Properties[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.annotation.InternalApi[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.apache.geode.cache.Declarable[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.apache.geode.pdx.{PdxReader, PdxSerializer, PdxWriter}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m/**[0m
[0m[[0m[0mdebug[0m] [0m[0m * Geode ClientCache does not support more than one serializer.[0m
[0m[[0m[0mdebug[0m] [0m[0m * <br>[0m
[0m[[0m[0mdebug[0m] [0m[0m * This serializer delegates to lazily registered serializer.[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m@InternalApi[0m
[0m[[0m[0mdebug[0m] [0m[0mprivate[geode] class DelegatingPdxSerializer([0m
[0m[[0m[0mdebug[0m] [0m[0m    isPdxCompat: (Class[_], Class[_]) => Boolean[0m
[0m[[0m[0mdebug[0m] [0m[0m) extends PdxSerializer[0m
[0m[[0m[0mdebug[0m] [0m[0m    with Declarable {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private var serializers = Map[Class[_], PdxSerializer]()[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def register[V](serializer: PdxSerializer, clazz: Class[V]): Unit = synchronized {[0m
[0m[[0m[0mdebug[0m] [0m[0m    if (!serializers.contains(clazz))[0m
[0m[[0m[0mdebug[0m] [0m[0m      serializers += (clazz -> serializer)[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Marshalls a class with a registered serializer.[0m
[0m[[0m[0mdebug[0m] [0m[0m   *[0m
[0m[[0m[0mdebug[0m] [0m[0m   * @return true on success[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  override def toData(o: scala.Any, out: PdxWriter): Boolean =[0m
[0m[[0m[0mdebug[0m] [0m[0m    serializers.get(o.getClass).map(_.toData(o, out)).isDefined[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Unmarshalls with registered serializer.[0m
[0m[[0m[0mdebug[0m] [0m[0m   * <br>[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Tries to find a registered serializer for a given class[0m
[0m[[0m[0mdebug[0m] [0m[0m   * <ul>[0m
[0m[[0m[0mdebug[0m] [0m[0m   * <li>Lookup on class basis</li>[0m
[0m[[0m[0mdebug[0m] [0m[0m   * <li>Iterating through all serializer to find a compatible one</li>[0m
[0m[[0m[0mdebug[0m] [0m[0m   * </ul>[0m
[0m[[0m[0mdebug[0m] [0m[0m   * By doing this, a java pojo can be unmarshalled from a scala case class (and vice versa)[0m
[0m[[0m[0mdebug[0m] [0m[0m   *[0m
[0m[[0m[0mdebug[0m] [0m[0m   * @return unmarshalled class or null[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  override def fromData(clazz: Class[_], in: PdxReader): AnyRef =[0m
[0m[[0m[0mdebug[0m] [0m[0m    serializers[0m
[0m[[0m[0mdebug[0m] [0m[0m      .get(clazz)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .map(_.fromData(clazz, in))[0m
[0m[[0m[0mdebug[0m] [0m[0m      .orElse(serializers.collectFirst {[0m
[0m[[0m[0mdebug[0m] [0m[0m        case (c, ser) if isPdxCompat(c, clazz) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m          val v = ser.fromData(clazz, in)[0m
[0m[[0m[0mdebug[0m] [0m[0m          if (v != null) register(ser, clazz)[0m
[0m[[0m[0mdebug[0m] [0m[0m          v[0m
[0m[[0m[0mdebug[0m] [0m[0m      })[0m
[0m[[0m[0mdebug[0m] [0m[0m      .orNull[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  override def init(props: Properties): Unit = {}[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/geode/src/main/scala/akka/stream/alpakka/geode/impl/pdx/PdxDecoder.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.geode.impl.pdx[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.util.{Date, UUID}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.annotation.InternalApi[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.apache.geode.pdx.PdxReader[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.util.{Failure, Success, Try}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m@InternalApi[0m
[0m[[0m[0mdebug[0m] [0m[0mtrait PdxDecoder[A] {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def decode(reader: PdxReader, fieldName: Symbol = null): Try[A][0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mobject PdxDecoder {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  import shapeless._[0m
[0m[[0m[0mdebug[0m] [0m[0m  import shapeless.labelled._[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private def instance[A](f: (PdxReader, Symbol) => Try[A]): PdxDecoder[A] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    new PdxDecoder[A] {[0m
[0m[[0m[0mdebug[0m] [0m[0m      def decode(reader: PdxReader, fieldName: Symbol) = f(reader, fieldName)[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit val hnilDecoder: PdxDecoder[HNil] = instance((_, _) => Success(HNil))[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit val booleanDecoder: PdxDecoder[Boolean] = instance {[0m
[0m[[0m[0mdebug[0m] [0m[0m    case (reader, fieldName) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m      Success(reader.readBoolean(fieldName.name))[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit val booleanListDecoder: PdxDecoder[List[Boolean]] = instance {[0m
[0m[[0m[0mdebug[0m] [0m[0m    case (reader, fieldName) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m      Success(reader.readBooleanArray(fieldName.name).toList)[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit val booleanArrayDecoder: PdxDecoder[Array[Boolean]] = instance {[0m
[0m[[0m[0mdebug[0m] [0m[0m    case (reader, fieldName) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m      Success(reader.readBooleanArray(fieldName.name))[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit val intDecoder: PdxDecoder[Int] = instance { (reader, fieldName) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m    Success(reader.readInt(fieldName.name))[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit val intListDecoder: PdxDecoder[List[Int]] = instance { (reader, fieldName) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m    Success(reader.readIntArray(fieldName.name).toList)[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit val intArrayDecoder: PdxDecoder[Array[Int]] = instance { (reader, fieldName) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m    Success(reader.readIntArray(fieldName.name))[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit val doubleDecoder: PdxDecoder[Double] = instance { (reader, fieldName) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m    Success(reader.readDouble(fieldName.name))[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit val doubleListDecoder: PdxDecoder[List[Double]] = instance { (reader, fieldName) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m    Success(reader.readDoubleArray(fieldName.name).toList)[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit val doubleArrayDecoder: PdxDecoder[Array[Double]] = instance { (reader, fieldName) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m    Success(reader.readDoubleArray(fieldName.name))[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit val floatDecoder: PdxDecoder[Float] = instance { (reader, fieldName) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m    Success(reader.readFloat(fieldName.name))[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit val floatListDecoder: PdxDecoder[List[Float]] = instance { (reader, fieldName) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m    Success(reader.readFloatArray(fieldName.name).toList)[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit val floatArrayDecoder: PdxDecoder[Array[Float]] = instance { (reader, fieldName) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m    Success(reader.readFloatArray(fieldName.name))[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit val longDecoder: PdxDecoder[Long] = instance { (reader, fieldName) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m    Success(reader.readLong(fieldName.name))[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit val longListDecoder: PdxDecoder[List[Long]] = instance { (reader, fieldName) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m    Success(reader.readLongArray(fieldName.name).toList)[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit val longArrayDecoder: PdxDecoder[Array[Long]] = instance { (reader, fieldName) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m    Success(reader.readLongArray(fieldName.name))[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit val charDecoder: PdxDecoder[Char] = instance {[0m
[0m[[0m[0mdebug[0m] [0m[0m    case (reader, fieldName) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m      Success(reader.readChar(fieldName.name))[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit val charListDecoder: PdxDecoder[List[Char]] = instance {[0m
[0m[[0m[0mdebug[0m] [0m[0m    case (reader, fieldName) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m      Success(reader.readCharArray(fieldName.name).toList)[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit val charArrayDecoder: PdxDecoder[Array[Char]] = instance {[0m
[0m[[0m[0mdebug[0m] [0m[0m    case (reader, fieldName) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m      Success(reader.readCharArray(fieldName.name))[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit val stringDecoder: PdxDecoder[String] = instance {[0m
[0m[[0m[0mdebug[0m] [0m[0m    case (reader, fieldName) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m      Success(reader.readString(fieldName.name))[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit val stringListDecoder: PdxDecoder[List[String]] = instance {[0m
[0m[[0m[0mdebug[0m] [0m[0m    case (reader, fieldName) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m      Success(reader.readStringArray(fieldName.name).toList)[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit val stringArrayDecoder: PdxDecoder[Array[String]] = instance {[0m
[0m[[0m[0mdebug[0m] [0m[0m    case (reader, fieldName) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m      Success(reader.readStringArray(fieldName.name))[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit val dategDecoder: PdxDecoder[Date] = instance {[0m
[0m[[0m[0mdebug[0m] [0m[0m    case (reader, fieldName) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m      Success(reader.readDate(fieldName.name))[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit val uuidDecoder: PdxDecoder[UUID] = instance {[0m
[0m[[0m[0mdebug[0m] [0m[0m    case (reader, fieldName) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m      Try(UUID.fromString(reader.readString(fieldName.name)))[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit def listDecoder[T <: AnyRef]: PdxDecoder[List[T]] = instance {[0m
[0m[[0m[0mdebug[0m] [0m[0m    case (reader, fieldName) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m      Try(reader.readObjectArray(fieldName.name).toList.asInstanceOf[List[T]])[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit def setDecoder[T <: AnyRef]: PdxDecoder[Set[T]] = instance {[0m
[0m[[0m[0mdebug[0m] [0m[0m    case (reader, fieldName) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m      Try(reader.readObjectArray(fieldName.name).toSet.asInstanceOf[Set[T]])[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit def hlistDecoder[K <: Symbol, H, T <: HList]([0m
[0m[[0m[0mdebug[0m] [0m[0m      implicit witness: Witness.Aux[K],[0m
[0m[[0m[0mdebug[0m] [0m[0m      hDecoder: Lazy[PdxDecoder[H]],[0m
[0m[[0m[0mdebug[0m] [0m[0m      tDecoder: Lazy[PdxDecoder[T]][0m
[0m[[0m[0mdebug[0m] [0m[0m  ): PdxDecoder[FieldType[K, H] :: T] = instance {[0m
[0m[[0m[0mdebug[0m] [0m[0m    case (reader, fieldName) => {[0m
[0m[[0m[0mdebug[0m] [0m[0m      val headField = hDecoder.value.decode(reader, witness.value)[0m
[0m[[0m[0mdebug[0m] [0m[0m      val tailFields = tDecoder.value.decode(reader, fieldName)[0m
[0m[[0m[0mdebug[0m] [0m[0m      (headField, tailFields) match {[0m
[0m[[0m[0mdebug[0m] [0m[0m        case (Success(h), Success(t)) => Success(field[K](h) :: t)[0m
[0m[[0m[0mdebug[0m] [0m[0m        case _ => Failure(null)[0m
[0m[[0m[0mdebug[0m] [0m[0m      }[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m    case e => Failure(null)[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit def objectDecoder[A, Repr <: HList]([0m
[0m[[0m[0mdebug[0m] [0m[0m      implicit gen: LabelledGeneric.Aux[A, Repr],[0m
[0m[[0m[0mdebug[0m] [0m[0m      hlistDecoder: PdxDecoder[Repr][0m
[0m[[0m[0mdebug[0m] [0m[0m  ): PdxDecoder[A] = instance { (reader, fieldName) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m    hlistDecoder.decode(reader, fieldName).map(gen.from)[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def apply[A](implicit ev: PdxDecoder[A]): PdxDecoder[A] = ev[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/geode/src/main/scala/akka/stream/alpakka/geode/impl/pdx/ShapelessPdxSerializer.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.geode.impl.pdx[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.util.Properties[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.annotation.InternalApi[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.apache.geode.cache.Declarable[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.apache.geode.pdx.{PdxReader, PdxSerializer, PdxWriter}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.reflect.ClassTag[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.util.Success[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m//#shapeless-pdx-serializer[0m
[0m[[0m[0mdebug[0m] [0m[0m@InternalApi[0m
[0m[[0m[0mdebug[0m] [0m[0mprivate[geode] class ShapelessPdxSerializer[A <: AnyRef](enc: PdxEncoder[A], dec: PdxDecoder[A])([0m
[0m[[0m[0mdebug[0m] [0m[0m    implicit tag: ClassTag[A][0m
[0m[[0m[0mdebug[0m] [0m[0m) extends PdxSerializer[0m
[0m[[0m[0mdebug[0m] [0m[0m    with Declarable {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  override def toData(o: scala.Any, out: PdxWriter): Boolean =[0m
[0m[[0m[0mdebug[0m] [0m[0m    tag.runtimeClass.isInstance(o) &&[0m
[0m[[0m[0mdebug[0m] [0m[0m    enc.encode(out, o.asInstanceOf[A])[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  override def fromData(clazz: Class[_], in: PdxReader): A =[0m
[0m[[0m[0mdebug[0m] [0m[0m    dec.decode(in, null) match {[0m
[0m[[0m[0mdebug[0m] [0m[0m      case Success(e) => e[0m
[0m[[0m[0mdebug[0m] [0m[0m      case _ => null.asInstanceOf[A][0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  override def init(props: Properties): Unit = {}[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m//#shapeless-pdx-serializer[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/geode/src/main/scala/akka/stream/alpakka/geode/impl/pdx/PdxEncoder.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.geode.impl.pdx[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.util.{Date, UUID}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.annotation.InternalApi[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.apache.geode.pdx.PdxWriter[0m
[0m[[0m[0mdebug[0m] [0m[0mimport shapeless.ops.hlist.IsHCons[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m@InternalApi[0m
[0m[[0m[0mdebug[0m] [0m[0mtrait PdxEncoder[A] {[0m
[0m[[0m[0mdebug[0m] [0m[0m  def encode(writer: PdxWriter, a: A, fieldName: Symbol = null): Boolean[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mobject PdxEncoder {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  import shapeless._[0m
[0m[[0m[0mdebug[0m] [0m[0m  import shapeless.labelled._[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private def instance[A](f: (PdxWriter, A, Symbol) => Boolean) =[0m
[0m[[0m[0mdebug[0m] [0m[0m    new PdxEncoder[A] {[0m
[0m[[0m[0mdebug[0m] [0m[0m      def encode(writer: PdxWriter, a: A, fieldName: Symbol = null): Boolean = f(writer, a, fieldName)[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit val hnilEncoder: PdxEncoder[HNil] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    instance[HNil] { case _ => true }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit def hlistEncoder[K <: Symbol, H, T <: shapeless.HList]([0m
[0m[[0m[0mdebug[0m] [0m[0m      implicit witness: Witness.Aux[K],[0m
[0m[[0m[0mdebug[0m] [0m[0m      isHCons: IsHCons.Aux[H :: T, H, T],[0m
[0m[[0m[0mdebug[0m] [0m[0m      hEncoder: Lazy[PdxEncoder[H]],[0m
[0m[[0m[0mdebug[0m] [0m[0m      tEncoder: Lazy[PdxEncoder[T]][0m
[0m[[0m[0mdebug[0m] [0m[0m  ): PdxEncoder[FieldType[K, H] :: T] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    instance[FieldType[K, H] :: T] {[0m
[0m[[0m[0mdebug[0m] [0m[0m      case (writer, o, fieldName) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m        hEncoder.value.encode(writer, isHCons.head(o), witness.value)[0m
[0m[[0m[0mdebug[0m] [0m[0m        tEncoder.value.encode(writer, isHCons.tail(o), fieldName)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit def objectEncoder[A, Repr <: HList]([0m
[0m[[0m[0mdebug[0m] [0m[0m      implicit gen: LabelledGeneric.Aux[A, Repr],[0m
[0m[[0m[0mdebug[0m] [0m[0m      hlistEncoder: Lazy[PdxEncoder[Repr]][0m
[0m[[0m[0mdebug[0m] [0m[0m  ): PdxEncoder[A] = instance {[0m
[0m[[0m[0mdebug[0m] [0m[0m    case (writer, o, fieldName) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m      hlistEncoder.value.encode(writer, gen.to(o), fieldName)[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def apply[A](implicit enc: PdxEncoder[A]): PdxEncoder[A] = enc[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit def booleanEncoder: PdxEncoder[Boolean] = instance {[0m
[0m[[0m[0mdebug[0m] [0m[0m    case (writer: PdxWriter, b: Boolean, fieldName: Symbol) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m      writer.writeBoolean(fieldName.name, b)[0m
[0m[[0m[0mdebug[0m] [0m[0m      true[0m
[0m[[0m[0mdebug[0m] [0m[0m    case _ => false[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit def booleanListEncoder: PdxEncoder[List[Boolean]] = instance {[0m
[0m[[0m[0mdebug[0m] [0m[0m    case (writer: PdxWriter, bs: List[Boolean], fieldName: Symbol) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m      writer.writeBooleanArray(fieldName.name, bs.toArray)[0m
[0m[[0m[0mdebug[0m] [0m[0m      true[0m
[0m[[0m[0mdebug[0m] [0m[0m    case _ => false[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit def booleanArrayEncoder: PdxEncoder[Array[Boolean]] = instance {[0m
[0m[[0m[0mdebug[0m] [0m[0m    case (writer: PdxWriter, bs: Array[Boolean], fieldName: Symbol) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m      writer.writeBooleanArray(fieldName.name, bs)[0m
[0m[[0m[0mdebug[0m] [0m[0m      true[0m
[0m[[0m[0mdebug[0m] [0m[0m    case _ => false[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit def intEncoder: PdxEncoder[Int] = instance {[0m
[0m[[0m[0mdebug[0m] [0m[0m    case (writer: PdxWriter, i: Int, fieldName: Symbol) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m      writer.writeInt(fieldName.name, i)[0m
[0m[[0m[0mdebug[0m] [0m[0m      true[0m
[0m[[0m[0mdebug[0m] [0m[0m    case _ => false[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit def intListEncoder: PdxEncoder[List[Int]] = instance {[0m
[0m[[0m[0mdebug[0m] [0m[0m    case (writer: PdxWriter, is: List[Int], fieldName: Symbol) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m      writer.writeIntArray(fieldName.name, is.toArray)[0m
[0m[[0m[0mdebug[0m] [0m[0m      true[0m
[0m[[0m[0mdebug[0m] [0m[0m    case _ => false[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit def intArrayEncoder: PdxEncoder[Array[Int]] = instance {[0m
[0m[[0m[0mdebug[0m] [0m[0m    case (writer: PdxWriter, is: Array[Int], fieldName: Symbol) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m      writer.writeIntArray(fieldName.name, is)[0m
[0m[[0m[0mdebug[0m] [0m[0m      true[0m
[0m[[0m[0mdebug[0m] [0m[0m    case _ => false[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit def doubleEncoder: PdxEncoder[Double] = instance {[0m
[0m[[0m[0mdebug[0m] [0m[0m    case (writer: PdxWriter, d: Double, fieldName: Symbol) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m      writer.writeDouble(fieldName.name, d)[0m
[0m[[0m[0mdebug[0m] [0m[0m      true[0m
[0m[[0m[0mdebug[0m] [0m[0m    case _ => false[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit def doubleListEncoder: PdxEncoder[List[Double]] = instance {[0m
[0m[[0m[0mdebug[0m] [0m[0m    case (writer: PdxWriter, ds: List[Double], fieldName: Symbol) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m      writer.writeDoubleArray(fieldName.name, ds.toArray)[0m
[0m[[0m[0mdebug[0m] [0m[0m      true[0m
[0m[[0m[0mdebug[0m] [0m[0m    case _ => false[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit def doubleArrayEncoder: PdxEncoder[Array[Double]] = instance {[0m
[0m[[0m[0mdebug[0m] [0m[0m    case (writer: PdxWriter, ds: Array[Double], fieldName: Symbol) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m      writer.writeDoubleArray(fieldName.name, ds)[0m
[0m[[0m[0mdebug[0m] [0m[0m      true[0m
[0m[[0m[0mdebug[0m] [0m[0m    case _ => false[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit def floatEncoder: PdxEncoder[Float] = instance {[0m
[0m[[0m[0mdebug[0m] [0m[0m    case (writer: PdxWriter, f: Float, fieldName: Symbol) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m      writer.writeFloat(fieldName.name, f)[0m
[0m[[0m[0mdebug[0m] [0m[0m      true[0m
[0m[[0m[0mdebug[0m] [0m[0m    case _ => false[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit def floatListEncoder: PdxEncoder[List[Float]] = instance {[0m
[0m[[0m[0mdebug[0m] [0m[0m    case (writer: PdxWriter, fs: List[Float], fieldName: Symbol) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m      writer.writeFloatArray(fieldName.name, fs.toArray)[0m
[0m[[0m[0mdebug[0m] [0m[0m      true[0m
[0m[[0m[0mdebug[0m] [0m[0m    case _ => false[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit def floatArrayEncoder: PdxEncoder[Array[Float]] = instance {[0m
[0m[[0m[0mdebug[0m] [0m[0m    case (writer: PdxWriter, fs: Array[Float], fieldName: Symbol) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m      writer.writeFloatArray(fieldName.name, fs)[0m
[0m[[0m[0mdebug[0m] [0m[0m      true[0m
[0m[[0m[0mdebug[0m] [0m[0m    case _ => false[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit def longEncoder: PdxEncoder[Long] = instance {[0m
[0m[[0m[0mdebug[0m] [0m[0m    case (writer: PdxWriter, l: Long, fieldName: Symbol) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m      writer.writeLong(fieldName.name, l)[0m
[0m[[0m[0mdebug[0m] [0m[0m      true[0m
[0m[[0m[0mdebug[0m] [0m[0m    case _ => false[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit def longListEncoder: PdxEncoder[List[Long]] = instance {[0m
[0m[[0m[0mdebug[0m] [0m[0m    case (writer: PdxWriter, ls: List[Long], fieldName: Symbol) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m      writer.writeLongArray(fieldName.name, ls.toArray)[0m
[0m[[0m[0mdebug[0m] [0m[0m      true[0m
[0m[[0m[0mdebug[0m] [0m[0m    case _ => false[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit def longArrayEncoder: PdxEncoder[Array[Long]] = instance {[0m
[0m[[0m[0mdebug[0m] [0m[0m    case (writer: PdxWriter, ls: Array[Long], fieldName: Symbol) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m      writer.writeLongArray(fieldName.name, ls)[0m
[0m[[0m[0mdebug[0m] [0m[0m      true[0m
[0m[[0m[0mdebug[0m] [0m[0m    case _ => false[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit def dateEncoder: PdxEncoder[Date] = instance {[0m
[0m[[0m[0mdebug[0m] [0m[0m    case (writer: PdxWriter, d: Date, fieldName: Symbol) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m      writer.writeDate(fieldName.name, d)[0m
[0m[[0m[0mdebug[0m] [0m[0m      true[0m
[0m[[0m[0mdebug[0m] [0m[0m    case _ => false[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit def charEncoder: PdxEncoder[Char] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    instance {[0m
[0m[[0m[0mdebug[0m] [0m[0m      case (writer: PdxWriter, c: Char, fieldName: Symbol) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m        writer.writeChar(fieldName.name, c)[0m
[0m[[0m[0mdebug[0m] [0m[0m        true[0m
[0m[[0m[0mdebug[0m] [0m[0m      case _ => false[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit def charListEncoder: PdxEncoder[List[Char]] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    instance {[0m
[0m[[0m[0mdebug[0m] [0m[0m      case (writer: PdxWriter, cs: List[Char], fieldName: Symbol) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m        writer.writeCharArray(fieldName.name, cs.toArray)[0m
[0m[[0m[0mdebug[0m] [0m[0m        true[0m
[0m[[0m[0mdebug[0m] [0m[0m      case _ => false[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit def charArrayEncoder: PdxEncoder[Array[Char]] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    instance {[0m
[0m[[0m[0mdebug[0m] [0m[0m      case (writer: PdxWriter, cs: Array[Char], fieldName: Symbol) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m        writer.writeCharArray(fieldName.name, cs)[0m
[0m[[0m[0mdebug[0m] [0m[0m        true[0m
[0m[[0m[0mdebug[0m] [0m[0m      case _ => false[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit def stringEncoder: PdxEncoder[String] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    instance {[0m
[0m[[0m[0mdebug[0m] [0m[0m      case (writer: PdxWriter, str: String, fieldName: Symbol) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m        writer.writeString(fieldName.name, str)[0m
[0m[[0m[0mdebug[0m] [0m[0m        true[0m
[0m[[0m[0mdebug[0m] [0m[0m      case _ => false[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit def stringListEncoder: PdxEncoder[List[String]] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    instance {[0m
[0m[[0m[0mdebug[0m] [0m[0m      case (writer: PdxWriter, strs: List[String], fieldName: Symbol) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m        writer.writeStringArray(fieldName.name, strs.toArray)[0m
[0m[[0m[0mdebug[0m] [0m[0m        true[0m
[0m[[0m[0mdebug[0m] [0m[0m      case _ => false[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit def stringArrayEncoder: PdxEncoder[Array[String]] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    instance {[0m
[0m[[0m[0mdebug[0m] [0m[0m      case (writer: PdxWriter, strs: Array[String], fieldName: Symbol) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m        writer.writeStringArray(fieldName.name, strs)[0m
[0m[[0m[0mdebug[0m] [0m[0m        true[0m
[0m[[0m[0mdebug[0m] [0m[0m      case _ => false[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit def uuidEncoder: PdxEncoder[UUID] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    instance {[0m
[0m[[0m[0mdebug[0m] [0m[0m      case (writer: PdxWriter, uuid: UUID, fieldName: Symbol) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m        writer.writeString(fieldName.name, uuid.toString)[0m
[0m[[0m[0mdebug[0m] [0m[0m        true[0m
[0m[[0m[0mdebug[0m] [0m[0m      case _ => false[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit def listEncoder[T <: AnyRef]: PdxEncoder[List[T]] = instance {[0m
[0m[[0m[0mdebug[0m] [0m[0m    case (writer: PdxWriter, list: List[T], fieldName: Symbol) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m      writer.writeObjectArray(fieldName.name, list.toArray)[0m
[0m[[0m[0mdebug[0m] [0m[0m      true[0m
[0m[[0m[0mdebug[0m] [0m[0m    case _ => false[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit def setEncoder[T <: AnyRef]: PdxEncoder[Set[T]] = instance {[0m
[0m[[0m[0mdebug[0m] [0m[0m    case (writer: PdxWriter, set: Set[T], fieldName: Symbol) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m      writer.writeObjectArray(fieldName.name, set.toArray)[0m
[0m[[0m[0mdebug[0m] [0m[0m      true[0m
[0m[[0m[0mdebug[0m] [0m[0m    case _ => false[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/geode/src/main/scala-2.12+/akka/stream/alpakka/geode/GeodeSettings.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.geode[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.apache.geode.cache.client.ClientCacheFactory[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m/**[0m
[0m[[0m[0mdebug[0m] [0m[0m * General settings to connect to Apache Geode.[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0mfinal class GeodeSettings private (val hostname: String,[0m
[0m[[0m[0mdebug[0m] [0m[0m                                   val port: Int = 10334,[0m
[0m[[0m[0mdebug[0m] [0m[0m                                   val configure: Option[ClientCacheFactory => ClientCacheFactory] = None,[0m
[0m[[0m[0mdebug[0m] [0m[0m                                   val pdxCompat: (Class[_], Class[_]) => Boolean = (c1, c2) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m                                     c1.getSimpleName equals c2.getSimpleName) {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private def copy(hostname: String = hostname,[0m
[0m[[0m[0mdebug[0m] [0m[0m                   port: Int = port,[0m
[0m[[0m[0mdebug[0m] [0m[0m                   configure: Option[ClientCacheFactory => ClientCacheFactory] = configure,[0m
[0m[[0m[0mdebug[0m] [0m[0m                   pdxCompat: (Class[_], Class[_]) => Boolean = pdxCompat) =[0m
[0m[[0m[0mdebug[0m] [0m[0m    new GeodeSettings(hostname, port, configure, pdxCompat)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * @param configure function to configure geode client factory[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def withConfiguration(configure: ClientCacheFactory => ClientCacheFactory): GeodeSettings =[0m
[0m[[0m[0mdebug[0m] [0m[0m    copy(configure = Some(configure))[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * @param pdxCompat a function that determines if two class are equivalent (java class / scala case class)[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def withPdxCompat(pdxCompat: (Class[_], Class[_]) => Boolean): GeodeSettings = copy(pdxCompat = pdxCompat)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  override def toString: String =[0m
[0m[[0m[0mdebug[0m] [0m[0m    "GeodeSettings(" +[0m
[0m[[0m[0mdebug[0m] [0m[0m    s"hostname=$hostname," +[0m
[0m[[0m[0mdebug[0m] [0m[0m    s"port=$port," +[0m
[0m[[0m[0mdebug[0m] [0m[0m    s"configuration=${configure.isDefined}" +[0m
[0m[[0m[0mdebug[0m] [0m[0m    ")"[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mobject GeodeSettings {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def apply(hostname: String, port: Int = 10334): GeodeSettings = new GeodeSettings(hostname, port)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def create(hostname: String): GeodeSettings = new GeodeSettings(hostname)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def create(hostname: String, port: Int): GeodeSettings = new GeodeSettings(hostname, port)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mfinal class RegionSettings[K, V] private (val name: String, val keyExtractor: V => K) {[0m
[0m[[0m[0mdebug[0m] [0m[0m  override def toString: String =[0m
[0m[[0m[0mdebug[0m] [0m[0m    "RegionSettings(" +[0m
[0m[[0m[0mdebug[0m] [0m[0m    s"name=$name" +[0m
[0m[[0m[0mdebug[0m] [0m[0m    ")"[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mobject RegionSettings {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def apply[K, V](name: String, keyExtractor: V => K): RegionSettings[K, V] = new RegionSettings(name, keyExtractor)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def create[K, V](name: String, keyExtractor: V => K): RegionSettings[K, V] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    new RegionSettings(name, keyExtractor)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/geode/src/main/java/akka/stream/alpakka/geode/javadsl/GeodeWithPoolSubscription.java[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.geode.javadsl;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.Done;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.geode.AkkaPdxSerializer;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.geode.GeodeSettings;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.geode.impl.stage.GeodeContinuousSourceStage;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.javadsl.Source;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.apache.geode.cache.client.ClientCacheFactory;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.apache.geode.cache.query.CqException;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.apache.geode.cache.query.CqQuery;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.apache.geode.cache.query.QueryService;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.compat.java8.FutureConverters;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.util.concurrent.CompletionStage;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m/** Java API: Geode client with server event subscription. Can build continuous sources. */[0m
[0m[[0m[0mdebug[0m] [0m[0mpublic class GeodeWithPoolSubscription extends Geode {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Subscribes to server events.[0m
[0m[[0m[0mdebug[0m] [0m[0m   *[0m
[0m[[0m[0mdebug[0m] [0m[0m   * @return ClientCacheFactory with server event subscription.[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  public final ClientCacheFactory configure(ClientCacheFactory factory) {[0m
[0m[[0m[0mdebug[0m] [0m[0m    return super.configure(factory).setPoolSubscriptionEnabled(true);[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  public GeodeWithPoolSubscription(GeodeSettings settings) {[0m
[0m[[0m[0mdebug[0m] [0m[0m    super(settings);[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  public <V> Source<V, CompletionStage<Done>> continuousQuery([0m
[0m[[0m[0mdebug[0m] [0m[0m      String queryName, String query, AkkaPdxSerializer<V> serializer) {[0m
[0m[[0m[0mdebug[0m] [0m[0m    registerPDXSerializer(serializer, serializer.clazz());[0m
[0m[[0m[0mdebug[0m] [0m[0m    return Source.fromGraph(new GeodeContinuousSourceStage<V>(cache(), queryName, query))[0m
[0m[[0m[0mdebug[0m] [0m[0m        .mapMaterializedValue(FutureConverters::<Done>toJava);[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  public boolean closeContinuousQuery(String name) throws CqException {[0m
[0m[[0m[0mdebug[0m] [0m[0m    QueryService qs = cache().getQueryService();[0m
[0m[[0m[0mdebug[0m] [0m[0m    CqQuery query = qs.getCq(name);[0m
[0m[[0m[0mdebug[0m] [0m[0m    if (query == null) return false;[0m
[0m[[0m[0mdebug[0m] [0m[0m    query.close();[0m
[0m[[0m[0mdebug[0m] [0m[0m    return true;[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/geode/src/main/java/akka/stream/alpakka/geode/javadsl/Geode.java[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.geode.javadsl;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.Done;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.NotUsed;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.geode.AkkaPdxSerializer;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.geode.GeodeSettings;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.geode.RegionSettings;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.geode.impl.GeodeCache;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.geode.impl.stage.GeodeFiniteSourceStage;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.geode.impl.stage.GeodeFlowStage;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.javadsl.Flow;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.javadsl.Keep;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.javadsl.Sink;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.javadsl.Source;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.apache.geode.cache.client.ClientCacheFactory;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.compat.java8.FutureConverters;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.util.concurrent.CompletionStage;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m/** Java API: Geode client without server event subscription. */[0m
[0m[[0m[0mdebug[0m] [0m[0mpublic class Geode extends GeodeCache {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  final GeodeSettings geodeSettings;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  public Geode(GeodeSettings settings) {[0m
[0m[[0m[0mdebug[0m] [0m[0m    super(settings);[0m
[0m[[0m[0mdebug[0m] [0m[0m    this.geodeSettings = settings;[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  @Override[0m
[0m[[0m[0mdebug[0m] [0m[0m  public ClientCacheFactory configure(ClientCacheFactory factory) {[0m
[0m[[0m[0mdebug[0m] [0m[0m    return factory.addPoolLocator(geodeSettings.hostname(), geodeSettings.port());[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  public <V> Source<V, CompletionStage<Done>> query(String query, AkkaPdxSerializer<V> serializer) {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    registerPDXSerializer(serializer, serializer.clazz());[0m
[0m[[0m[0mdebug[0m] [0m[0m    return Source.fromGraph(new GeodeFiniteSourceStage<V>(cache(), query))[0m
[0m[[0m[0mdebug[0m] [0m[0m        .mapMaterializedValue(FutureConverters::<Done>toJava);[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  public <K, V> Flow<V, V, NotUsed> flow([0m
[0m[[0m[0mdebug[0m] [0m[0m      RegionSettings<K, V> regionSettings, AkkaPdxSerializer<V> serializer) {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    registerPDXSerializer(serializer, serializer.clazz());[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    return Flow.fromGraph(new GeodeFlowStage<K, V>(cache(), regionSettings));[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  public <K, V> Sink<V, CompletionStage<Done>> sink([0m
[0m[[0m[0mdebug[0m] [0m[0m      RegionSettings<K, V> regionSettings, AkkaPdxSerializer<V> serializer) {[0m
[0m[[0m[0mdebug[0m] [0m[0m    return flow(regionSettings, serializer).toMat(Sink.ignore(), Keep.right());[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  public void close() {[0m
[0m[[0m[0mdebug[0m] [0m[0m    close(false);[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
