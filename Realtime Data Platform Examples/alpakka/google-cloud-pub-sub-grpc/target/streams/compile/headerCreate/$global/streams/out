[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/google-cloud-pub-sub-grpc/src/main/scala/akka/stream/alpakka/googlecloud/pubsub/grpc/javadsl/PubSubAttributes.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.googlecloud.pubsub.grpc.javadsl[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.annotation.InternalApi[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.Attributes[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.Attributes.Attribute[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m/**[0m
[0m[[0m[0mdebug[0m] [0m[0m * Akka Stream attributes that are used when materializing PubSub stream blueprints.[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0mobject PubSubAttributes {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * gRPC publisher to use for the stream[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def publisher(publisher: GrpcPublisher): Attributes = Attributes(new Publisher(publisher))[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  final class Publisher @InternalApi private[PubSubAttributes] (val publisher: GrpcPublisher) extends Attribute[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * gRPC subscriber to use for the stream[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def subscriber(subscriber: GrpcSubscriber): Attributes = Attributes(new Subscriber(subscriber))[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  final class Subscriber @InternalApi private[PubSubAttributes] (val subscriber: GrpcSubscriber) extends Attribute[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/google-cloud-pub-sub-grpc/src/main/scala/akka/stream/alpakka/googlecloud/pubsub/grpc/javadsl/GrpcSubscriber.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.googlecloud.pubsub.grpc.javadsl[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.actor.{ActorSystem, ExtendedActorSystem, Extension, ExtensionId, ExtensionIdProvider}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.annotation.ApiMayChange[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.googlecloud.pubsub.grpc.PubSubSettings[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.googlecloud.pubsub.grpc.impl.AkkaGrpcSettings[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.{ActorMaterializer, Materializer}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport com.google.pubsub.v1.{SubscriberClient => JavaSubscriberClient}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m/**[0m
[0m[[0m[0mdebug[0m] [0m[0m * Holds the gRPC java subscriber client instance.[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0mfinal class GrpcSubscriber private (settings: PubSubSettings, sys: ActorSystem, mat: Materializer) {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  @ApiMayChange[0m
[0m[[0m[0mdebug[0m] [0m[0m  final val client =[0m
[0m[[0m[0mdebug[0m] [0m[0m    JavaSubscriberClient.create(AkkaGrpcSettings.fromPubSubSettings(settings)(sys), mat, sys.dispatcher)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  sys.registerOnTermination(client.close())[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mobject GrpcSubscriber {[0m
[0m[[0m[0mdebug[0m] [0m[0m  def create(settings: PubSubSettings, sys: ActorSystem, mat: Materializer): GrpcSubscriber =[0m
[0m[[0m[0mdebug[0m] [0m[0m    new GrpcSubscriber(settings, sys, mat)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def create(sys: ActorSystem, mat: Materializer): GrpcSubscriber =[0m
[0m[[0m[0mdebug[0m] [0m[0m    create(PubSubSettings(sys), sys, mat)[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m/**[0m
[0m[[0m[0mdebug[0m] [0m[0m * An extension that manages a single gRPC java subscriber client per actor system.[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0mfinal class GrpcSubscriberExt private (sys: ExtendedActorSystem) extends Extension {[0m
[0m[[0m[0mdebug[0m] [0m[0m  private[this] val systemMaterializer = ActorMaterializer()(sys)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit val subscriber = GrpcSubscriber.create(sys, systemMaterializer)[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mobject GrpcSubscriberExt extends ExtensionId[GrpcSubscriberExt] with ExtensionIdProvider {[0m
[0m[[0m[0mdebug[0m] [0m[0m  override def lookup = GrpcSubscriberExt[0m
[0m[[0m[0mdebug[0m] [0m[0m  override def createExtension(system: ExtendedActorSystem) = new GrpcSubscriberExt(system)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Access to extension.[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def apply()(implicit system: ActorSystem): GrpcSubscriberExt = super.apply(system)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Java API[0m
[0m[[0m[0mdebug[0m] [0m[0m   *[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Access to extension.[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  override def get(system: ActorSystem): GrpcSubscriberExt = super.get(system)[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/google-cloud-pub-sub-grpc/src/main/scala/akka/stream/alpakka/googlecloud/pubsub/grpc/javadsl/GooglePubSub.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.googlecloud.pubsub.grpc.javadsl[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.time.Duration[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.util.concurrent.{CompletableFuture, CompletionStage}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.actor.Cancellable[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.dispatch.ExecutionContexts[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.googlecloud.pubsub.grpc.impl.Setup[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.{ActorMaterializer, Attributes}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.javadsl.{Flow, Keep, Sink, Source}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.{Done, NotUsed}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport com.google.pubsub.v1._[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.compat.java8.FutureConverters._[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.concurrent.Future[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m/**[0m
[0m[[0m[0mdebug[0m] [0m[0m * Google Pub/Sub Akka Stream operator factory.[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0mobject GooglePubSub {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Create a flow to publish messages to Google Cloud Pub/Sub. The flow emits responses that contain published[0m
[0m[[0m[0mdebug[0m] [0m[0m   * message ids.[0m
[0m[[0m[0mdebug[0m] [0m[0m   *[0m
[0m[[0m[0mdebug[0m] [0m[0m   * @param parallelism controls how many messages can be in-flight at any given time[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def publish(parallelism: Int): Flow[PublishRequest, PublishResponse, NotUsed] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    Setup[0m
[0m[[0m[0mdebug[0m] [0m[0m      .createFlow { implicit mat => implicit attr =>[0m
[0m[[0m[0mdebug[0m] [0m[0m        Flow[0m
[0m[[0m[0mdebug[0m] [0m[0m          .create[PublishRequest][0m
[0m[[0m[0mdebug[0m] [0m[0m          .mapAsyncUnordered(parallelism, javaFunction(publisher().client.publish))[0m
[0m[[0m[0mdebug[0m] [0m[0m      }[0m
[0m[[0m[0mdebug[0m] [0m[0m      .mapMaterializedValue(javaFunction(_ => NotUsed))[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Create a source that emits messages for a given subscription.[0m
[0m[[0m[0mdebug[0m] [0m[0m   *[0m
[0m[[0m[0mdebug[0m] [0m[0m   * The materialized value can be used to cancel the source.[0m
[0m[[0m[0mdebug[0m] [0m[0m   *[0m
[0m[[0m[0mdebug[0m] [0m[0m   * @param request the subscription FQRS and ack deadline fields are mandatory for the request[0m
[0m[[0m[0mdebug[0m] [0m[0m   * @param pollInterval time between StreamingPullRequest messages are being sent[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def subscribe(request: StreamingPullRequest,[0m
[0m[[0m[0mdebug[0m] [0m[0m                pollInterval: Duration): Source[ReceivedMessage, CompletableFuture[Cancellable]] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    Setup[0m
[0m[[0m[0mdebug[0m] [0m[0m      .createSource { implicit mat => implicit attr =>[0m
[0m[[0m[0mdebug[0m] [0m[0m        val cancellable = new CompletableFuture[Cancellable]()[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m        val subsequentRequest = request.toBuilder[0m
[0m[[0m[0mdebug[0m] [0m[0m          .setSubscription("")[0m
[0m[[0m[0mdebug[0m] [0m[0m          .setStreamAckDeadlineSeconds(0)[0m
[0m[[0m[0mdebug[0m] [0m[0m          .build()[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m        subscriber().client[0m
[0m[[0m[0mdebug[0m] [0m[0m          .streamingPull([0m
[0m[[0m[0mdebug[0m] [0m[0m            Source[0m
[0m[[0m[0mdebug[0m] [0m[0m              .single(request)[0m
[0m[[0m[0mdebug[0m] [0m[0m              .concat([0m
[0m[[0m[0mdebug[0m] [0m[0m                Source[0m
[0m[[0m[0mdebug[0m] [0m[0m                  .tick(pollInterval, pollInterval, subsequentRequest)[0m
[0m[[0m[0mdebug[0m] [0m[0m                  .mapMaterializedValue(javaFunction(cancellable.complete))[0m
[0m[[0m[0mdebug[0m] [0m[0m              )[0m
[0m[[0m[0mdebug[0m] [0m[0m          )[0m
[0m[[0m[0mdebug[0m] [0m[0m          .mapConcat(javaFunction(_.getReceivedMessagesList))[0m
[0m[[0m[0mdebug[0m] [0m[0m          .mapMaterializedValue(javaFunction(_ => cancellable))[0m
[0m[[0m[0mdebug[0m] [0m[0m      }[0m
[0m[[0m[0mdebug[0m] [0m[0m      .mapMaterializedValue(javaFunction(flattenFutureCs))[0m
[0m[[0m[0mdebug[0m] [0m[0m      .mapMaterializedValue(javaFunction(_.toCompletableFuture))[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Create a sink that accepts consumed message acknowledgements.[0m
[0m[[0m[0mdebug[0m] [0m[0m   *[0m
[0m[[0m[0mdebug[0m] [0m[0m   * The materialized value completes on stream completion.[0m
[0m[[0m[0mdebug[0m] [0m[0m   *[0m
[0m[[0m[0mdebug[0m] [0m[0m   * @param parallelism controls how many acknowledgements can be in-flight at any given time[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def acknowledge(parallelism: Int): Sink[AcknowledgeRequest, CompletionStage[Done]] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    Setup[0m
[0m[[0m[0mdebug[0m] [0m[0m      .createSink { implicit mat => implicit attr =>[0m
[0m[[0m[0mdebug[0m] [0m[0m        Flow[0m
[0m[[0m[0mdebug[0m] [0m[0m          .create[AcknowledgeRequest][0m
[0m[[0m[0mdebug[0m] [0m[0m          .mapAsyncUnordered(parallelism, javaFunction(subscriber().client.acknowledge))[0m
[0m[[0m[0mdebug[0m] [0m[0m          .toMat(Sink.ignore(), Keep.right[NotUsed, CompletionStage[Done]])[0m
[0m[[0m[0mdebug[0m] [0m[0m      }[0m
[0m[[0m[0mdebug[0m] [0m[0m      .mapMaterializedValue(javaFunction(flattenFutureCs))[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Helper for creating akka.japi.function.Function instances from Scala[0m
[0m[[0m[0mdebug[0m] [0m[0m   * functions as Scala 2.11 does not know about SAMs.[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  private def javaFunction[A, B](f: A => B): akka.japi.function.Function[A, B] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    new akka.japi.function.Function[A, B]() {[0m
[0m[[0m[0mdebug[0m] [0m[0m      override def apply(a: A): B = f(a)[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private def flattenFutureCs[T](f: Future[CompletionStage[T]]): CompletionStage[T] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    f.map(_.toScala)(ExecutionContexts.sameThreadExecutionContext)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .flatMap(identity)(ExecutionContexts.sameThreadExecutionContext)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .toJava[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private def publisher()(implicit mat: ActorMaterializer, attr: Attributes) =[0m
[0m[[0m[0mdebug[0m] [0m[0m    attr[0m
[0m[[0m[0mdebug[0m] [0m[0m      .get[PubSubAttributes.Publisher][0m
[0m[[0m[0mdebug[0m] [0m[0m      .map(_.publisher)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .getOrElse(GrpcPublisherExt()(mat.system).publisher)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private def subscriber()(implicit mat: ActorMaterializer, attr: Attributes) =[0m
[0m[[0m[0mdebug[0m] [0m[0m    attr[0m
[0m[[0m[0mdebug[0m] [0m[0m      .get[PubSubAttributes.Subscriber][0m
[0m[[0m[0mdebug[0m] [0m[0m      .map(_.subscriber)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .getOrElse(GrpcSubscriberExt()(mat.system).subscriber)[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/google-cloud-pub-sub-grpc/src/main/scala/akka/stream/alpakka/googlecloud/pubsub/grpc/javadsl/GrpcPublisher.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.googlecloud.pubsub.grpc.javadsl[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.actor.{ActorSystem, ExtendedActorSystem, Extension, ExtensionId, ExtensionIdProvider}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.annotation.ApiMayChange[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.googlecloud.pubsub.grpc.PubSubSettings[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.googlecloud.pubsub.grpc.impl.AkkaGrpcSettings[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.{ActorMaterializer, Materializer}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport com.google.pubsub.v1.{PublisherClient => JavaPublisherClient}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m/**[0m
[0m[[0m[0mdebug[0m] [0m[0m * Holds the gRPC java publisher client instance.[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0mfinal class GrpcPublisher private (settings: PubSubSettings, sys: ActorSystem, mat: Materializer) {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  @ApiMayChange[0m
[0m[[0m[0mdebug[0m] [0m[0m  final val client =[0m
[0m[[0m[0mdebug[0m] [0m[0m    JavaPublisherClient.create(AkkaGrpcSettings.fromPubSubSettings(settings)(sys), mat, sys.dispatcher)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  sys.registerOnTermination(client.close())[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mobject GrpcPublisher {[0m
[0m[[0m[0mdebug[0m] [0m[0m  def create(settings: PubSubSettings, sys: ActorSystem, mat: Materializer): GrpcPublisher =[0m
[0m[[0m[0mdebug[0m] [0m[0m    new GrpcPublisher(settings, sys, mat)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def create(sys: ActorSystem, mat: Materializer): GrpcPublisher =[0m
[0m[[0m[0mdebug[0m] [0m[0m    create(PubSubSettings(sys), sys, mat)[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m/**[0m
[0m[[0m[0mdebug[0m] [0m[0m * An extension that manages a single gRPC java publisher client per actor system.[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0mfinal class GrpcPublisherExt private (sys: ExtendedActorSystem) extends Extension {[0m
[0m[[0m[0mdebug[0m] [0m[0m  private[this] val systemMaterializer = ActorMaterializer()(sys)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit val publisher = GrpcPublisher.create(sys, systemMaterializer)[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mobject GrpcPublisherExt extends ExtensionId[GrpcPublisherExt] with ExtensionIdProvider {[0m
[0m[[0m[0mdebug[0m] [0m[0m  override def lookup = GrpcPublisherExt[0m
[0m[[0m[0mdebug[0m] [0m[0m  override def createExtension(system: ExtendedActorSystem) = new GrpcPublisherExt(system)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Access to extension.[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def apply()(implicit system: ActorSystem): GrpcPublisherExt = super.apply(system)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Java API[0m
[0m[[0m[0mdebug[0m] [0m[0m   *[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Access to extension.[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  override def get(system: ActorSystem): GrpcPublisherExt = super.get(system)[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/google-cloud-pub-sub-grpc/src/main/scala/akka/stream/alpakka/googlecloud/pubsub/grpc/scaladsl/PubSubAttributes.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.googlecloud.pubsub.grpc.scaladsl[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.annotation.InternalApi[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.Attributes[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.Attributes.Attribute[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m/**[0m
[0m[[0m[0mdebug[0m] [0m[0m * Akka Stream attributes that are used when materializing PubSub stream blueprints.[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0mobject PubSubAttributes {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * gRPC publisher to use for the stream[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def publisher(publisher: GrpcPublisher): Attributes = Attributes(new Publisher(publisher))[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  final class Publisher @InternalApi private[PubSubAttributes] (val publisher: GrpcPublisher) extends Attribute[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * gRPC subscriber to use for the stream[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def subscriber(subscriber: GrpcSubscriber): Attributes = Attributes(new Subscriber(subscriber))[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  final class Subscriber @InternalApi private[PubSubAttributes] (val subscriber: GrpcSubscriber) extends Attribute[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/google-cloud-pub-sub-grpc/src/main/scala/akka/stream/alpakka/googlecloud/pubsub/grpc/scaladsl/GrpcSubscriber.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.googlecloud.pubsub.grpc.scaladsl[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.actor.{ActorSystem, ExtendedActorSystem, Extension, ExtensionId, ExtensionIdProvider}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.annotation.ApiMayChange[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.googlecloud.pubsub.grpc.PubSubSettings[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.googlecloud.pubsub.grpc.impl.AkkaGrpcSettings[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.{ActorMaterializer, Materializer}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport com.google.pubsub.v1.pubsub.{SubscriberClient => ScalaSubscriberClient}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m/**[0m
[0m[[0m[0mdebug[0m] [0m[0m * Holds the gRPC scala subscriber client instance.[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0mfinal class GrpcSubscriber private (settings: PubSubSettings, sys: ActorSystem, mat: Materializer) {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  @ApiMayChange[0m
[0m[[0m[0mdebug[0m] [0m[0m  final val client =[0m
[0m[[0m[0mdebug[0m] [0m[0m    ScalaSubscriberClient(AkkaGrpcSettings.fromPubSubSettings(settings)(sys))(mat, sys.dispatcher)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  sys.registerOnTermination(client.close())[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mobject GrpcSubscriber {[0m
[0m[[0m[0mdebug[0m] [0m[0m  def apply(settings: PubSubSettings)(implicit sys: ActorSystem, mat: Materializer): GrpcSubscriber =[0m
[0m[[0m[0mdebug[0m] [0m[0m    new GrpcSubscriber(settings, sys, mat)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def apply()(implicit sys: ActorSystem, mat: Materializer): GrpcSubscriber =[0m
[0m[[0m[0mdebug[0m] [0m[0m    apply(PubSubSettings(sys))[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m/**[0m
[0m[[0m[0mdebug[0m] [0m[0m * An extension that manages a single gRPC scala subscriber client per actor system.[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0mfinal class GrpcSubscriberExt private (sys: ExtendedActorSystem) extends Extension {[0m
[0m[[0m[0mdebug[0m] [0m[0m  private[this] val systemMaterializer = ActorMaterializer()(sys)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit val subscriber = GrpcSubscriber()(sys, systemMaterializer)[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mobject GrpcSubscriberExt extends ExtensionId[GrpcSubscriberExt] with ExtensionIdProvider {[0m
[0m[[0m[0mdebug[0m] [0m[0m  override def lookup = GrpcSubscriberExt[0m
[0m[[0m[0mdebug[0m] [0m[0m  override def createExtension(system: ExtendedActorSystem) = new GrpcSubscriberExt(system)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Access to extension.[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def apply()(implicit system: ActorSystem): GrpcSubscriberExt = super.apply(system)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Java API[0m
[0m[[0m[0mdebug[0m] [0m[0m   *[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Access to extension.[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  override def get(system: ActorSystem): GrpcSubscriberExt = super.get(system)[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/google-cloud-pub-sub-grpc/src/main/scala/akka/stream/alpakka/googlecloud/pubsub/grpc/scaladsl/GooglePubSub.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.googlecloud.pubsub.grpc.scaladsl[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.actor.Cancellable[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.dispatch.ExecutionContexts[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.{ActorMaterializer, Attributes}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.googlecloud.pubsub.grpc.impl.Setup[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.scaladsl.{Flow, Keep, Sink, Source}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.{Done, NotUsed}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport com.google.pubsub.v1.pubsub._[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.concurrent.duration._[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.concurrent.{Future, Promise}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m/**[0m
[0m[[0m[0mdebug[0m] [0m[0m * Google Pub/Sub Akka Stream operator factory.[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0mobject GooglePubSub {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Create a flow to publish messages to Google Cloud Pub/Sub. The flow emits responses that contain published[0m
[0m[[0m[0mdebug[0m] [0m[0m   * message ids.[0m
[0m[[0m[0mdebug[0m] [0m[0m   *[0m
[0m[[0m[0mdebug[0m] [0m[0m   * @param parallelism controls how many messages can be in-flight at any given time[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def publish(parallelism: Int): Flow[PublishRequest, PublishResponse, NotUsed] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    Setup[0m
[0m[[0m[0mdebug[0m] [0m[0m      .flow { implicit mat => implicit attr =>[0m
[0m[[0m[0mdebug[0m] [0m[0m        Flow[PublishRequest][0m
[0m[[0m[0mdebug[0m] [0m[0m          .mapAsyncUnordered(parallelism)(publisher().client.publish)[0m
[0m[[0m[0mdebug[0m] [0m[0m      }[0m
[0m[[0m[0mdebug[0m] [0m[0m      .mapMaterializedValue(_ => NotUsed)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Create a source that emits messages for a given subscription.[0m
[0m[[0m[0mdebug[0m] [0m[0m   *[0m
[0m[[0m[0mdebug[0m] [0m[0m   * The materialized value can be used to cancel the source.[0m
[0m[[0m[0mdebug[0m] [0m[0m   *[0m
[0m[[0m[0mdebug[0m] [0m[0m   * @param request the subscription FQRS and ack deadline fields are mandatory for the request[0m
[0m[[0m[0mdebug[0m] [0m[0m   * @param pollInterval time between StreamingPullRequest messages are being sent[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def subscribe([0m
[0m[[0m[0mdebug[0m] [0m[0m      request: StreamingPullRequest,[0m
[0m[[0m[0mdebug[0m] [0m[0m      pollInterval: FiniteDuration[0m
[0m[[0m[0mdebug[0m] [0m[0m  ): Source[ReceivedMessage, Future[Cancellable]] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    Setup[0m
[0m[[0m[0mdebug[0m] [0m[0m      .source { implicit mat => implicit attr =>[0m
[0m[[0m[0mdebug[0m] [0m[0m        val cancellable = Promise[Cancellable][0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m        val subsequentRequest = request[0m
[0m[[0m[0mdebug[0m] [0m[0m          .withSubscription("")[0m
[0m[[0m[0mdebug[0m] [0m[0m          .withStreamAckDeadlineSeconds(0)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m        subscriber().client[0m
[0m[[0m[0mdebug[0m] [0m[0m          .streamingPull([0m
[0m[[0m[0mdebug[0m] [0m[0m            Source[0m
[0m[[0m[0mdebug[0m] [0m[0m              .single(request)[0m
[0m[[0m[0mdebug[0m] [0m[0m              .concat([0m
[0m[[0m[0mdebug[0m] [0m[0m                Source[0m
[0m[[0m[0mdebug[0m] [0m[0m                  .tick(0.seconds, pollInterval, ())[0m
[0m[[0m[0mdebug[0m] [0m[0m                  .map(_ => subsequentRequest)[0m
[0m[[0m[0mdebug[0m] [0m[0m                  .mapMaterializedValue(cancellable.success)[0m
[0m[[0m[0mdebug[0m] [0m[0m              )[0m
[0m[[0m[0mdebug[0m] [0m[0m          )[0m
[0m[[0m[0mdebug[0m] [0m[0m          .mapConcat(_.receivedMessages.toVector)[0m
[0m[[0m[0mdebug[0m] [0m[0m          .mapMaterializedValue(_ => cancellable.future)[0m
[0m[[0m[0mdebug[0m] [0m[0m      }[0m
[0m[[0m[0mdebug[0m] [0m[0m      .mapMaterializedValue(_.flatMap(identity)(ExecutionContexts.sameThreadExecutionContext))[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Create a sink that accepts consumed message acknowledgements.[0m
[0m[[0m[0mdebug[0m] [0m[0m   *[0m
[0m[[0m[0mdebug[0m] [0m[0m   * The materialized value completes on stream completion.[0m
[0m[[0m[0mdebug[0m] [0m[0m   *[0m
[0m[[0m[0mdebug[0m] [0m[0m   * @param parallelism controls how many acknowledgements can be in-flight at any given time[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def acknowledge(parallelism: Int): Sink[AcknowledgeRequest, Future[Done]] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    Setup[0m
[0m[[0m[0mdebug[0m] [0m[0m      .sink { implicit mat => implicit attr =>[0m
[0m[[0m[0mdebug[0m] [0m[0m        Flow[AcknowledgeRequest][0m
[0m[[0m[0mdebug[0m] [0m[0m          .mapAsyncUnordered(parallelism)(subscriber().client.acknowledge)[0m
[0m[[0m[0mdebug[0m] [0m[0m          .toMat(Sink.ignore)(Keep.right)[0m
[0m[[0m[0mdebug[0m] [0m[0m      }[0m
[0m[[0m[0mdebug[0m] [0m[0m      .mapMaterializedValue(_.flatMap(identity)(ExecutionContexts.sameThreadExecutionContext))[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private def publisher()(implicit mat: ActorMaterializer, attr: Attributes) =[0m
[0m[[0m[0mdebug[0m] [0m[0m    attr[0m
[0m[[0m[0mdebug[0m] [0m[0m      .get[PubSubAttributes.Publisher][0m
[0m[[0m[0mdebug[0m] [0m[0m      .map(_.publisher)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .getOrElse(GrpcPublisherExt()(mat.system).publisher)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private def subscriber()(implicit mat: ActorMaterializer, attr: Attributes) =[0m
[0m[[0m[0mdebug[0m] [0m[0m    attr[0m
[0m[[0m[0mdebug[0m] [0m[0m      .get[PubSubAttributes.Subscriber][0m
[0m[[0m[0mdebug[0m] [0m[0m      .map(_.subscriber)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .getOrElse(GrpcSubscriberExt()(mat.system).subscriber)[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/google-cloud-pub-sub-grpc/src/main/scala/akka/stream/alpakka/googlecloud/pubsub/grpc/scaladsl/GrpcPublisher.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.googlecloud.pubsub.grpc.scaladsl[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.actor.{ActorSystem, ExtendedActorSystem, Extension, ExtensionId, ExtensionIdProvider}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.annotation.ApiMayChange[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.googlecloud.pubsub.grpc.PubSubSettings[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.googlecloud.pubsub.grpc.impl.AkkaGrpcSettings[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.{ActorMaterializer, Materializer}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport com.google.pubsub.v1.pubsub.{PublisherClient => ScalaPublisherClient}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m/**[0m
[0m[[0m[0mdebug[0m] [0m[0m * Holds the gRPC scala publisher client instance.[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0mfinal class GrpcPublisher private (settings: PubSubSettings, sys: ActorSystem, mat: Materializer) {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  @ApiMayChange[0m
[0m[[0m[0mdebug[0m] [0m[0m  final val client =[0m
[0m[[0m[0mdebug[0m] [0m[0m    ScalaPublisherClient(AkkaGrpcSettings.fromPubSubSettings(settings)(sys))(mat, sys.dispatcher)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  sys.registerOnTermination(client.close())[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mobject GrpcPublisher {[0m
[0m[[0m[0mdebug[0m] [0m[0m  def apply(settings: PubSubSettings)(implicit sys: ActorSystem, mat: Materializer): GrpcPublisher =[0m
[0m[[0m[0mdebug[0m] [0m[0m    new GrpcPublisher(settings, sys, mat)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def apply()(implicit sys: ActorSystem, mat: Materializer): GrpcPublisher =[0m
[0m[[0m[0mdebug[0m] [0m[0m    apply(PubSubSettings(sys))[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m/**[0m
[0m[[0m[0mdebug[0m] [0m[0m * An extension that manages a single gRPC scala publisher client per actor system.[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0mfinal class GrpcPublisherExt private (sys: ExtendedActorSystem) extends Extension {[0m
[0m[[0m[0mdebug[0m] [0m[0m  private[this] val systemMaterializer = ActorMaterializer()(sys)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit val publisher = GrpcPublisher()(sys, systemMaterializer)[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mobject GrpcPublisherExt extends ExtensionId[GrpcPublisherExt] with ExtensionIdProvider {[0m
[0m[[0m[0mdebug[0m] [0m[0m  override def lookup = GrpcPublisherExt[0m
[0m[[0m[0mdebug[0m] [0m[0m  override def createExtension(system: ExtendedActorSystem) = new GrpcPublisherExt(system)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Access to extension.[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def apply()(implicit system: ActorSystem): GrpcPublisherExt = super.apply(system)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Java API[0m
[0m[[0m[0mdebug[0m] [0m[0m   *[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Access to extension.[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  override def get(system: ActorSystem): GrpcPublisherExt = super.get(system)[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/google-cloud-pub-sub-grpc/src/main/scala/akka/stream/alpakka/googlecloud/pubsub/grpc/PubSubSettings.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.googlecloud.pubsub.grpc[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.actor.ActorSystem[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.googlecloud.pubsub.grpc.impl.GrpcCredentials[0m
[0m[[0m[0mdebug[0m] [0m[0mimport com.typesafe.config.Config[0m
[0m[[0m[0mdebug[0m] [0m[0mimport io.grpc.CallCredentials[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.util.Try[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m/**[0m
[0m[[0m[0mdebug[0m] [0m[0m * Connection settings used to establish Pub/Sub connection.[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0mfinal class PubSubSettings private ([0m
[0m[[0m[0mdebug[0m] [0m[0m    val host: String,[0m
[0m[[0m[0mdebug[0m] [0m[0m    val port: Int,[0m
[0m[[0m[0mdebug[0m] [0m[0m    val rootCa: Option[String] = None,[0m
[0m[[0m[0mdebug[0m] [0m[0m    val callCredentials: Option[CallCredentials] = None[0m
[0m[[0m[0mdebug[0m] [0m[0m) {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Endpoint hostname where the gRPC connection is made.[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def withHost(host: String): PubSubSettings = copy(host = host)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Endpoint port where the gRPC connection is made.[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def withPort(port: Int): PubSubSettings = copy(port = port)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * A filename on the classpath which contains the root certificate authority[0m
[0m[[0m[0mdebug[0m] [0m[0m   * that is going to be used to verify certificate presented by the gRPC endpoint.[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def withRootCa(rootCa: String): PubSubSettings =[0m
[0m[[0m[0mdebug[0m] [0m[0m    copy(rootCa = Some(rootCa))[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Credentials that are going to be used for gRPC call authorization.[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def withCallCredentials(callCredentials: CallCredentials): PubSubSettings =[0m
[0m[[0m[0mdebug[0m] [0m[0m    copy(callCredentials = Some(callCredentials))[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private def copy(host: String = host,[0m
[0m[[0m[0mdebug[0m] [0m[0m                   port: Int = port,[0m
[0m[[0m[0mdebug[0m] [0m[0m                   rootCa: Option[String] = rootCa,[0m
[0m[[0m[0mdebug[0m] [0m[0m                   callCredentials: Option[CallCredentials] = callCredentials) =[0m
[0m[[0m[0mdebug[0m] [0m[0m    new PubSubSettings(host, port, rootCa, callCredentials)[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mobject PubSubSettings {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Create settings for unsecure (no tls), unauthenticated (no root ca)[0m
[0m[[0m[0mdebug[0m] [0m[0m   * and unauthorized (no call credentials) endpoint.[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def apply(host: String, port: Int): PubSubSettings =[0m
[0m[[0m[0mdebug[0m] [0m[0m    new PubSubSettings(host, port)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Create settings from config instance.[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def apply(config: Config): PubSubSettings = {[0m
[0m[[0m[0mdebug[0m] [0m[0m    val host = config.getString("host")[0m
[0m[[0m[0mdebug[0m] [0m[0m    val port = config.getInt("port")[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    val pubSubConfig = PubSubSettings(host, port)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    val setRootCa = (pubSubConfig: PubSubSettings) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m      config.getString("rootCa") match {[0m
[0m[[0m[0mdebug[0m] [0m[0m        case fileName if fileName != "none" => pubSubConfig.withRootCa(fileName)[0m
[0m[[0m[0mdebug[0m] [0m[0m        case _ => pubSubConfig[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m    val setCallCredentials = (pubSubConfig: PubSubSettings) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m      config.getString("callCredentials") match {[0m
[0m[[0m[0mdebug[0m] [0m[0m        case "google-application-default" =>[0m
[0m[[0m[0mdebug[0m] [0m[0m          Try(GrpcCredentials.applicationDefault())[0m
[0m[[0m[0mdebug[0m] [0m[0m            .map(pubSubConfig.withCallCredentials)[0m
[0m[[0m[0mdebug[0m] [0m[0m            .getOrElse(pubSubConfig)[0m
[0m[[0m[0mdebug[0m] [0m[0m        case _ => pubSubConfig[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    Seq(setRootCa, setCallCredentials).foldLeft(pubSubConfig) {[0m
[0m[[0m[0mdebug[0m] [0m[0m      case (config, f) => f(config)[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Create settings from ActorSystem's config.[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def apply(system: ActorSystem): PubSubSettings =[0m
[0m[[0m[0mdebug[0m] [0m[0m    PubSubSettings(system.settings.config.getConfig("alpakka.google.cloud.pubsub.grpc"))[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Java API[0m
[0m[[0m[0mdebug[0m] [0m[0m   *[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Create settings for unsecure (no tls), unauthenticated (no root ca)[0m
[0m[[0m[0mdebug[0m] [0m[0m   * and unauthorized (no call credentials) endpoint.[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def create(host: String, port: Int): PubSubSettings =[0m
[0m[[0m[0mdebug[0m] [0m[0m    PubSubSettings(host, port)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Java API[0m
[0m[[0m[0mdebug[0m] [0m[0m   *[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Create settings from config instance.[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def create(config: Config): PubSubSettings =[0m
[0m[[0m[0mdebug[0m] [0m[0m    PubSubSettings(config)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Java API[0m
[0m[[0m[0mdebug[0m] [0m[0m   *[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Create settings from ActorSystem's config.[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def create(system: ActorSystem): PubSubSettings =[0m
[0m[[0m[0mdebug[0m] [0m[0m    PubSubSettings(system)[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/google-cloud-pub-sub-grpc/src/main/scala/akka/stream/alpakka/googlecloud/pubsub/grpc/impl/SetupStage.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.googlecloud.pubsub.grpc.impl[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.annotation.InternalApi[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream._[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.scaladsl.{Flow, Keep, Sink, Source}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.javadsl[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.stage._[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.concurrent.{Future, Promise}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mprivate final class SetupSinkStage[T, M](factory: ActorMaterializer => Attributes => Sink[T, M])[0m
[0m[[0m[0mdebug[0m] [0m[0m    extends GraphStageWithMaterializedValue[SinkShape[T], Future[M]] {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private val in = Inlet[T]("SetupSinkStage.in")[0m
[0m[[0m[0mdebug[0m] [0m[0m  override val shape = SinkShape(in)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  override def createLogicAndMaterializedValue(inheritedAttributes: Attributes): (GraphStageLogic, Future[M]) = {[0m
[0m[[0m[0mdebug[0m] [0m[0m    val matPromise = Promise[M][0m
[0m[[0m[0mdebug[0m] [0m[0m    (createStageLogic(matPromise), matPromise.future)[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private def createStageLogic(matPromise: Promise[M]) = new GraphStageLogic(shape) {[0m
[0m[[0m[0mdebug[0m] [0m[0m    import SetupStage._[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    val subOutlet = new SubSourceOutlet[T]("SetupSinkStage")[0m
[0m[[0m[0mdebug[0m] [0m[0m    subOutlet.setHandler(delegateToInlet(() => pull(in), () => cancel(in)))[0m
[0m[[0m[0mdebug[0m] [0m[0m    setHandler(in, delegateToSubOutlet(() => grab(in), subOutlet))[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    override def preStart(): Unit = {[0m
[0m[[0m[0mdebug[0m] [0m[0m      val sink = factory(actorMaterializer(materializer))(attributes)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m      val mat = Source.fromGraph(subOutlet.source).runWith(sink.withAttributes(attributes))(subFusingMaterializer)[0m
[0m[[0m[0mdebug[0m] [0m[0m      matPromise.success(mat)[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mprivate final class SetupFlowStage[T, U, M](factory: ActorMaterializer => Attributes => Flow[T, U, M])[0m
[0m[[0m[0mdebug[0m] [0m[0m    extends GraphStageWithMaterializedValue[FlowShape[T, U], Future[M]] {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private val in = Inlet[T]("SetupFlowStage.in")[0m
[0m[[0m[0mdebug[0m] [0m[0m  private val out = Outlet[U]("SetupFlowStage.out")[0m
[0m[[0m[0mdebug[0m] [0m[0m  override val shape = FlowShape(in, out)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  override def createLogicAndMaterializedValue(inheritedAttributes: Attributes): (GraphStageLogic, Future[M]) = {[0m
[0m[[0m[0mdebug[0m] [0m[0m    val matPromise = Promise[M][0m
[0m[[0m[0mdebug[0m] [0m[0m    (createStageLogic(matPromise), matPromise.future)[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private def createStageLogic(matPromise: Promise[M]) = new GraphStageLogic(shape) {[0m
[0m[[0m[0mdebug[0m] [0m[0m    import SetupStage._[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    val subInlet = new SubSinkInlet[U]("SetupFlowStage")[0m
[0m[[0m[0mdebug[0m] [0m[0m    val subOutlet = new SubSourceOutlet[T]("SetupFlowStage")[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    subInlet.setHandler(delegateToOutlet(push(out, _: U), () => complete(out), fail(out, _), subInlet))[0m
[0m[[0m[0mdebug[0m] [0m[0m    subOutlet.setHandler(delegateToInlet(() => pull(in), () => cancel(in)))[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    setHandler(in, delegateToSubOutlet(() => grab(in), subOutlet))[0m
[0m[[0m[0mdebug[0m] [0m[0m    setHandler(out, delegateToSubInlet(subInlet))[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    override def preStart(): Unit = {[0m
[0m[[0m[0mdebug[0m] [0m[0m      val flow = factory(actorMaterializer(materializer))(attributes)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m      val mat = Source[0m
[0m[[0m[0mdebug[0m] [0m[0m        .fromGraph(subOutlet.source)[0m
[0m[[0m[0mdebug[0m] [0m[0m        .viaMat(flow.withAttributes(attributes))(Keep.right)[0m
[0m[[0m[0mdebug[0m] [0m[0m        .to(Sink.fromGraph(subInlet.sink))[0m
[0m[[0m[0mdebug[0m] [0m[0m        .run()(subFusingMaterializer)[0m
[0m[[0m[0mdebug[0m] [0m[0m      matPromise.success(mat)[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mprivate final class SetupSourceStage[T, M](factory: ActorMaterializer => Attributes => Source[T, M])[0m
[0m[[0m[0mdebug[0m] [0m[0m    extends GraphStageWithMaterializedValue[SourceShape[T], Future[M]] {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private val out = Outlet[T]("SetupSourceStage.out")[0m
[0m[[0m[0mdebug[0m] [0m[0m  override val shape = SourceShape(out)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  override def createLogicAndMaterializedValue(inheritedAttributes: Attributes): (GraphStageLogic, Future[M]) = {[0m
[0m[[0m[0mdebug[0m] [0m[0m    val matPromise = Promise[M][0m
[0m[[0m[0mdebug[0m] [0m[0m    (createStageLogic(matPromise), matPromise.future)[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private def createStageLogic(matPromise: Promise[M]) = new GraphStageLogic(shape) {[0m
[0m[[0m[0mdebug[0m] [0m[0m    import SetupStage._[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    val subInlet = new SubSinkInlet[T]("SetupSourceStage")[0m
[0m[[0m[0mdebug[0m] [0m[0m    subInlet.setHandler(delegateToOutlet(push(out, _: T), () => complete(out), fail(out, _), subInlet))[0m
[0m[[0m[0mdebug[0m] [0m[0m    setHandler(out, delegateToSubInlet(subInlet))[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    override def preStart(): Unit = {[0m
[0m[[0m[0mdebug[0m] [0m[0m      val source = factory(actorMaterializer(materializer))(attributes)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m      val mat = source[0m
[0m[[0m[0mdebug[0m] [0m[0m        .withAttributes(attributes)[0m
[0m[[0m[0mdebug[0m] [0m[0m        .to(Sink.fromGraph(subInlet.sink))[0m
[0m[[0m[0mdebug[0m] [0m[0m        .run()(subFusingMaterializer)[0m
[0m[[0m[0mdebug[0m] [0m[0m      matPromise.success(mat)[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mprivate object SetupStage {[0m
[0m[[0m[0mdebug[0m] [0m[0m  def delegateToSubOutlet[T](grab: () => T, subOutlet: GraphStageLogic#SubSourceOutlet[T]) = new InHandler {[0m
[0m[[0m[0mdebug[0m] [0m[0m    override def onPush(): Unit =[0m
[0m[[0m[0mdebug[0m] [0m[0m      subOutlet.push(grab())[0m
[0m[[0m[0mdebug[0m] [0m[0m    override def onUpstreamFinish(): Unit =[0m
[0m[[0m[0mdebug[0m] [0m[0m      subOutlet.complete()[0m
[0m[[0m[0mdebug[0m] [0m[0m    override def onUpstreamFailure(ex: Throwable): Unit =[0m
[0m[[0m[0mdebug[0m] [0m[0m      subOutlet.fail(ex)[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def delegateToOutlet[T](push: T => Unit,[0m
[0m[[0m[0mdebug[0m] [0m[0m                          complete: () => Unit,[0m
[0m[[0m[0mdebug[0m] [0m[0m                          fail: Throwable => Unit,[0m
[0m[[0m[0mdebug[0m] [0m[0m                          subInlet: GraphStageLogic#SubSinkInlet[T]) = new InHandler {[0m
[0m[[0m[0mdebug[0m] [0m[0m    override def onPush(): Unit =[0m
[0m[[0m[0mdebug[0m] [0m[0m      push(subInlet.grab())[0m
[0m[[0m[0mdebug[0m] [0m[0m    override def onUpstreamFinish(): Unit =[0m
[0m[[0m[0mdebug[0m] [0m[0m      complete()[0m
[0m[[0m[0mdebug[0m] [0m[0m    override def onUpstreamFailure(ex: Throwable): Unit =[0m
[0m[[0m[0mdebug[0m] [0m[0m      fail(ex)[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def delegateToSubInlet[T](subInlet: GraphStageLogic#SubSinkInlet[T]) = new OutHandler {[0m
[0m[[0m[0mdebug[0m] [0m[0m    override def onPull(): Unit =[0m
[0m[[0m[0mdebug[0m] [0m[0m      subInlet.pull()[0m
[0m[[0m[0mdebug[0m] [0m[0m    override def onDownstreamFinish(): Unit =[0m
[0m[[0m[0mdebug[0m] [0m[0m      subInlet.cancel()[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def delegateToInlet(pull: () => Unit, cancel: () => Unit) = new OutHandler {[0m
[0m[[0m[0mdebug[0m] [0m[0m    override def onPull(): Unit =[0m
[0m[[0m[0mdebug[0m] [0m[0m      pull()[0m
[0m[[0m[0mdebug[0m] [0m[0m    override def onDownstreamFinish(): Unit =[0m
[0m[[0m[0mdebug[0m] [0m[0m      cancel()[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def actorMaterializer(mat: Materializer): ActorMaterializer = mat match {[0m
[0m[[0m[0mdebug[0m] [0m[0m    case am: ActorMaterializer => am[0m
[0m[[0m[0mdebug[0m] [0m[0m    case _ => throw new Error("ActorMaterializer required")[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m@InternalApi private[grpc] object Setup {[0m
[0m[[0m[0mdebug[0m] [0m[0m  def sink[T, M](factory: ActorMaterializer => Attributes => Sink[T, M]): Sink[T, Future[M]] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    Sink.fromGraph(new SetupSinkStage(factory))[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def createSink[T, M](factory: ActorMaterializer => Attributes => javadsl.Sink[T, M]): javadsl.Sink[T, Future[M]] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    Sink.fromGraph(new SetupSinkStage(mat => attr => factory(mat)(attr).asScala)).asJava[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def flow[T, U, M](factory: ActorMaterializer => Attributes => Flow[T, U, M]): Flow[T, U, Future[M]] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    Flow.fromGraph(new SetupFlowStage(factory))[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def createFlow[T, U, M]([0m
[0m[[0m[0mdebug[0m] [0m[0m      factory: ActorMaterializer => Attributes => javadsl.Flow[T, U, M][0m
[0m[[0m[0mdebug[0m] [0m[0m  ): javadsl.Flow[T, U, Future[M]] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    Flow.fromGraph(new SetupFlowStage(mat => attr => factory(mat)(attr).asScala)).asJava[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def source[T, M](factory: ActorMaterializer => Attributes => Source[T, M]): Source[T, Future[M]] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    Source.fromGraph(new SetupSourceStage(factory))[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def createSource[T, M]([0m
[0m[[0m[0mdebug[0m] [0m[0m      factory: ActorMaterializer => Attributes => javadsl.Source[T, M][0m
[0m[[0m[0mdebug[0m] [0m[0m  ): javadsl.Source[T, Future[M]] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    Source.fromGraph(new SetupSourceStage(mat => attr => factory(mat)(attr).asScala)).asJava[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/google-cloud-pub-sub-grpc/src/main/scala/akka/stream/alpakka/googlecloud/pubsub/grpc/impl/AkkaGrpcSettings.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.googlecloud.pubsub.grpc.impl[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.actor.ActorSystem[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.annotation.InternalApi[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.grpc.GrpcClientSettings[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.googlecloud.pubsub.grpc.PubSubSettings[0m
[0m[[0m[0mdebug[0m] [0m[0mimport com.typesafe.config.ConfigFactory[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m/**[0m
[0m[[0m[0mdebug[0m] [0m[0m * Internal API[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m@InternalApi private[grpc] object AkkaGrpcSettings {[0m
[0m[[0m[0mdebug[0m] [0m[0m  def fromPubSubSettings(config: PubSubSettings)(implicit sys: ActorSystem): GrpcClientSettings = {[0m
[0m[[0m[0mdebug[0m] [0m[0m    val sslConfig = config.rootCa.fold("") { rootCa =>[0m
[0m[[0m[0mdebug[0m] [0m[0m      s"""[0m
[0m[[0m[0mdebug[0m] [0m[0m      |ssl-config {[0m
[0m[[0m[0mdebug[0m] [0m[0m      |  disabledKeyAlgorithms = [][0m
[0m[[0m[0mdebug[0m] [0m[0m      |  trustManager = {[0m
[0m[[0m[0mdebug[0m] [0m[0m      |    stores = [[0m
[0m[[0m[0mdebug[0m] [0m[0m      |      { type = "PEM", path = "$rootCa", classpath = true }[0m
[0m[[0m[0mdebug[0m] [0m[0m      |    ][0m
[0m[[0m[0mdebug[0m] [0m[0m      |  }[0m
[0m[[0m[0mdebug[0m] [0m[0m      |}""".stripMargin[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    val akkaGrpcConfig = s"""[0m
[0m[[0m[0mdebug[0m] [0m[0m      |host = "${config.host}"[0m
[0m[[0m[0mdebug[0m] [0m[0m      |port = ${config.port}[0m
[0m[[0m[0mdebug[0m] [0m[0m      |[0m
[0m[[0m[0mdebug[0m] [0m[0m      |$sslConfig[0m
[0m[[0m[0mdebug[0m] [0m[0m      |""".stripMargin[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    val settings =[0m
[0m[[0m[0mdebug[0m] [0m[0m      GrpcClientSettings.fromConfig([0m
[0m[[0m[0mdebug[0m] [0m[0m        ConfigFactory[0m
[0m[[0m[0mdebug[0m] [0m[0m          .parseString(akkaGrpcConfig)[0m
[0m[[0m[0mdebug[0m] [0m[0m          .withFallback(sys.settings.config.getConfig("akka.grpc.client.\"*\""))[0m
[0m[[0m[0mdebug[0m] [0m[0m      )[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    val setTls = (settings: GrpcClientSettings) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m      config.rootCa[0m
[0m[[0m[0mdebug[0m] [0m[0m        .fold(settings.withTls(false))(_ => settings.withTls(true))[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    val setCallCredentials = (settings: GrpcClientSettings) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m      config.callCredentials.fold(settings)(settings.withCallCredentials)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    Seq(setTls, setCallCredentials).foldLeft(settings) {[0m
[0m[[0m[0mdebug[0m] [0m[0m      case (s, f) => f(s)[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/google-cloud-pub-sub-grpc/src/main/scala/akka/stream/alpakka/googlecloud/pubsub/grpc/impl/GrpcCredentials.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.googlecloud.pubsub.grpc.impl[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.util.Collections[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.annotation.InternalApi[0m
[0m[[0m[0mdebug[0m] [0m[0mimport com.google.auth.oauth2.GoogleCredentials[0m
[0m[[0m[0mdebug[0m] [0m[0mimport io.grpc.CallCredentials[0m
[0m[[0m[0mdebug[0m] [0m[0mimport io.grpc.auth.MoreCallCredentials[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m/**[0m
[0m[[0m[0mdebug[0m] [0m[0m * Internal API[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m@InternalApi private[grpc] object GrpcCredentials {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def applicationDefault(): CallCredentials =[0m
[0m[[0m[0mdebug[0m] [0m[0m    MoreCallCredentials.from([0m
[0m[[0m[0mdebug[0m] [0m[0m      GoogleCredentials.getApplicationDefault.createScoped([0m
[0m[[0m[0mdebug[0m] [0m[0m        Collections.singletonList("https://www.googleapis.com/auth/pubsub")[0m
[0m[[0m[0mdebug[0m] [0m[0m      )[0m
[0m[[0m[0mdebug[0m] [0m[0m    )[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
