// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.google.pubsub.v1.pubsub

/** Request for the `StreamingPull` streaming RPC method. This request is used to
  * establish the initial stream as well as to stream acknowledgements and ack
  * deadline modifications from the client to the server.
  *
  * @param subscription
  *   The subscription for which to initialize the new stream. This must be
  *   provided in the first request on the stream, and must not be set in
  *   subsequent requests from client to server.
  *   Format is `projects/{project}/subscriptions/{sub}`.
  * @param ackIds
  *   List of acknowledgement IDs for acknowledging previously received messages
  *   (received on this stream or a different stream). If an ack ID has expired,
  *   the corresponding message may be redelivered later. Acknowledging a message
  *   more than once will not result in an error. If the acknowledgement ID is
  *   malformed, the stream will be aborted with status `INVALID_ARGUMENT`.
  * @param modifyDeadlineSeconds
  *   The list of new ack deadlines for the IDs listed in
  *   `modify_deadline_ack_ids`. The size of this list must be the same as the
  *   size of `modify_deadline_ack_ids`. If it differs the stream will be aborted
  *   with `INVALID_ARGUMENT`. Each element in this list is applied to the
  *   element in the same position in `modify_deadline_ack_ids`. The new ack
  *   deadline is with respect to the time this request was sent to the Pub/Sub
  *   system. Must be &gt;= 0. For example, if the value is 10, the new ack deadline
  *   will expire 10 seconds after this request is received. If the value is 0,
  *   the message is immediately made available for another streaming or
  *   non-streaming pull request. If the value is &lt; 0 (an error), the stream will
  *   be aborted with status `INVALID_ARGUMENT`.
  * @param modifyDeadlineAckIds
  *   List of acknowledgement IDs whose deadline will be modified based on the
  *   corresponding element in `modify_deadline_seconds`. This field can be used
  *   to indicate that more time is needed to process a message by the
  *   subscriber, or to make the message available for redelivery if the
  *   processing was interrupted.
  * @param streamAckDeadlineSeconds
  *   The ack deadline to use for the stream. This must be provided in the
  *   first request on the stream, but it can also be updated on subsequent
  *   requests from client to server. The minimum deadline you can specify is 10
  *   seconds. The maximum deadline you can specify is 600 seconds (10 minutes).
  */
@SerialVersionUID(0L)
final case class StreamingPullRequest(
    subscription: _root_.scala.Predef.String = "",
    ackIds: _root_.scala.collection.Seq[_root_.scala.Predef.String] = _root_.scala.collection.Seq.empty,
    modifyDeadlineSeconds: _root_.scala.collection.Seq[_root_.scala.Int] = _root_.scala.collection.Seq.empty,
    modifyDeadlineAckIds: _root_.scala.collection.Seq[_root_.scala.Predef.String] = _root_.scala.collection.Seq.empty,
    streamAckDeadlineSeconds: _root_.scala.Int = 0
    ) extends scalapb.GeneratedMessage with scalapb.Message[StreamingPullRequest] with scalapb.lenses.Updatable[StreamingPullRequest] {
    private[this] def modifyDeadlineSecondsSerializedSize = {
      if (__modifyDeadlineSecondsSerializedSizeField == 0) __modifyDeadlineSecondsSerializedSizeField = {
        var __s: _root_.scala.Int = 0
        modifyDeadlineSeconds.foreach(__i => __s += _root_.com.google.protobuf.CodedOutputStream.computeInt32SizeNoTag(__i))
        __s
      }
      __modifyDeadlineSecondsSerializedSizeField
    }
    @transient private[this] var __modifyDeadlineSecondsSerializedSizeField: _root_.scala.Int = 0
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = subscription
        if (__value != "") {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      ackIds.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
      }
      if(modifyDeadlineSeconds.nonEmpty) {
        val __localsize = modifyDeadlineSecondsSerializedSize
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__localsize) + __localsize
      }
      modifyDeadlineAckIds.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, __value)
      }
      
      {
        val __value = streamAckDeadlineSeconds
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(5, __value)
        }
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = subscription
        if (__v != "") {
          _output__.writeString(1, __v)
        }
      };
      ackIds.foreach { __v =>
        val __m = __v
        _output__.writeString(2, __m)
      };
      if (modifyDeadlineSeconds.nonEmpty) {
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(modifyDeadlineSecondsSerializedSize)
        modifyDeadlineSeconds.foreach(_output__.writeInt32NoTag)
      };
      modifyDeadlineAckIds.foreach { __v =>
        val __m = __v
        _output__.writeString(4, __m)
      };
      {
        val __v = streamAckDeadlineSeconds
        if (__v != 0) {
          _output__.writeInt32(5, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.google.pubsub.v1.pubsub.StreamingPullRequest = {
      var __subscription = this.subscription
      val __ackIds = (_root_.scala.collection.immutable.Vector.newBuilder[_root_.scala.Predef.String] ++= this.ackIds)
      val __modifyDeadlineSeconds = (_root_.scala.collection.immutable.Vector.newBuilder[_root_.scala.Int] ++= this.modifyDeadlineSeconds)
      val __modifyDeadlineAckIds = (_root_.scala.collection.immutable.Vector.newBuilder[_root_.scala.Predef.String] ++= this.modifyDeadlineAckIds)
      var __streamAckDeadlineSeconds = this.streamAckDeadlineSeconds
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __subscription = _input__.readString()
          case 18 =>
            __ackIds += _input__.readString()
          case 24 =>
            __modifyDeadlineSeconds += _input__.readInt32()
          case 26 => {
            val length = _input__.readRawVarint32()
            val oldLimit = _input__.pushLimit(length)
            while (_input__.getBytesUntilLimit > 0) {
              __modifyDeadlineSeconds += _input__.readInt32
            }
            _input__.popLimit(oldLimit)
          }
          case 34 =>
            __modifyDeadlineAckIds += _input__.readString()
          case 40 =>
            __streamAckDeadlineSeconds = _input__.readInt32()
          case tag => _input__.skipField(tag)
        }
      }
      com.google.pubsub.v1.pubsub.StreamingPullRequest(
          subscription = __subscription,
          ackIds = __ackIds.result(),
          modifyDeadlineSeconds = __modifyDeadlineSeconds.result(),
          modifyDeadlineAckIds = __modifyDeadlineAckIds.result(),
          streamAckDeadlineSeconds = __streamAckDeadlineSeconds
      )
    }
    def withSubscription(__v: _root_.scala.Predef.String): StreamingPullRequest = copy(subscription = __v)
    def clearAckIds = copy(ackIds = _root_.scala.collection.Seq.empty)
    def addAckIds(__vs: _root_.scala.Predef.String*): StreamingPullRequest = addAllAckIds(__vs)
    def addAllAckIds(__vs: TraversableOnce[_root_.scala.Predef.String]): StreamingPullRequest = copy(ackIds = ackIds ++ __vs)
    def withAckIds(__v: _root_.scala.collection.Seq[_root_.scala.Predef.String]): StreamingPullRequest = copy(ackIds = __v)
    def clearModifyDeadlineSeconds = copy(modifyDeadlineSeconds = _root_.scala.collection.Seq.empty)
    def addModifyDeadlineSeconds(__vs: _root_.scala.Int*): StreamingPullRequest = addAllModifyDeadlineSeconds(__vs)
    def addAllModifyDeadlineSeconds(__vs: TraversableOnce[_root_.scala.Int]): StreamingPullRequest = copy(modifyDeadlineSeconds = modifyDeadlineSeconds ++ __vs)
    def withModifyDeadlineSeconds(__v: _root_.scala.collection.Seq[_root_.scala.Int]): StreamingPullRequest = copy(modifyDeadlineSeconds = __v)
    def clearModifyDeadlineAckIds = copy(modifyDeadlineAckIds = _root_.scala.collection.Seq.empty)
    def addModifyDeadlineAckIds(__vs: _root_.scala.Predef.String*): StreamingPullRequest = addAllModifyDeadlineAckIds(__vs)
    def addAllModifyDeadlineAckIds(__vs: TraversableOnce[_root_.scala.Predef.String]): StreamingPullRequest = copy(modifyDeadlineAckIds = modifyDeadlineAckIds ++ __vs)
    def withModifyDeadlineAckIds(__v: _root_.scala.collection.Seq[_root_.scala.Predef.String]): StreamingPullRequest = copy(modifyDeadlineAckIds = __v)
    def withStreamAckDeadlineSeconds(__v: _root_.scala.Int): StreamingPullRequest = copy(streamAckDeadlineSeconds = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = subscription
          if (__t != "") __t else null
        }
        case 2 => ackIds
        case 3 => modifyDeadlineSeconds
        case 4 => modifyDeadlineAckIds
        case 5 => {
          val __t = streamAckDeadlineSeconds
          if (__t != 0) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(subscription)
        case 2 => _root_.scalapb.descriptors.PRepeated(ackIds.map(_root_.scalapb.descriptors.PString)(_root_.scala.collection.breakOut))
        case 3 => _root_.scalapb.descriptors.PRepeated(modifyDeadlineSeconds.map(_root_.scalapb.descriptors.PInt)(_root_.scala.collection.breakOut))
        case 4 => _root_.scalapb.descriptors.PRepeated(modifyDeadlineAckIds.map(_root_.scalapb.descriptors.PString)(_root_.scala.collection.breakOut))
        case 5 => _root_.scalapb.descriptors.PInt(streamAckDeadlineSeconds)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = com.google.pubsub.v1.pubsub.StreamingPullRequest
}

object StreamingPullRequest extends scalapb.GeneratedMessageCompanion[com.google.pubsub.v1.pubsub.StreamingPullRequest] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.google.pubsub.v1.pubsub.StreamingPullRequest] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): com.google.pubsub.v1.pubsub.StreamingPullRequest = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.google.pubsub.v1.pubsub.StreamingPullRequest(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(1), Nil).asInstanceOf[_root_.scala.collection.Seq[_root_.scala.Predef.String]],
      __fieldsMap.getOrElse(__fields.get(2), Nil).asInstanceOf[_root_.scala.collection.Seq[_root_.scala.Int]],
      __fieldsMap.getOrElse(__fields.get(3), Nil).asInstanceOf[_root_.scala.collection.Seq[_root_.scala.Predef.String]],
      __fieldsMap.getOrElse(__fields.get(4), 0).asInstanceOf[_root_.scala.Int]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.google.pubsub.v1.pubsub.StreamingPullRequest] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.google.pubsub.v1.pubsub.StreamingPullRequest(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.collection.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.collection.Seq[_root_.scala.Int]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.collection.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Int]).getOrElse(0)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = PubsubProto.javaDescriptor.getMessageTypes.get(24)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = PubsubProto.scalaDescriptor.messages(24)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.google.pubsub.v1.pubsub.StreamingPullRequest(
  )
  implicit class StreamingPullRequestLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.google.pubsub.v1.pubsub.StreamingPullRequest]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.google.pubsub.v1.pubsub.StreamingPullRequest](_l) {
    def subscription: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.subscription)((c_, f_) => c_.copy(subscription = f_))
    def ackIds: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[_root_.scala.Predef.String]] = field(_.ackIds)((c_, f_) => c_.copy(ackIds = f_))
    def modifyDeadlineSeconds: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[_root_.scala.Int]] = field(_.modifyDeadlineSeconds)((c_, f_) => c_.copy(modifyDeadlineSeconds = f_))
    def modifyDeadlineAckIds: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[_root_.scala.Predef.String]] = field(_.modifyDeadlineAckIds)((c_, f_) => c_.copy(modifyDeadlineAckIds = f_))
    def streamAckDeadlineSeconds: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.streamAckDeadlineSeconds)((c_, f_) => c_.copy(streamAckDeadlineSeconds = f_))
  }
  final val SUBSCRIPTION_FIELD_NUMBER = 1
  final val ACK_IDS_FIELD_NUMBER = 2
  final val MODIFY_DEADLINE_SECONDS_FIELD_NUMBER = 3
  final val MODIFY_DEADLINE_ACK_IDS_FIELD_NUMBER = 4
  final val STREAM_ACK_DEADLINE_SECONDS_FIELD_NUMBER = 5
  def of(
    subscription: _root_.scala.Predef.String,
    ackIds: _root_.scala.collection.Seq[_root_.scala.Predef.String],
    modifyDeadlineSeconds: _root_.scala.collection.Seq[_root_.scala.Int],
    modifyDeadlineAckIds: _root_.scala.collection.Seq[_root_.scala.Predef.String],
    streamAckDeadlineSeconds: _root_.scala.Int
  ): _root_.com.google.pubsub.v1.pubsub.StreamingPullRequest = _root_.com.google.pubsub.v1.pubsub.StreamingPullRequest(
    subscription,
    ackIds,
    modifyDeadlineSeconds,
    modifyDeadlineAckIds,
    streamAckDeadlineSeconds
  )
}
