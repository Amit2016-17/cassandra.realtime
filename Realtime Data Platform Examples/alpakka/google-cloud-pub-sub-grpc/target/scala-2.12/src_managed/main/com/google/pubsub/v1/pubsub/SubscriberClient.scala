
// Generated by Akka gRPC. DO NOT EDIT.
package com.google.pubsub.v1.pubsub

import akka.grpc.GrpcClientSettings
import akka.grpc.internal._
import akka.grpc.scaladsl._
import akka.stream.Materializer
import scala.concurrent.{ ExecutionContext, Promise }

import io.grpc._

// Not sealed so users can extend to write their stubs
trait SubscriberClient extends Subscriber with SubscriberClientPowerApi with AkkaGrpcClient

object SubscriberClient {
  def apply(settings: GrpcClientSettings)(implicit mat: Materializer, ex: ExecutionContext): SubscriberClient =
    new DefaultSubscriberClient(settings)
}

final class DefaultSubscriberClient(settings: GrpcClientSettings)(implicit mat: Materializer, ex: ExecutionContext) extends SubscriberClient {
  import DefaultSubscriberClient._

  private val options = NettyClientUtils.callOptions(settings)
  private val clientState = new ClientState(settings)

  
    private def createSubscriptionRequestBuilder(channel:scala.concurrent.Future[ManagedChannel]) = {
      
        new ScalaUnaryRequestBuilder(createSubscriptionDescriptor, channel, options, settings)
      
    }
  
    private def getSubscriptionRequestBuilder(channel:scala.concurrent.Future[ManagedChannel]) = {
      
        new ScalaUnaryRequestBuilder(getSubscriptionDescriptor, channel, options, settings)
      
    }
  
    private def updateSubscriptionRequestBuilder(channel:scala.concurrent.Future[ManagedChannel]) = {
      
        new ScalaUnaryRequestBuilder(updateSubscriptionDescriptor, channel, options, settings)
      
    }
  
    private def listSubscriptionsRequestBuilder(channel:scala.concurrent.Future[ManagedChannel]) = {
      
        new ScalaUnaryRequestBuilder(listSubscriptionsDescriptor, channel, options, settings)
      
    }
  
    private def deleteSubscriptionRequestBuilder(channel:scala.concurrent.Future[ManagedChannel]) = {
      
        new ScalaUnaryRequestBuilder(deleteSubscriptionDescriptor, channel, options, settings)
      
    }
  
    private def modifyAckDeadlineRequestBuilder(channel:scala.concurrent.Future[ManagedChannel]) = {
      
        new ScalaUnaryRequestBuilder(modifyAckDeadlineDescriptor, channel, options, settings)
      
    }
  
    private def acknowledgeRequestBuilder(channel:scala.concurrent.Future[ManagedChannel]) = {
      
        new ScalaUnaryRequestBuilder(acknowledgeDescriptor, channel, options, settings)
      
    }
  
    private def pullRequestBuilder(channel:scala.concurrent.Future[ManagedChannel]) = {
      
        new ScalaUnaryRequestBuilder(pullDescriptor, channel, options, settings)
      
    }
  
    private def streamingPullRequestBuilder(channel:scala.concurrent.Future[ManagedChannel]) = {
      
        val fqName = "google.pubsub.v1.Subscriber.StreamingPull"
        
          new ScalaBidirectionalStreamingRequestBuilder(streamingPullDescriptor, fqName, channel, options, settings)
        
      
    }
  
    private def modifyPushConfigRequestBuilder(channel:scala.concurrent.Future[ManagedChannel]) = {
      
        new ScalaUnaryRequestBuilder(modifyPushConfigDescriptor, channel, options, settings)
      
    }
  
    private def listSnapshotsRequestBuilder(channel:scala.concurrent.Future[ManagedChannel]) = {
      
        new ScalaUnaryRequestBuilder(listSnapshotsDescriptor, channel, options, settings)
      
    }
  
    private def createSnapshotRequestBuilder(channel:scala.concurrent.Future[ManagedChannel]) = {
      
        new ScalaUnaryRequestBuilder(createSnapshotDescriptor, channel, options, settings)
      
    }
  
    private def updateSnapshotRequestBuilder(channel:scala.concurrent.Future[ManagedChannel]) = {
      
        new ScalaUnaryRequestBuilder(updateSnapshotDescriptor, channel, options, settings)
      
    }
  
    private def deleteSnapshotRequestBuilder(channel:scala.concurrent.Future[ManagedChannel]) = {
      
        new ScalaUnaryRequestBuilder(deleteSnapshotDescriptor, channel, options, settings)
      
    }
  
    private def seekRequestBuilder(channel:scala.concurrent.Future[ManagedChannel]) = {
      
        new ScalaUnaryRequestBuilder(seekDescriptor, channel, options, settings)
      
    }
  

  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer createSubscription(com.google.pubsub.v1.pubsub.Subscription) if possible.
     */
    
      override def createSubscription(): SingleResponseRequestBuilder[com.google.pubsub.v1.pubsub.Subscription, com.google.pubsub.v1.pubsub.Subscription] =
        clientState.withChannel(createSubscriptionRequestBuilder _)
    

    /**
     * For access to method metadata use the parameterless version of createSubscription
     */
    def createSubscription(in: com.google.pubsub.v1.pubsub.Subscription): scala.concurrent.Future[com.google.pubsub.v1.pubsub.Subscription] =
      createSubscription().invoke(in)
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer getSubscription(com.google.pubsub.v1.pubsub.GetSubscriptionRequest) if possible.
     */
    
      override def getSubscription(): SingleResponseRequestBuilder[com.google.pubsub.v1.pubsub.GetSubscriptionRequest, com.google.pubsub.v1.pubsub.Subscription] =
        clientState.withChannel(getSubscriptionRequestBuilder _)
    

    /**
     * For access to method metadata use the parameterless version of getSubscription
     */
    def getSubscription(in: com.google.pubsub.v1.pubsub.GetSubscriptionRequest): scala.concurrent.Future[com.google.pubsub.v1.pubsub.Subscription] =
      getSubscription().invoke(in)
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer updateSubscription(com.google.pubsub.v1.pubsub.UpdateSubscriptionRequest) if possible.
     */
    
      override def updateSubscription(): SingleResponseRequestBuilder[com.google.pubsub.v1.pubsub.UpdateSubscriptionRequest, com.google.pubsub.v1.pubsub.Subscription] =
        clientState.withChannel(updateSubscriptionRequestBuilder _)
    

    /**
     * For access to method metadata use the parameterless version of updateSubscription
     */
    def updateSubscription(in: com.google.pubsub.v1.pubsub.UpdateSubscriptionRequest): scala.concurrent.Future[com.google.pubsub.v1.pubsub.Subscription] =
      updateSubscription().invoke(in)
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer listSubscriptions(com.google.pubsub.v1.pubsub.ListSubscriptionsRequest) if possible.
     */
    
      override def listSubscriptions(): SingleResponseRequestBuilder[com.google.pubsub.v1.pubsub.ListSubscriptionsRequest, com.google.pubsub.v1.pubsub.ListSubscriptionsResponse] =
        clientState.withChannel(listSubscriptionsRequestBuilder _)
    

    /**
     * For access to method metadata use the parameterless version of listSubscriptions
     */
    def listSubscriptions(in: com.google.pubsub.v1.pubsub.ListSubscriptionsRequest): scala.concurrent.Future[com.google.pubsub.v1.pubsub.ListSubscriptionsResponse] =
      listSubscriptions().invoke(in)
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer deleteSubscription(com.google.pubsub.v1.pubsub.DeleteSubscriptionRequest) if possible.
     */
    
      override def deleteSubscription(): SingleResponseRequestBuilder[com.google.pubsub.v1.pubsub.DeleteSubscriptionRequest, com.google.protobuf.empty.Empty] =
        clientState.withChannel(deleteSubscriptionRequestBuilder _)
    

    /**
     * For access to method metadata use the parameterless version of deleteSubscription
     */
    def deleteSubscription(in: com.google.pubsub.v1.pubsub.DeleteSubscriptionRequest): scala.concurrent.Future[com.google.protobuf.empty.Empty] =
      deleteSubscription().invoke(in)
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer modifyAckDeadline(com.google.pubsub.v1.pubsub.ModifyAckDeadlineRequest) if possible.
     */
    
      override def modifyAckDeadline(): SingleResponseRequestBuilder[com.google.pubsub.v1.pubsub.ModifyAckDeadlineRequest, com.google.protobuf.empty.Empty] =
        clientState.withChannel(modifyAckDeadlineRequestBuilder _)
    

    /**
     * For access to method metadata use the parameterless version of modifyAckDeadline
     */
    def modifyAckDeadline(in: com.google.pubsub.v1.pubsub.ModifyAckDeadlineRequest): scala.concurrent.Future[com.google.protobuf.empty.Empty] =
      modifyAckDeadline().invoke(in)
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer acknowledge(com.google.pubsub.v1.pubsub.AcknowledgeRequest) if possible.
     */
    
      override def acknowledge(): SingleResponseRequestBuilder[com.google.pubsub.v1.pubsub.AcknowledgeRequest, com.google.protobuf.empty.Empty] =
        clientState.withChannel(acknowledgeRequestBuilder _)
    

    /**
     * For access to method metadata use the parameterless version of acknowledge
     */
    def acknowledge(in: com.google.pubsub.v1.pubsub.AcknowledgeRequest): scala.concurrent.Future[com.google.protobuf.empty.Empty] =
      acknowledge().invoke(in)
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer pull(com.google.pubsub.v1.pubsub.PullRequest) if possible.
     */
    
      override def pull(): SingleResponseRequestBuilder[com.google.pubsub.v1.pubsub.PullRequest, com.google.pubsub.v1.pubsub.PullResponse] =
        clientState.withChannel(pullRequestBuilder _)
    

    /**
     * For access to method metadata use the parameterless version of pull
     */
    def pull(in: com.google.pubsub.v1.pubsub.PullRequest): scala.concurrent.Future[com.google.pubsub.v1.pubsub.PullResponse] =
      pull().invoke(in)
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer streamingPull(akka.stream.scaladsl.Source[com.google.pubsub.v1.pubsub.StreamingPullRequest, akka.NotUsed]) if possible.
     */
    
      override def streamingPull(): StreamResponseRequestBuilder[akka.stream.scaladsl.Source[com.google.pubsub.v1.pubsub.StreamingPullRequest, akka.NotUsed], com.google.pubsub.v1.pubsub.StreamingPullResponse] =
        clientState.withChannel(streamingPullRequestBuilder _)
    

    /**
     * For access to method metadata use the parameterless version of streamingPull
     */
    def streamingPull(in: akka.stream.scaladsl.Source[com.google.pubsub.v1.pubsub.StreamingPullRequest, akka.NotUsed]): akka.stream.scaladsl.Source[com.google.pubsub.v1.pubsub.StreamingPullResponse, akka.NotUsed] =
      streamingPull().invoke(in)
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer modifyPushConfig(com.google.pubsub.v1.pubsub.ModifyPushConfigRequest) if possible.
     */
    
      override def modifyPushConfig(): SingleResponseRequestBuilder[com.google.pubsub.v1.pubsub.ModifyPushConfigRequest, com.google.protobuf.empty.Empty] =
        clientState.withChannel(modifyPushConfigRequestBuilder _)
    

    /**
     * For access to method metadata use the parameterless version of modifyPushConfig
     */
    def modifyPushConfig(in: com.google.pubsub.v1.pubsub.ModifyPushConfigRequest): scala.concurrent.Future[com.google.protobuf.empty.Empty] =
      modifyPushConfig().invoke(in)
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer listSnapshots(com.google.pubsub.v1.pubsub.ListSnapshotsRequest) if possible.
     */
    
      override def listSnapshots(): SingleResponseRequestBuilder[com.google.pubsub.v1.pubsub.ListSnapshotsRequest, com.google.pubsub.v1.pubsub.ListSnapshotsResponse] =
        clientState.withChannel(listSnapshotsRequestBuilder _)
    

    /**
     * For access to method metadata use the parameterless version of listSnapshots
     */
    def listSnapshots(in: com.google.pubsub.v1.pubsub.ListSnapshotsRequest): scala.concurrent.Future[com.google.pubsub.v1.pubsub.ListSnapshotsResponse] =
      listSnapshots().invoke(in)
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer createSnapshot(com.google.pubsub.v1.pubsub.CreateSnapshotRequest) if possible.
     */
    
      override def createSnapshot(): SingleResponseRequestBuilder[com.google.pubsub.v1.pubsub.CreateSnapshotRequest, com.google.pubsub.v1.pubsub.Snapshot] =
        clientState.withChannel(createSnapshotRequestBuilder _)
    

    /**
     * For access to method metadata use the parameterless version of createSnapshot
     */
    def createSnapshot(in: com.google.pubsub.v1.pubsub.CreateSnapshotRequest): scala.concurrent.Future[com.google.pubsub.v1.pubsub.Snapshot] =
      createSnapshot().invoke(in)
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer updateSnapshot(com.google.pubsub.v1.pubsub.UpdateSnapshotRequest) if possible.
     */
    
      override def updateSnapshot(): SingleResponseRequestBuilder[com.google.pubsub.v1.pubsub.UpdateSnapshotRequest, com.google.pubsub.v1.pubsub.Snapshot] =
        clientState.withChannel(updateSnapshotRequestBuilder _)
    

    /**
     * For access to method metadata use the parameterless version of updateSnapshot
     */
    def updateSnapshot(in: com.google.pubsub.v1.pubsub.UpdateSnapshotRequest): scala.concurrent.Future[com.google.pubsub.v1.pubsub.Snapshot] =
      updateSnapshot().invoke(in)
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer deleteSnapshot(com.google.pubsub.v1.pubsub.DeleteSnapshotRequest) if possible.
     */
    
      override def deleteSnapshot(): SingleResponseRequestBuilder[com.google.pubsub.v1.pubsub.DeleteSnapshotRequest, com.google.protobuf.empty.Empty] =
        clientState.withChannel(deleteSnapshotRequestBuilder _)
    

    /**
     * For access to method metadata use the parameterless version of deleteSnapshot
     */
    def deleteSnapshot(in: com.google.pubsub.v1.pubsub.DeleteSnapshotRequest): scala.concurrent.Future[com.google.protobuf.empty.Empty] =
      deleteSnapshot().invoke(in)
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer seek(com.google.pubsub.v1.pubsub.SeekRequest) if possible.
     */
    
      override def seek(): SingleResponseRequestBuilder[com.google.pubsub.v1.pubsub.SeekRequest, com.google.pubsub.v1.pubsub.SeekResponse] =
        clientState.withChannel(seekRequestBuilder _)
    

    /**
     * For access to method metadata use the parameterless version of seek
     */
    def seek(in: com.google.pubsub.v1.pubsub.SeekRequest): scala.concurrent.Future[com.google.pubsub.v1.pubsub.SeekResponse] =
      seek().invoke(in)
  

  override def close(): scala.concurrent.Future[akka.Done] = clientState.close()
  override def closed(): scala.concurrent.Future[akka.Done] = clientState.closed()

}



private object DefaultSubscriberClient {

  def apply(settings: GrpcClientSettings)(implicit mat: Materializer, ex: ExecutionContext): SubscriberClient =
    new DefaultSubscriberClient(settings)

  import Subscriber.Serializers._

  
    private val createSubscriptionDescriptor: MethodDescriptor[com.google.pubsub.v1.pubsub.Subscription, com.google.pubsub.v1.pubsub.Subscription] =
      MethodDescriptor.newBuilder()
        .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
        .setFullMethodName(MethodDescriptor.generateFullMethodName("google.pubsub.v1.Subscriber", "CreateSubscription"))
        .setRequestMarshaller(new Marshaller(SubscriptionSerializer))
        .setResponseMarshaller(new Marshaller(SubscriptionSerializer))
        .setSampledToLocalTracing(true)
        .build()
  
    private val getSubscriptionDescriptor: MethodDescriptor[com.google.pubsub.v1.pubsub.GetSubscriptionRequest, com.google.pubsub.v1.pubsub.Subscription] =
      MethodDescriptor.newBuilder()
        .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
        .setFullMethodName(MethodDescriptor.generateFullMethodName("google.pubsub.v1.Subscriber", "GetSubscription"))
        .setRequestMarshaller(new Marshaller(GetSubscriptionRequestSerializer))
        .setResponseMarshaller(new Marshaller(SubscriptionSerializer))
        .setSampledToLocalTracing(true)
        .build()
  
    private val updateSubscriptionDescriptor: MethodDescriptor[com.google.pubsub.v1.pubsub.UpdateSubscriptionRequest, com.google.pubsub.v1.pubsub.Subscription] =
      MethodDescriptor.newBuilder()
        .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
        .setFullMethodName(MethodDescriptor.generateFullMethodName("google.pubsub.v1.Subscriber", "UpdateSubscription"))
        .setRequestMarshaller(new Marshaller(UpdateSubscriptionRequestSerializer))
        .setResponseMarshaller(new Marshaller(SubscriptionSerializer))
        .setSampledToLocalTracing(true)
        .build()
  
    private val listSubscriptionsDescriptor: MethodDescriptor[com.google.pubsub.v1.pubsub.ListSubscriptionsRequest, com.google.pubsub.v1.pubsub.ListSubscriptionsResponse] =
      MethodDescriptor.newBuilder()
        .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
        .setFullMethodName(MethodDescriptor.generateFullMethodName("google.pubsub.v1.Subscriber", "ListSubscriptions"))
        .setRequestMarshaller(new Marshaller(ListSubscriptionsRequestSerializer))
        .setResponseMarshaller(new Marshaller(ListSubscriptionsResponseSerializer))
        .setSampledToLocalTracing(true)
        .build()
  
    private val deleteSubscriptionDescriptor: MethodDescriptor[com.google.pubsub.v1.pubsub.DeleteSubscriptionRequest, com.google.protobuf.empty.Empty] =
      MethodDescriptor.newBuilder()
        .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
        .setFullMethodName(MethodDescriptor.generateFullMethodName("google.pubsub.v1.Subscriber", "DeleteSubscription"))
        .setRequestMarshaller(new Marshaller(DeleteSubscriptionRequestSerializer))
        .setResponseMarshaller(new Marshaller(EmptySerializer))
        .setSampledToLocalTracing(true)
        .build()
  
    private val modifyAckDeadlineDescriptor: MethodDescriptor[com.google.pubsub.v1.pubsub.ModifyAckDeadlineRequest, com.google.protobuf.empty.Empty] =
      MethodDescriptor.newBuilder()
        .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
        .setFullMethodName(MethodDescriptor.generateFullMethodName("google.pubsub.v1.Subscriber", "ModifyAckDeadline"))
        .setRequestMarshaller(new Marshaller(ModifyAckDeadlineRequestSerializer))
        .setResponseMarshaller(new Marshaller(EmptySerializer))
        .setSampledToLocalTracing(true)
        .build()
  
    private val acknowledgeDescriptor: MethodDescriptor[com.google.pubsub.v1.pubsub.AcknowledgeRequest, com.google.protobuf.empty.Empty] =
      MethodDescriptor.newBuilder()
        .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
        .setFullMethodName(MethodDescriptor.generateFullMethodName("google.pubsub.v1.Subscriber", "Acknowledge"))
        .setRequestMarshaller(new Marshaller(AcknowledgeRequestSerializer))
        .setResponseMarshaller(new Marshaller(EmptySerializer))
        .setSampledToLocalTracing(true)
        .build()
  
    private val pullDescriptor: MethodDescriptor[com.google.pubsub.v1.pubsub.PullRequest, com.google.pubsub.v1.pubsub.PullResponse] =
      MethodDescriptor.newBuilder()
        .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
        .setFullMethodName(MethodDescriptor.generateFullMethodName("google.pubsub.v1.Subscriber", "Pull"))
        .setRequestMarshaller(new Marshaller(PullRequestSerializer))
        .setResponseMarshaller(new Marshaller(PullResponseSerializer))
        .setSampledToLocalTracing(true)
        .build()
  
    private val streamingPullDescriptor: MethodDescriptor[com.google.pubsub.v1.pubsub.StreamingPullRequest, com.google.pubsub.v1.pubsub.StreamingPullResponse] =
      MethodDescriptor.newBuilder()
        .setType(
  
  
  
  MethodDescriptor.MethodType.BIDI_STREAMING 
)
        .setFullMethodName(MethodDescriptor.generateFullMethodName("google.pubsub.v1.Subscriber", "StreamingPull"))
        .setRequestMarshaller(new Marshaller(StreamingPullRequestSerializer))
        .setResponseMarshaller(new Marshaller(StreamingPullResponseSerializer))
        .setSampledToLocalTracing(true)
        .build()
  
    private val modifyPushConfigDescriptor: MethodDescriptor[com.google.pubsub.v1.pubsub.ModifyPushConfigRequest, com.google.protobuf.empty.Empty] =
      MethodDescriptor.newBuilder()
        .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
        .setFullMethodName(MethodDescriptor.generateFullMethodName("google.pubsub.v1.Subscriber", "ModifyPushConfig"))
        .setRequestMarshaller(new Marshaller(ModifyPushConfigRequestSerializer))
        .setResponseMarshaller(new Marshaller(EmptySerializer))
        .setSampledToLocalTracing(true)
        .build()
  
    private val listSnapshotsDescriptor: MethodDescriptor[com.google.pubsub.v1.pubsub.ListSnapshotsRequest, com.google.pubsub.v1.pubsub.ListSnapshotsResponse] =
      MethodDescriptor.newBuilder()
        .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
        .setFullMethodName(MethodDescriptor.generateFullMethodName("google.pubsub.v1.Subscriber", "ListSnapshots"))
        .setRequestMarshaller(new Marshaller(ListSnapshotsRequestSerializer))
        .setResponseMarshaller(new Marshaller(ListSnapshotsResponseSerializer))
        .setSampledToLocalTracing(true)
        .build()
  
    private val createSnapshotDescriptor: MethodDescriptor[com.google.pubsub.v1.pubsub.CreateSnapshotRequest, com.google.pubsub.v1.pubsub.Snapshot] =
      MethodDescriptor.newBuilder()
        .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
        .setFullMethodName(MethodDescriptor.generateFullMethodName("google.pubsub.v1.Subscriber", "CreateSnapshot"))
        .setRequestMarshaller(new Marshaller(CreateSnapshotRequestSerializer))
        .setResponseMarshaller(new Marshaller(SnapshotSerializer))
        .setSampledToLocalTracing(true)
        .build()
  
    private val updateSnapshotDescriptor: MethodDescriptor[com.google.pubsub.v1.pubsub.UpdateSnapshotRequest, com.google.pubsub.v1.pubsub.Snapshot] =
      MethodDescriptor.newBuilder()
        .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
        .setFullMethodName(MethodDescriptor.generateFullMethodName("google.pubsub.v1.Subscriber", "UpdateSnapshot"))
        .setRequestMarshaller(new Marshaller(UpdateSnapshotRequestSerializer))
        .setResponseMarshaller(new Marshaller(SnapshotSerializer))
        .setSampledToLocalTracing(true)
        .build()
  
    private val deleteSnapshotDescriptor: MethodDescriptor[com.google.pubsub.v1.pubsub.DeleteSnapshotRequest, com.google.protobuf.empty.Empty] =
      MethodDescriptor.newBuilder()
        .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
        .setFullMethodName(MethodDescriptor.generateFullMethodName("google.pubsub.v1.Subscriber", "DeleteSnapshot"))
        .setRequestMarshaller(new Marshaller(DeleteSnapshotRequestSerializer))
        .setResponseMarshaller(new Marshaller(EmptySerializer))
        .setSampledToLocalTracing(true)
        .build()
  
    private val seekDescriptor: MethodDescriptor[com.google.pubsub.v1.pubsub.SeekRequest, com.google.pubsub.v1.pubsub.SeekResponse] =
      MethodDescriptor.newBuilder()
        .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
        .setFullMethodName(MethodDescriptor.generateFullMethodName("google.pubsub.v1.Subscriber", "Seek"))
        .setRequestMarshaller(new Marshaller(SeekRequestSerializer))
        .setResponseMarshaller(new Marshaller(SeekResponseSerializer))
        .setSampledToLocalTracing(true)
        .build()
  
}

trait SubscriberClientPowerApi {
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer createSubscription(com.google.pubsub.v1.pubsub.Subscription) if possible.
     */
    
      def createSubscription(): SingleResponseRequestBuilder[com.google.pubsub.v1.pubsub.Subscription, com.google.pubsub.v1.pubsub.Subscription] = ???
    
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer getSubscription(com.google.pubsub.v1.pubsub.GetSubscriptionRequest) if possible.
     */
    
      def getSubscription(): SingleResponseRequestBuilder[com.google.pubsub.v1.pubsub.GetSubscriptionRequest, com.google.pubsub.v1.pubsub.Subscription] = ???
    
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer updateSubscription(com.google.pubsub.v1.pubsub.UpdateSubscriptionRequest) if possible.
     */
    
      def updateSubscription(): SingleResponseRequestBuilder[com.google.pubsub.v1.pubsub.UpdateSubscriptionRequest, com.google.pubsub.v1.pubsub.Subscription] = ???
    
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer listSubscriptions(com.google.pubsub.v1.pubsub.ListSubscriptionsRequest) if possible.
     */
    
      def listSubscriptions(): SingleResponseRequestBuilder[com.google.pubsub.v1.pubsub.ListSubscriptionsRequest, com.google.pubsub.v1.pubsub.ListSubscriptionsResponse] = ???
    
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer deleteSubscription(com.google.pubsub.v1.pubsub.DeleteSubscriptionRequest) if possible.
     */
    
      def deleteSubscription(): SingleResponseRequestBuilder[com.google.pubsub.v1.pubsub.DeleteSubscriptionRequest, com.google.protobuf.empty.Empty] = ???
    
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer modifyAckDeadline(com.google.pubsub.v1.pubsub.ModifyAckDeadlineRequest) if possible.
     */
    
      def modifyAckDeadline(): SingleResponseRequestBuilder[com.google.pubsub.v1.pubsub.ModifyAckDeadlineRequest, com.google.protobuf.empty.Empty] = ???
    
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer acknowledge(com.google.pubsub.v1.pubsub.AcknowledgeRequest) if possible.
     */
    
      def acknowledge(): SingleResponseRequestBuilder[com.google.pubsub.v1.pubsub.AcknowledgeRequest, com.google.protobuf.empty.Empty] = ???
    
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer pull(com.google.pubsub.v1.pubsub.PullRequest) if possible.
     */
    
      def pull(): SingleResponseRequestBuilder[com.google.pubsub.v1.pubsub.PullRequest, com.google.pubsub.v1.pubsub.PullResponse] = ???
    
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer streamingPull(akka.stream.scaladsl.Source[com.google.pubsub.v1.pubsub.StreamingPullRequest, akka.NotUsed]) if possible.
     */
    
      def streamingPull(): StreamResponseRequestBuilder[akka.stream.scaladsl.Source[com.google.pubsub.v1.pubsub.StreamingPullRequest, akka.NotUsed], com.google.pubsub.v1.pubsub.StreamingPullResponse] = ???
    
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer modifyPushConfig(com.google.pubsub.v1.pubsub.ModifyPushConfigRequest) if possible.
     */
    
      def modifyPushConfig(): SingleResponseRequestBuilder[com.google.pubsub.v1.pubsub.ModifyPushConfigRequest, com.google.protobuf.empty.Empty] = ???
    
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer listSnapshots(com.google.pubsub.v1.pubsub.ListSnapshotsRequest) if possible.
     */
    
      def listSnapshots(): SingleResponseRequestBuilder[com.google.pubsub.v1.pubsub.ListSnapshotsRequest, com.google.pubsub.v1.pubsub.ListSnapshotsResponse] = ???
    
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer createSnapshot(com.google.pubsub.v1.pubsub.CreateSnapshotRequest) if possible.
     */
    
      def createSnapshot(): SingleResponseRequestBuilder[com.google.pubsub.v1.pubsub.CreateSnapshotRequest, com.google.pubsub.v1.pubsub.Snapshot] = ???
    
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer updateSnapshot(com.google.pubsub.v1.pubsub.UpdateSnapshotRequest) if possible.
     */
    
      def updateSnapshot(): SingleResponseRequestBuilder[com.google.pubsub.v1.pubsub.UpdateSnapshotRequest, com.google.pubsub.v1.pubsub.Snapshot] = ???
    
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer deleteSnapshot(com.google.pubsub.v1.pubsub.DeleteSnapshotRequest) if possible.
     */
    
      def deleteSnapshot(): SingleResponseRequestBuilder[com.google.pubsub.v1.pubsub.DeleteSnapshotRequest, com.google.protobuf.empty.Empty] = ???
    
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer seek(com.google.pubsub.v1.pubsub.SeekRequest) if possible.
     */
    
      def seek(): SingleResponseRequestBuilder[com.google.pubsub.v1.pubsub.SeekRequest, com.google.pubsub.v1.pubsub.SeekResponse] = ???
    
  

}
