
// Generated by Akka gRPC. DO NOT EDIT.
package com.google.pubsub.v1.pubsub

import akka.grpc.GrpcClientSettings
import akka.grpc.internal._
import akka.grpc.scaladsl._
import akka.stream.Materializer
import scala.concurrent.{ ExecutionContext, Promise }

import io.grpc._

// Not sealed so users can extend to write their stubs
trait PublisherClient extends Publisher with PublisherClientPowerApi with AkkaGrpcClient

object PublisherClient {
  def apply(settings: GrpcClientSettings)(implicit mat: Materializer, ex: ExecutionContext): PublisherClient =
    new DefaultPublisherClient(settings)
}

final class DefaultPublisherClient(settings: GrpcClientSettings)(implicit mat: Materializer, ex: ExecutionContext) extends PublisherClient {
  import DefaultPublisherClient._

  private val options = NettyClientUtils.callOptions(settings)
  private val clientState = new ClientState(settings)

  
    private def createTopicRequestBuilder(channel:scala.concurrent.Future[ManagedChannel]) = {
      
        new ScalaUnaryRequestBuilder(createTopicDescriptor, channel, options, settings)
      
    }
  
    private def updateTopicRequestBuilder(channel:scala.concurrent.Future[ManagedChannel]) = {
      
        new ScalaUnaryRequestBuilder(updateTopicDescriptor, channel, options, settings)
      
    }
  
    private def publishRequestBuilder(channel:scala.concurrent.Future[ManagedChannel]) = {
      
        new ScalaUnaryRequestBuilder(publishDescriptor, channel, options, settings)
      
    }
  
    private def getTopicRequestBuilder(channel:scala.concurrent.Future[ManagedChannel]) = {
      
        new ScalaUnaryRequestBuilder(getTopicDescriptor, channel, options, settings)
      
    }
  
    private def listTopicsRequestBuilder(channel:scala.concurrent.Future[ManagedChannel]) = {
      
        new ScalaUnaryRequestBuilder(listTopicsDescriptor, channel, options, settings)
      
    }
  
    private def listTopicSubscriptionsRequestBuilder(channel:scala.concurrent.Future[ManagedChannel]) = {
      
        new ScalaUnaryRequestBuilder(listTopicSubscriptionsDescriptor, channel, options, settings)
      
    }
  
    private def deleteTopicRequestBuilder(channel:scala.concurrent.Future[ManagedChannel]) = {
      
        new ScalaUnaryRequestBuilder(deleteTopicDescriptor, channel, options, settings)
      
    }
  

  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer createTopic(com.google.pubsub.v1.pubsub.Topic) if possible.
     */
    
      override def createTopic(): SingleResponseRequestBuilder[com.google.pubsub.v1.pubsub.Topic, com.google.pubsub.v1.pubsub.Topic] =
        clientState.withChannel(createTopicRequestBuilder _)
    

    /**
     * For access to method metadata use the parameterless version of createTopic
     */
    def createTopic(in: com.google.pubsub.v1.pubsub.Topic): scala.concurrent.Future[com.google.pubsub.v1.pubsub.Topic] =
      createTopic().invoke(in)
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer updateTopic(com.google.pubsub.v1.pubsub.UpdateTopicRequest) if possible.
     */
    
      override def updateTopic(): SingleResponseRequestBuilder[com.google.pubsub.v1.pubsub.UpdateTopicRequest, com.google.pubsub.v1.pubsub.Topic] =
        clientState.withChannel(updateTopicRequestBuilder _)
    

    /**
     * For access to method metadata use the parameterless version of updateTopic
     */
    def updateTopic(in: com.google.pubsub.v1.pubsub.UpdateTopicRequest): scala.concurrent.Future[com.google.pubsub.v1.pubsub.Topic] =
      updateTopic().invoke(in)
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer publish(com.google.pubsub.v1.pubsub.PublishRequest) if possible.
     */
    
      override def publish(): SingleResponseRequestBuilder[com.google.pubsub.v1.pubsub.PublishRequest, com.google.pubsub.v1.pubsub.PublishResponse] =
        clientState.withChannel(publishRequestBuilder _)
    

    /**
     * For access to method metadata use the parameterless version of publish
     */
    def publish(in: com.google.pubsub.v1.pubsub.PublishRequest): scala.concurrent.Future[com.google.pubsub.v1.pubsub.PublishResponse] =
      publish().invoke(in)
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer getTopic(com.google.pubsub.v1.pubsub.GetTopicRequest) if possible.
     */
    
      override def getTopic(): SingleResponseRequestBuilder[com.google.pubsub.v1.pubsub.GetTopicRequest, com.google.pubsub.v1.pubsub.Topic] =
        clientState.withChannel(getTopicRequestBuilder _)
    

    /**
     * For access to method metadata use the parameterless version of getTopic
     */
    def getTopic(in: com.google.pubsub.v1.pubsub.GetTopicRequest): scala.concurrent.Future[com.google.pubsub.v1.pubsub.Topic] =
      getTopic().invoke(in)
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer listTopics(com.google.pubsub.v1.pubsub.ListTopicsRequest) if possible.
     */
    
      override def listTopics(): SingleResponseRequestBuilder[com.google.pubsub.v1.pubsub.ListTopicsRequest, com.google.pubsub.v1.pubsub.ListTopicsResponse] =
        clientState.withChannel(listTopicsRequestBuilder _)
    

    /**
     * For access to method metadata use the parameterless version of listTopics
     */
    def listTopics(in: com.google.pubsub.v1.pubsub.ListTopicsRequest): scala.concurrent.Future[com.google.pubsub.v1.pubsub.ListTopicsResponse] =
      listTopics().invoke(in)
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer listTopicSubscriptions(com.google.pubsub.v1.pubsub.ListTopicSubscriptionsRequest) if possible.
     */
    
      override def listTopicSubscriptions(): SingleResponseRequestBuilder[com.google.pubsub.v1.pubsub.ListTopicSubscriptionsRequest, com.google.pubsub.v1.pubsub.ListTopicSubscriptionsResponse] =
        clientState.withChannel(listTopicSubscriptionsRequestBuilder _)
    

    /**
     * For access to method metadata use the parameterless version of listTopicSubscriptions
     */
    def listTopicSubscriptions(in: com.google.pubsub.v1.pubsub.ListTopicSubscriptionsRequest): scala.concurrent.Future[com.google.pubsub.v1.pubsub.ListTopicSubscriptionsResponse] =
      listTopicSubscriptions().invoke(in)
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer deleteTopic(com.google.pubsub.v1.pubsub.DeleteTopicRequest) if possible.
     */
    
      override def deleteTopic(): SingleResponseRequestBuilder[com.google.pubsub.v1.pubsub.DeleteTopicRequest, com.google.protobuf.empty.Empty] =
        clientState.withChannel(deleteTopicRequestBuilder _)
    

    /**
     * For access to method metadata use the parameterless version of deleteTopic
     */
    def deleteTopic(in: com.google.pubsub.v1.pubsub.DeleteTopicRequest): scala.concurrent.Future[com.google.protobuf.empty.Empty] =
      deleteTopic().invoke(in)
  

  override def close(): scala.concurrent.Future[akka.Done] = clientState.close()
  override def closed(): scala.concurrent.Future[akka.Done] = clientState.closed()

}



private object DefaultPublisherClient {

  def apply(settings: GrpcClientSettings)(implicit mat: Materializer, ex: ExecutionContext): PublisherClient =
    new DefaultPublisherClient(settings)

  import Publisher.Serializers._

  
    private val createTopicDescriptor: MethodDescriptor[com.google.pubsub.v1.pubsub.Topic, com.google.pubsub.v1.pubsub.Topic] =
      MethodDescriptor.newBuilder()
        .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
        .setFullMethodName(MethodDescriptor.generateFullMethodName("google.pubsub.v1.Publisher", "CreateTopic"))
        .setRequestMarshaller(new Marshaller(TopicSerializer))
        .setResponseMarshaller(new Marshaller(TopicSerializer))
        .setSampledToLocalTracing(true)
        .build()
  
    private val updateTopicDescriptor: MethodDescriptor[com.google.pubsub.v1.pubsub.UpdateTopicRequest, com.google.pubsub.v1.pubsub.Topic] =
      MethodDescriptor.newBuilder()
        .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
        .setFullMethodName(MethodDescriptor.generateFullMethodName("google.pubsub.v1.Publisher", "UpdateTopic"))
        .setRequestMarshaller(new Marshaller(UpdateTopicRequestSerializer))
        .setResponseMarshaller(new Marshaller(TopicSerializer))
        .setSampledToLocalTracing(true)
        .build()
  
    private val publishDescriptor: MethodDescriptor[com.google.pubsub.v1.pubsub.PublishRequest, com.google.pubsub.v1.pubsub.PublishResponse] =
      MethodDescriptor.newBuilder()
        .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
        .setFullMethodName(MethodDescriptor.generateFullMethodName("google.pubsub.v1.Publisher", "Publish"))
        .setRequestMarshaller(new Marshaller(PublishRequestSerializer))
        .setResponseMarshaller(new Marshaller(PublishResponseSerializer))
        .setSampledToLocalTracing(true)
        .build()
  
    private val getTopicDescriptor: MethodDescriptor[com.google.pubsub.v1.pubsub.GetTopicRequest, com.google.pubsub.v1.pubsub.Topic] =
      MethodDescriptor.newBuilder()
        .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
        .setFullMethodName(MethodDescriptor.generateFullMethodName("google.pubsub.v1.Publisher", "GetTopic"))
        .setRequestMarshaller(new Marshaller(GetTopicRequestSerializer))
        .setResponseMarshaller(new Marshaller(TopicSerializer))
        .setSampledToLocalTracing(true)
        .build()
  
    private val listTopicsDescriptor: MethodDescriptor[com.google.pubsub.v1.pubsub.ListTopicsRequest, com.google.pubsub.v1.pubsub.ListTopicsResponse] =
      MethodDescriptor.newBuilder()
        .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
        .setFullMethodName(MethodDescriptor.generateFullMethodName("google.pubsub.v1.Publisher", "ListTopics"))
        .setRequestMarshaller(new Marshaller(ListTopicsRequestSerializer))
        .setResponseMarshaller(new Marshaller(ListTopicsResponseSerializer))
        .setSampledToLocalTracing(true)
        .build()
  
    private val listTopicSubscriptionsDescriptor: MethodDescriptor[com.google.pubsub.v1.pubsub.ListTopicSubscriptionsRequest, com.google.pubsub.v1.pubsub.ListTopicSubscriptionsResponse] =
      MethodDescriptor.newBuilder()
        .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
        .setFullMethodName(MethodDescriptor.generateFullMethodName("google.pubsub.v1.Publisher", "ListTopicSubscriptions"))
        .setRequestMarshaller(new Marshaller(ListTopicSubscriptionsRequestSerializer))
        .setResponseMarshaller(new Marshaller(ListTopicSubscriptionsResponseSerializer))
        .setSampledToLocalTracing(true)
        .build()
  
    private val deleteTopicDescriptor: MethodDescriptor[com.google.pubsub.v1.pubsub.DeleteTopicRequest, com.google.protobuf.empty.Empty] =
      MethodDescriptor.newBuilder()
        .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
        .setFullMethodName(MethodDescriptor.generateFullMethodName("google.pubsub.v1.Publisher", "DeleteTopic"))
        .setRequestMarshaller(new Marshaller(DeleteTopicRequestSerializer))
        .setResponseMarshaller(new Marshaller(EmptySerializer))
        .setSampledToLocalTracing(true)
        .build()
  
}

trait PublisherClientPowerApi {
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer createTopic(com.google.pubsub.v1.pubsub.Topic) if possible.
     */
    
      def createTopic(): SingleResponseRequestBuilder[com.google.pubsub.v1.pubsub.Topic, com.google.pubsub.v1.pubsub.Topic] = ???
    
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer updateTopic(com.google.pubsub.v1.pubsub.UpdateTopicRequest) if possible.
     */
    
      def updateTopic(): SingleResponseRequestBuilder[com.google.pubsub.v1.pubsub.UpdateTopicRequest, com.google.pubsub.v1.pubsub.Topic] = ???
    
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer publish(com.google.pubsub.v1.pubsub.PublishRequest) if possible.
     */
    
      def publish(): SingleResponseRequestBuilder[com.google.pubsub.v1.pubsub.PublishRequest, com.google.pubsub.v1.pubsub.PublishResponse] = ???
    
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer getTopic(com.google.pubsub.v1.pubsub.GetTopicRequest) if possible.
     */
    
      def getTopic(): SingleResponseRequestBuilder[com.google.pubsub.v1.pubsub.GetTopicRequest, com.google.pubsub.v1.pubsub.Topic] = ???
    
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer listTopics(com.google.pubsub.v1.pubsub.ListTopicsRequest) if possible.
     */
    
      def listTopics(): SingleResponseRequestBuilder[com.google.pubsub.v1.pubsub.ListTopicsRequest, com.google.pubsub.v1.pubsub.ListTopicsResponse] = ???
    
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer listTopicSubscriptions(com.google.pubsub.v1.pubsub.ListTopicSubscriptionsRequest) if possible.
     */
    
      def listTopicSubscriptions(): SingleResponseRequestBuilder[com.google.pubsub.v1.pubsub.ListTopicSubscriptionsRequest, com.google.pubsub.v1.pubsub.ListTopicSubscriptionsResponse] = ???
    
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer deleteTopic(com.google.pubsub.v1.pubsub.DeleteTopicRequest) if possible.
     */
    
      def deleteTopic(): SingleResponseRequestBuilder[com.google.pubsub.v1.pubsub.DeleteTopicRequest, com.google.protobuf.empty.Empty] = ???
    
  

}
