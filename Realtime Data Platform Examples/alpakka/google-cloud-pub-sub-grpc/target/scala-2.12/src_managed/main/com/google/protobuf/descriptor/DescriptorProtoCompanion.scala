// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package com.google.protobuf.descriptor

object DescriptorProtoCompanion extends _root_.scalapb.GeneratedFileObject {
  lazy val dependencies: Seq[_root_.scalapb.GeneratedFileObject] = Seq(
  )
  lazy val messagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq(
    com.google.protobuf.descriptor.FileDescriptorSet,
    com.google.protobuf.descriptor.FileDescriptorProto,
    com.google.protobuf.descriptor.DescriptorProto,
    com.google.protobuf.descriptor.ExtensionRangeOptions,
    com.google.protobuf.descriptor.FieldDescriptorProto,
    com.google.protobuf.descriptor.OneofDescriptorProto,
    com.google.protobuf.descriptor.EnumDescriptorProto,
    com.google.protobuf.descriptor.EnumValueDescriptorProto,
    com.google.protobuf.descriptor.ServiceDescriptorProto,
    com.google.protobuf.descriptor.MethodDescriptorProto,
    com.google.protobuf.descriptor.FileOptions,
    com.google.protobuf.descriptor.MessageOptions,
    com.google.protobuf.descriptor.FieldOptions,
    com.google.protobuf.descriptor.OneofOptions,
    com.google.protobuf.descriptor.EnumOptions,
    com.google.protobuf.descriptor.EnumValueOptions,
    com.google.protobuf.descriptor.ServiceOptions,
    com.google.protobuf.descriptor.MethodOptions,
    com.google.protobuf.descriptor.UninterpretedOption,
    com.google.protobuf.descriptor.SourceCodeInfo,
    com.google.protobuf.descriptor.GeneratedCodeInfo
  )
  private lazy val ProtoBytes: Array[Byte] =
      scalapb.Encoding.fromBase64(scala.collection.Seq(
  """CiBnb29nbGUvcHJvdG9idWYvZGVzY3JpcHRvci5wcm90bxIPZ29vZ2xlLnByb3RvYnVmIlgKEUZpbGVEZXNjcmlwdG9yU2V0E
  kMKBGZpbGUYASADKAsyJC5nb29nbGUucHJvdG9idWYuRmlsZURlc2NyaXB0b3JQcm90b0IJ4j8GEgRmaWxlUgRmaWxlIqkGChNGa
  WxlRGVzY3JpcHRvclByb3RvEh0KBG5hbWUYASABKAlCCeI/BhIEbmFtZVIEbmFtZRImCgdwYWNrYWdlGAIgASgJQgziPwkSB3BhY
  2thZ2VSB3BhY2thZ2USLwoKZGVwZW5kZW5jeRgDIAMoCUIP4j8MEgpkZXBlbmRlbmN5UgpkZXBlbmRlbmN5EkIKEXB1YmxpY19kZ
  XBlbmRlbmN5GAogAygFQhXiPxISEHB1YmxpY0RlcGVuZGVuY3lSEHB1YmxpY0RlcGVuZGVuY3kSPAoPd2Vha19kZXBlbmRlbmN5G
  AsgAygFQhPiPxASDndlYWtEZXBlbmRlbmN5Ug53ZWFrRGVwZW5kZW5jeRJVCgxtZXNzYWdlX3R5cGUYBCADKAsyIC5nb29nbGUuc
  HJvdG9idWYuRGVzY3JpcHRvclByb3RvQhDiPw0SC21lc3NhZ2VUeXBlUgttZXNzYWdlVHlwZRJQCgllbnVtX3R5cGUYBSADKAsyJ
  C5nb29nbGUucHJvdG9idWYuRW51bURlc2NyaXB0b3JQcm90b0IN4j8KEghlbnVtVHlwZVIIZW51bVR5cGUSTwoHc2VydmljZRgGI
  AMoCzInLmdvb2dsZS5wcm90b2J1Zi5TZXJ2aWNlRGVzY3JpcHRvclByb3RvQgziPwkSB3NlcnZpY2VSB3NlcnZpY2USUwoJZXh0Z
  W5zaW9uGAcgAygLMiUuZ29vZ2xlLnByb3RvYnVmLkZpZWxkRGVzY3JpcHRvclByb3RvQg7iPwsSCWV4dGVuc2lvblIJZXh0ZW5za
  W9uEkQKB29wdGlvbnMYCCABKAsyHC5nb29nbGUucHJvdG9idWYuRmlsZU9wdGlvbnNCDOI/CRIHb3B0aW9uc1IHb3B0aW9ucxJeC
  hBzb3VyY2VfY29kZV9pbmZvGAkgASgLMh8uZ29vZ2xlLnByb3RvYnVmLlNvdXJjZUNvZGVJbmZvQhPiPxASDnNvdXJjZUNvZGVJb
  mZvUg5zb3VyY2VDb2RlSW5mbxIjCgZzeW50YXgYDCABKAlCC+I/CBIGc3ludGF4UgZzeW50YXgilQgKD0Rlc2NyaXB0b3JQcm90b
  xIdCgRuYW1lGAEgASgJQgniPwYSBG5hbWVSBG5hbWUSRwoFZmllbGQYAiADKAsyJS5nb29nbGUucHJvdG9idWYuRmllbGREZXNjc
  mlwdG9yUHJvdG9CCuI/BxIFZmllbGRSBWZpZWxkElMKCWV4dGVuc2lvbhgGIAMoCzIlLmdvb2dsZS5wcm90b2J1Zi5GaWVsZERlc
  2NyaXB0b3JQcm90b0IO4j8LEglleHRlbnNpb25SCWV4dGVuc2lvbhJSCgtuZXN0ZWRfdHlwZRgDIAMoCzIgLmdvb2dsZS5wcm90b
  2J1Zi5EZXNjcmlwdG9yUHJvdG9CD+I/DBIKbmVzdGVkVHlwZVIKbmVzdGVkVHlwZRJQCgllbnVtX3R5cGUYBCADKAsyJC5nb29nb
  GUucHJvdG9idWYuRW51bURlc2NyaXB0b3JQcm90b0IN4j8KEghlbnVtVHlwZVIIZW51bVR5cGUSbQoPZXh0ZW5zaW9uX3JhbmdlG
  AUgAygLMi8uZ29vZ2xlLnByb3RvYnVmLkRlc2NyaXB0b3JQcm90by5FeHRlbnNpb25SYW5nZUIT4j8QEg5leHRlbnNpb25SYW5nZ
  VIOZXh0ZW5zaW9uUmFuZ2USVAoKb25lb2ZfZGVjbBgIIAMoCzIlLmdvb2dsZS5wcm90b2J1Zi5PbmVvZkRlc2NyaXB0b3JQcm90b
  0IO4j8LEglvbmVvZkRlY2xSCW9uZW9mRGVjbBJHCgdvcHRpb25zGAcgASgLMh8uZ29vZ2xlLnByb3RvYnVmLk1lc3NhZ2VPcHRpb
  25zQgziPwkSB29wdGlvbnNSB29wdGlvbnMSaQoOcmVzZXJ2ZWRfcmFuZ2UYCSADKAsyLi5nb29nbGUucHJvdG9idWYuRGVzY3Jpc
  HRvclByb3RvLlJlc2VydmVkUmFuZ2VCEuI/DxINcmVzZXJ2ZWRSYW5nZVINcmVzZXJ2ZWRSYW5nZRI2Cg1yZXNlcnZlZF9uYW1lG
  AogAygJQhHiPw4SDHJlc2VydmVkTmFtZVIMcmVzZXJ2ZWROYW1lGp4BCg5FeHRlbnNpb25SYW5nZRIgCgVzdGFydBgBIAEoBUIK4
  j8HEgVzdGFydFIFc3RhcnQSGgoDZW5kGAIgASgFQgjiPwUSA2VuZFIDZW5kEk4KB29wdGlvbnMYAyABKAsyJi5nb29nbGUucHJvd
  G9idWYuRXh0ZW5zaW9uUmFuZ2VPcHRpb25zQgziPwkSB29wdGlvbnNSB29wdGlvbnMaTQoNUmVzZXJ2ZWRSYW5nZRIgCgVzdGFyd
  BgBIAEoBUIK4j8HEgVzdGFydFIFc3RhcnQSGgoDZW5kGAIgASgFQgjiPwUSA2VuZFIDZW5kIpYBChVFeHRlbnNpb25SYW5nZU9wd
  GlvbnMScgoUdW5pbnRlcnByZXRlZF9vcHRpb24Y5wcgAygLMiQuZ29vZ2xlLnByb3RvYnVmLlVuaW50ZXJwcmV0ZWRPcHRpb25CG
  OI/FRITdW5pbnRlcnByZXRlZE9wdGlvblITdW5pbnRlcnByZXRlZE9wdGlvbioJCOgHEICAgIACIqYHChRGaWVsZERlc2NyaXB0b
  3JQcm90bxIdCgRuYW1lGAEgASgJQgniPwYSBG5hbWVSBG5hbWUSIwoGbnVtYmVyGAMgASgFQgviPwgSBm51bWJlclIGbnVtYmVyE
  k0KBWxhYmVsGAQgASgOMisuZ29vZ2xlLnByb3RvYnVmLkZpZWxkRGVzY3JpcHRvclByb3RvLkxhYmVsQgriPwcSBWxhYmVsUgVsY
  WJlbBJJCgR0eXBlGAUgASgOMiouZ29vZ2xlLnByb3RvYnVmLkZpZWxkRGVzY3JpcHRvclByb3RvLlR5cGVCCeI/BhIEdHlwZVIEd
  HlwZRIqCgl0eXBlX25hbWUYBiABKAlCDeI/ChIIdHlwZU5hbWVSCHR5cGVOYW1lEikKCGV4dGVuZGVlGAIgASgJQg3iPwoSCGV4d
  GVuZGVlUghleHRlbmRlZRI2Cg1kZWZhdWx0X3ZhbHVlGAcgASgJQhHiPw4SDGRlZmF1bHRWYWx1ZVIMZGVmYXVsdFZhbHVlEjAKC
  29uZW9mX2luZGV4GAkgASgFQg/iPwwSCm9uZW9mSW5kZXhSCm9uZW9mSW5kZXgSKgoJanNvbl9uYW1lGAogASgJQg3iPwoSCGpzb
  25OYW1lUghqc29uTmFtZRJFCgdvcHRpb25zGAggASgLMh0uZ29vZ2xlLnByb3RvYnVmLkZpZWxkT3B0aW9uc0IM4j8JEgdvcHRpb
  25zUgdvcHRpb25zIrYCCgRUeXBlEg8KC1RZUEVfRE9VQkxFEAESDgoKVFlQRV9GTE9BVBACEg4KClRZUEVfSU5UNjQQAxIPCgtUW
  VBFX1VJTlQ2NBAEEg4KClRZUEVfSU5UMzIQBRIQCgxUWVBFX0ZJWEVENjQQBhIQCgxUWVBFX0ZJWEVEMzIQBxINCglUWVBFX0JPT
  0wQCBIPCgtUWVBFX1NUUklORxAJEg4KClRZUEVfR1JPVVAQChIQCgxUWVBFX01FU1NBR0UQCxIOCgpUWVBFX0JZVEVTEAwSDwoLV
  FlQRV9VSU5UMzIQDRINCglUWVBFX0VOVU0QDhIRCg1UWVBFX1NGSVhFRDMyEA8SEQoNVFlQRV9TRklYRUQ2NBAQEg8KC1RZUEVfU
  0lOVDMyEBESDwoLVFlQRV9TSU5UNjQQEiJDCgVMYWJlbBISCg5MQUJFTF9PUFRJT05BTBABEhIKDkxBQkVMX1JFUVVJUkVEEAISE
  goOTEFCRUxfUkVQRUFURUQQAyJ8ChRPbmVvZkRlc2NyaXB0b3JQcm90bxIdCgRuYW1lGAEgASgJQgniPwYSBG5hbWVSBG5hbWUSR
  QoHb3B0aW9ucxgCIAEoCzIdLmdvb2dsZS5wcm90b2J1Zi5PbmVvZk9wdGlvbnNCDOI/CRIHb3B0aW9uc1IHb3B0aW9ucyLFAwoTR
  W51bURlc2NyaXB0b3JQcm90bxIdCgRuYW1lGAEgASgJQgniPwYSBG5hbWVSBG5hbWUSSwoFdmFsdWUYAiADKAsyKS5nb29nbGUuc
  HJvdG9idWYuRW51bVZhbHVlRGVzY3JpcHRvclByb3RvQgriPwcSBXZhbHVlUgV2YWx1ZRJECgdvcHRpb25zGAMgASgLMhwuZ29vZ
  2xlLnByb3RvYnVmLkVudW1PcHRpb25zQgziPwkSB29wdGlvbnNSB29wdGlvbnMScQoOcmVzZXJ2ZWRfcmFuZ2UYBCADKAsyNi5nb
  29nbGUucHJvdG9idWYuRW51bURlc2NyaXB0b3JQcm90by5FbnVtUmVzZXJ2ZWRSYW5nZUIS4j8PEg1yZXNlcnZlZFJhbmdlUg1yZ
  XNlcnZlZFJhbmdlEjYKDXJlc2VydmVkX25hbWUYBSADKAlCEeI/DhIMcmVzZXJ2ZWROYW1lUgxyZXNlcnZlZE5hbWUaUQoRRW51b
  VJlc2VydmVkUmFuZ2USIAoFc3RhcnQYASABKAVCCuI/BxIFc3RhcnRSBXN0YXJ0EhoKA2VuZBgCIAEoBUII4j8FEgNlbmRSA2VuZ
  CKpAQoYRW51bVZhbHVlRGVzY3JpcHRvclByb3RvEh0KBG5hbWUYASABKAlCCeI/BhIEbmFtZVIEbmFtZRIjCgZudW1iZXIYAiABK
  AVCC+I/CBIGbnVtYmVyUgZudW1iZXISSQoHb3B0aW9ucxgDIAEoCzIhLmdvb2dsZS5wcm90b2J1Zi5FbnVtVmFsdWVPcHRpb25zQ
  gziPwkSB29wdGlvbnNSB29wdGlvbnMizQEKFlNlcnZpY2VEZXNjcmlwdG9yUHJvdG8SHQoEbmFtZRgBIAEoCUIJ4j8GEgRuYW1lU
  gRuYW1lEksKBm1ldGhvZBgCIAMoCzImLmdvb2dsZS5wcm90b2J1Zi5NZXRob2REZXNjcmlwdG9yUHJvdG9CC+I/CBIGbWV0aG9kU
  gZtZXRob2QSRwoHb3B0aW9ucxgDIAEoCzIfLmdvb2dsZS5wcm90b2J1Zi5TZXJ2aWNlT3B0aW9uc0IM4j8JEgdvcHRpb25zUgdvc
  HRpb25zIu8CChVNZXRob2REZXNjcmlwdG9yUHJvdG8SHQoEbmFtZRgBIAEoCUIJ4j8GEgRuYW1lUgRuYW1lEi0KCmlucHV0X3R5c
  GUYAiABKAlCDuI/CxIJaW5wdXRUeXBlUglpbnB1dFR5cGUSMAoLb3V0cHV0X3R5cGUYAyABKAlCD+I/DBIKb3V0cHV0VHlwZVIKb
  3V0cHV0VHlwZRJGCgdvcHRpb25zGAQgASgLMh4uZ29vZ2xlLnByb3RvYnVmLk1ldGhvZE9wdGlvbnNCDOI/CRIHb3B0aW9uc1IHb
  3B0aW9ucxJGChBjbGllbnRfc3RyZWFtaW5nGAUgASgIOgVmYWxzZUIU4j8REg9jbGllbnRTdHJlYW1pbmdSD2NsaWVudFN0cmVhb
  WluZxJGChBzZXJ2ZXJfc3RyZWFtaW5nGAYgASgIOgVmYWxzZUIU4j8REg9zZXJ2ZXJTdHJlYW1pbmdSD3NlcnZlclN0cmVhbWluZ
  yLfCwoLRmlsZU9wdGlvbnMSMwoMamF2YV9wYWNrYWdlGAEgASgJQhDiPw0SC2phdmFQYWNrYWdlUgtqYXZhUGFja2FnZRJJChRqY
  XZhX291dGVyX2NsYXNzbmFtZRgIIAEoCUIX4j8UEhJqYXZhT3V0ZXJDbGFzc25hbWVSEmphdmFPdXRlckNsYXNzbmFtZRJNChNqY
  XZhX211bHRpcGxlX2ZpbGVzGAogASgIOgVmYWxzZUIW4j8TEhFqYXZhTXVsdGlwbGVGaWxlc1IRamF2YU11bHRpcGxlRmlsZXMSY
  godamF2YV9nZW5lcmF0ZV9lcXVhbHNfYW5kX2hhc2gYFCABKAhCIBgB4j8bEhlqYXZhR2VuZXJhdGVFcXVhbHNBbmRIYXNoUhlqY
  XZhR2VuZXJhdGVFcXVhbHNBbmRIYXNoElQKFmphdmFfc3RyaW5nX2NoZWNrX3V0ZjgYGyABKAg6BWZhbHNlQhjiPxUSE2phdmFTd
  HJpbmdDaGVja1V0ZjhSE2phdmFTdHJpbmdDaGVja1V0ZjgSZQoMb3B0aW1pemVfZm9yGAkgASgOMikuZ29vZ2xlLnByb3RvYnVmL
  kZpbGVPcHRpb25zLk9wdGltaXplTW9kZToFU1BFRURCEOI/DRILb3B0aW1pemVGb3JSC29wdGltaXplRm9yEi0KCmdvX3BhY2thZ
  2UYCyABKAlCDuI/CxIJZ29QYWNrYWdlUglnb1BhY2thZ2USTQoTY2NfZ2VuZXJpY19zZXJ2aWNlcxgQIAEoCDoFZmFsc2VCFuI/E
  xIRY2NHZW5lcmljU2VydmljZXNSEWNjR2VuZXJpY1NlcnZpY2VzElMKFWphdmFfZ2VuZXJpY19zZXJ2aWNlcxgRIAEoCDoFZmFsc
  2VCGOI/FRITamF2YUdlbmVyaWNTZXJ2aWNlc1ITamF2YUdlbmVyaWNTZXJ2aWNlcxJNChNweV9nZW5lcmljX3NlcnZpY2VzGBIgA
  SgIOgVmYWxzZUIW4j8TEhFweUdlbmVyaWNTZXJ2aWNlc1IRcHlHZW5lcmljU2VydmljZXMSUAoUcGhwX2dlbmVyaWNfc2VydmljZ
  XMYKiABKAg6BWZhbHNlQhfiPxQSEnBocEdlbmVyaWNTZXJ2aWNlc1IScGhwR2VuZXJpY1NlcnZpY2VzEjYKCmRlcHJlY2F0ZWQYF
  yABKAg6BWZhbHNlQg/iPwwSCmRlcHJlY2F0ZWRSCmRlcHJlY2F0ZWQSRAoQY2NfZW5hYmxlX2FyZW5hcxgfIAEoCDoFZmFsc2VCE
  +I/EBIOY2NFbmFibGVBcmVuYXNSDmNjRW5hYmxlQXJlbmFzEkAKEW9iamNfY2xhc3NfcHJlZml4GCQgASgJQhTiPxESD29iamNDb
  GFzc1ByZWZpeFIPb2JqY0NsYXNzUHJlZml4Ej8KEGNzaGFycF9uYW1lc3BhY2UYJSABKAlCFOI/ERIPY3NoYXJwTmFtZXNwYWNlU
  g9jc2hhcnBOYW1lc3BhY2USMwoMc3dpZnRfcHJlZml4GCcgASgJQhDiPw0SC3N3aWZ0UHJlZml4Ugtzd2lmdFByZWZpeBI9ChBwa
  HBfY2xhc3NfcHJlZml4GCggASgJQhPiPxASDnBocENsYXNzUHJlZml4Ug5waHBDbGFzc1ByZWZpeBI2Cg1waHBfbmFtZXNwYWNlG
  CkgASgJQhHiPw4SDHBocE5hbWVzcGFjZVIMcGhwTmFtZXNwYWNlEnIKFHVuaW50ZXJwcmV0ZWRfb3B0aW9uGOcHIAMoCzIkLmdvb
  2dsZS5wcm90b2J1Zi5VbmludGVycHJldGVkT3B0aW9uQhjiPxUSE3VuaW50ZXJwcmV0ZWRPcHRpb25SE3VuaW50ZXJwcmV0ZWRPc
  HRpb24iOgoMT3B0aW1pemVNb2RlEgkKBVNQRUVEEAESDQoJQ09ERV9TSVpFEAISEAoMTElURV9SVU5USU1FEAMqCQjoBxCAgICAA
  koECCYQJyLJAwoOTWVzc2FnZU9wdGlvbnMSVwoXbWVzc2FnZV9zZXRfd2lyZV9mb3JtYXQYASABKAg6BWZhbHNlQhniPxYSFG1lc
  3NhZ2VTZXRXaXJlRm9ybWF0UhRtZXNzYWdlU2V0V2lyZUZvcm1hdBJvCh9ub19zdGFuZGFyZF9kZXNjcmlwdG9yX2FjY2Vzc29yG
  AIgASgIOgVmYWxzZUIh4j8eEhxub1N0YW5kYXJkRGVzY3JpcHRvckFjY2Vzc29yUhxub1N0YW5kYXJkRGVzY3JpcHRvckFjY2Vzc
  29yEjYKCmRlcHJlY2F0ZWQYAyABKAg6BWZhbHNlQg/iPwwSCmRlcHJlY2F0ZWRSCmRlcHJlY2F0ZWQSKgoJbWFwX2VudHJ5GAcgA
  SgIQg3iPwoSCG1hcEVudHJ5UghtYXBFbnRyeRJyChR1bmludGVycHJldGVkX29wdGlvbhjnByADKAsyJC5nb29nbGUucHJvdG9id
  WYuVW5pbnRlcnByZXRlZE9wdGlvbkIY4j8VEhN1bmludGVycHJldGVkT3B0aW9uUhN1bmludGVycHJldGVkT3B0aW9uKgkI6AcQg
  ICAgAJKBAgIEAlKBAgJEAoiyQQKDEZpZWxkT3B0aW9ucxJNCgVjdHlwZRgBIAEoDjIjLmdvb2dsZS5wcm90b2J1Zi5GaWVsZE9wd
  GlvbnMuQ1R5cGU6BlNUUklOR0IK4j8HEgVjdHlwZVIFY3R5cGUSIwoGcGFja2VkGAIgASgIQgviPwgSBnBhY2tlZFIGcGFja2VkE
  lQKBmpzdHlwZRgGIAEoDjIkLmdvb2dsZS5wcm90b2J1Zi5GaWVsZE9wdGlvbnMuSlNUeXBlOglKU19OT1JNQUxCC+I/CBIGanN0e
  XBlUgZqc3R5cGUSJAoEbGF6eRgFIAEoCDoFZmFsc2VCCeI/BhIEbGF6eVIEbGF6eRI2CgpkZXByZWNhdGVkGAMgASgIOgVmYWxzZ
  UIP4j8MEgpkZXByZWNhdGVkUgpkZXByZWNhdGVkEiQKBHdlYWsYCiABKAg6BWZhbHNlQgniPwYSBHdlYWtSBHdlYWsScgoUdW5pb
  nRlcnByZXRlZF9vcHRpb24Y5wcgAygLMiQuZ29vZ2xlLnByb3RvYnVmLlVuaW50ZXJwcmV0ZWRPcHRpb25CGOI/FRITdW5pbnRlc
  nByZXRlZE9wdGlvblITdW5pbnRlcnByZXRlZE9wdGlvbiIvCgVDVHlwZRIKCgZTVFJJTkcQABIICgRDT1JEEAESEAoMU1RSSU5HX
  1BJRUNFEAIiNQoGSlNUeXBlEg0KCUpTX05PUk1BTBAAEg0KCUpTX1NUUklORxABEg0KCUpTX05VTUJFUhACKgkI6AcQgICAgAJKB
  AgEEAUijQEKDE9uZW9mT3B0aW9ucxJyChR1bmludGVycHJldGVkX29wdGlvbhjnByADKAsyJC5nb29nbGUucHJvdG9idWYuVW5pb
  nRlcnByZXRlZE9wdGlvbkIY4j8VEhN1bmludGVycHJldGVkT3B0aW9uUhN1bmludGVycHJldGVkT3B0aW9uKgkI6AcQgICAgAIi/
  AEKC0VudW1PcHRpb25zEjAKC2FsbG93X2FsaWFzGAIgASgIQg/iPwwSCmFsbG93QWxpYXNSCmFsbG93QWxpYXMSNgoKZGVwcmVjY
  XRlZBgDIAEoCDoFZmFsc2VCD+I/DBIKZGVwcmVjYXRlZFIKZGVwcmVjYXRlZBJyChR1bmludGVycHJldGVkX29wdGlvbhjnByADK
  AsyJC5nb29nbGUucHJvdG9idWYuVW5pbnRlcnByZXRlZE9wdGlvbkIY4j8VEhN1bmludGVycHJldGVkT3B0aW9uUhN1bmludGVyc
  HJldGVkT3B0aW9uKgkI6AcQgICAgAJKBAgFEAYiyQEKEEVudW1WYWx1ZU9wdGlvbnMSNgoKZGVwcmVjYXRlZBgBIAEoCDoFZmFsc
  2VCD+I/DBIKZGVwcmVjYXRlZFIKZGVwcmVjYXRlZBJyChR1bmludGVycHJldGVkX29wdGlvbhjnByADKAsyJC5nb29nbGUucHJvd
  G9idWYuVW5pbnRlcnByZXRlZE9wdGlvbkIY4j8VEhN1bmludGVycHJldGVkT3B0aW9uUhN1bmludGVycHJldGVkT3B0aW9uKgkI6
  AcQgICAgAIixwEKDlNlcnZpY2VPcHRpb25zEjYKCmRlcHJlY2F0ZWQYISABKAg6BWZhbHNlQg/iPwwSCmRlcHJlY2F0ZWRSCmRlc
  HJlY2F0ZWQScgoUdW5pbnRlcnByZXRlZF9vcHRpb24Y5wcgAygLMiQuZ29vZ2xlLnByb3RvYnVmLlVuaW50ZXJwcmV0ZWRPcHRpb
  25CGOI/FRITdW5pbnRlcnByZXRlZE9wdGlvblITdW5pbnRlcnByZXRlZE9wdGlvbioJCOgHEICAgIACIqMDCg1NZXRob2RPcHRpb
  25zEjYKCmRlcHJlY2F0ZWQYISABKAg6BWZhbHNlQg/iPwwSCmRlcHJlY2F0ZWRSCmRlcHJlY2F0ZWQSiAEKEWlkZW1wb3RlbmN5X
  2xldmVsGCIgASgOMi8uZ29vZ2xlLnByb3RvYnVmLk1ldGhvZE9wdGlvbnMuSWRlbXBvdGVuY3lMZXZlbDoTSURFTVBPVEVOQ1lfV
  U5LTk9XTkIV4j8SEhBpZGVtcG90ZW5jeUxldmVsUhBpZGVtcG90ZW5jeUxldmVsEnIKFHVuaW50ZXJwcmV0ZWRfb3B0aW9uGOcHI
  AMoCzIkLmdvb2dsZS5wcm90b2J1Zi5VbmludGVycHJldGVkT3B0aW9uQhjiPxUSE3VuaW50ZXJwcmV0ZWRPcHRpb25SE3VuaW50Z
  XJwcmV0ZWRPcHRpb24iUAoQSWRlbXBvdGVuY3lMZXZlbBIXChNJREVNUE9URU5DWV9VTktOT1dOEAASEwoPTk9fU0lERV9FRkZFQ
  1RTEAESDgoKSURFTVBPVEVOVBACKgkI6AcQgICAgAIiwwQKE1VuaW50ZXJwcmV0ZWRPcHRpb24STAoEbmFtZRgCIAMoCzItLmdvb
  2dsZS5wcm90b2J1Zi5VbmludGVycHJldGVkT3B0aW9uLk5hbWVQYXJ0QgniPwYSBG5hbWVSBG5hbWUSPwoQaWRlbnRpZmllcl92Y
  Wx1ZRgDIAEoCUIU4j8REg9pZGVudGlmaWVyVmFsdWVSD2lkZW50aWZpZXJWYWx1ZRJDChJwb3NpdGl2ZV9pbnRfdmFsdWUYBCABK
  ARCFeI/EhIQcG9zaXRpdmVJbnRWYWx1ZVIQcG9zaXRpdmVJbnRWYWx1ZRJDChJuZWdhdGl2ZV9pbnRfdmFsdWUYBSABKANCFeI/E
  hIQbmVnYXRpdmVJbnRWYWx1ZVIQbmVnYXRpdmVJbnRWYWx1ZRIzCgxkb3VibGVfdmFsdWUYBiABKAFCEOI/DRILZG91YmxlVmFsd
  WVSC2RvdWJsZVZhbHVlEjMKDHN0cmluZ192YWx1ZRgHIAEoDEIQ4j8NEgtzdHJpbmdWYWx1ZVILc3RyaW5nVmFsdWUSPAoPYWdnc
  mVnYXRlX3ZhbHVlGAggASgJQhPiPxASDmFnZ3JlZ2F0ZVZhbHVlUg5hZ2dyZWdhdGVWYWx1ZRprCghOYW1lUGFydBIqCgluYW1lX
  3BhcnQYASACKAlCDeI/ChIIbmFtZVBhcnRSCG5hbWVQYXJ0EjMKDGlzX2V4dGVuc2lvbhgCIAIoCEIQ4j8NEgtpc0V4dGVuc2lvb
  lILaXNFeHRlbnNpb24ikwMKDlNvdXJjZUNvZGVJbmZvElMKCGxvY2F0aW9uGAEgAygLMiguZ29vZ2xlLnByb3RvYnVmLlNvdXJjZ
  UNvZGVJbmZvLkxvY2F0aW9uQg3iPwoSCGxvY2F0aW9uUghsb2NhdGlvbhqrAgoITG9jYXRpb24SHwoEcGF0aBgBIAMoBUILEAHiP
  wYSBHBhdGhSBHBhdGgSHwoEc3BhbhgCIAMoBUILEAHiPwYSBHNwYW5SBHNwYW4SPwoQbGVhZGluZ19jb21tZW50cxgDIAEoCUIU4
  j8REg9sZWFkaW5nQ29tbWVudHNSD2xlYWRpbmdDb21tZW50cxJCChF0cmFpbGluZ19jb21tZW50cxgEIAEoCUIV4j8SEhB0cmFpb
  GluZ0NvbW1lbnRzUhB0cmFpbGluZ0NvbW1lbnRzElgKGWxlYWRpbmdfZGV0YWNoZWRfY29tbWVudHMYBiADKAlCHOI/GRIXbGVhZ
  GluZ0RldGFjaGVkQ29tbWVudHNSF2xlYWRpbmdEZXRhY2hlZENvbW1lbnRzIpMCChFHZW5lcmF0ZWRDb2RlSW5mbxJeCgphbm5vd
  GF0aW9uGAEgAygLMi0uZ29vZ2xlLnByb3RvYnVmLkdlbmVyYXRlZENvZGVJbmZvLkFubm90YXRpb25CD+I/DBIKYW5ub3RhdGlvb
  lIKYW5ub3RhdGlvbhqdAQoKQW5ub3RhdGlvbhIfCgRwYXRoGAEgAygFQgsQAeI/BhIEcGF0aFIEcGF0aBIwCgtzb3VyY2VfZmlsZ
  RgCIAEoCUIP4j8MEgpzb3VyY2VGaWxlUgpzb3VyY2VGaWxlEiAKBWJlZ2luGAMgASgFQgriPwcSBWJlZ2luUgViZWdpbhIaCgNlb
  mQYBCABKAVCCOI/BRIDZW5kUgNlbmRCjwEKE2NvbS5nb29nbGUucHJvdG9idWZCEERlc2NyaXB0b3JQcm90b3NIAVo+Z2l0aHViL
  mNvbS9nb2xhbmcvcHJvdG9idWYvcHJvdG9jLWdlbi1nby9kZXNjcmlwdG9yO2Rlc2NyaXB0b3L4AQGiAgNHUEKqAhpHb29nbGUuU
  HJvdG9idWYuUmVmbGVjdGlvbg=="""
      ).mkString)
  lazy val scalaDescriptor: _root_.scalapb.descriptors.FileDescriptor = {
    val scalaProto = com.google.protobuf.descriptor.FileDescriptorProto.parseFrom(ProtoBytes)
    _root_.scalapb.descriptors.FileDescriptor.buildFrom(scalaProto, dependencies.map(_.scalaDescriptor))
  }
  lazy val javaDescriptor: com.google.protobuf.Descriptors.FileDescriptor = {
    val javaProto = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(ProtoBytes)
    com.google.protobuf.Descriptors.FileDescriptor.buildFrom(javaProto, Array(
    ))
  }
  @deprecated("Use javaDescriptor instead. In a future version this will refer to scalaDescriptor.", "ScalaPB 0.5.47")
  def descriptor: com.google.protobuf.Descriptors.FileDescriptor = javaDescriptor
}