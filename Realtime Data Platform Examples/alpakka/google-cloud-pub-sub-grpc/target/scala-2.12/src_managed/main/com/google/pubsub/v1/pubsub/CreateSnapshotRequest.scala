// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.google.pubsub.v1.pubsub

/** Request for the `CreateSnapshot` method.
  *
  * @param name
  *   Optional user-provided name for this snapshot.
  *   If the name is not provided in the request, the server will assign a random
  *   name for this snapshot on the same project as the subscription.
  *   Note that for REST API requests, you must specify a name.
  *   Format is `projects/{project}/snapshots/{snap}`.
  * @param subscription
  *   The subscription whose backlog the snapshot retains.
  *   Specifically, the created snapshot is guaranteed to retain:
  *    (a) The existing backlog on the subscription. More precisely, this is
  *        defined as the messages in the subscription's backlog that are
  *        unacknowledged upon the successful completion of the
  *        `CreateSnapshot` request; as well as:
  *    (b) Any messages published to the subscription's topic following the
  *        successful completion of the CreateSnapshot request.
  *   Format is `projects/{project}/subscriptions/{sub}`.
  */
@SerialVersionUID(0L)
final case class CreateSnapshotRequest(
    name: _root_.scala.Predef.String = "",
    subscription: _root_.scala.Predef.String = ""
    ) extends scalapb.GeneratedMessage with scalapb.Message[CreateSnapshotRequest] with scalapb.lenses.Updatable[CreateSnapshotRequest] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = name
        if (__value != "") {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      
      {
        val __value = subscription
        if (__value != "") {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = name
        if (__v != "") {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = subscription
        if (__v != "") {
          _output__.writeString(2, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.google.pubsub.v1.pubsub.CreateSnapshotRequest = {
      var __name = this.name
      var __subscription = this.subscription
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __name = _input__.readString()
          case 18 =>
            __subscription = _input__.readString()
          case tag => _input__.skipField(tag)
        }
      }
      com.google.pubsub.v1.pubsub.CreateSnapshotRequest(
          name = __name,
          subscription = __subscription
      )
    }
    def withName(__v: _root_.scala.Predef.String): CreateSnapshotRequest = copy(name = __v)
    def withSubscription(__v: _root_.scala.Predef.String): CreateSnapshotRequest = copy(subscription = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = name
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = subscription
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(name)
        case 2 => _root_.scalapb.descriptors.PString(subscription)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = com.google.pubsub.v1.pubsub.CreateSnapshotRequest
}

object CreateSnapshotRequest extends scalapb.GeneratedMessageCompanion[com.google.pubsub.v1.pubsub.CreateSnapshotRequest] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.google.pubsub.v1.pubsub.CreateSnapshotRequest] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): com.google.pubsub.v1.pubsub.CreateSnapshotRequest = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.google.pubsub.v1.pubsub.CreateSnapshotRequest(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(1), "").asInstanceOf[_root_.scala.Predef.String]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.google.pubsub.v1.pubsub.CreateSnapshotRequest] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.google.pubsub.v1.pubsub.CreateSnapshotRequest(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = PubsubProto.javaDescriptor.getMessageTypes.get(26)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = PubsubProto.scalaDescriptor.messages(26)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.google.pubsub.v1.pubsub.CreateSnapshotRequest(
  )
  implicit class CreateSnapshotRequestLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.google.pubsub.v1.pubsub.CreateSnapshotRequest]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.google.pubsub.v1.pubsub.CreateSnapshotRequest](_l) {
    def name: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.name)((c_, f_) => c_.copy(name = f_))
    def subscription: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.subscription)((c_, f_) => c_.copy(subscription = f_))
  }
  final val NAME_FIELD_NUMBER = 1
  final val SUBSCRIPTION_FIELD_NUMBER = 2
  def of(
    name: _root_.scala.Predef.String,
    subscription: _root_.scala.Predef.String
  ): _root_.com.google.pubsub.v1.pubsub.CreateSnapshotRequest = _root_.com.google.pubsub.v1.pubsub.CreateSnapshotRequest(
    name,
    subscription
  )
}
