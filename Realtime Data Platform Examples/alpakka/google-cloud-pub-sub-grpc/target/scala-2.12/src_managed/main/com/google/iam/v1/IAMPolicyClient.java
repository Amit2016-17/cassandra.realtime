
// Generated by Akka gRPC. DO NOT EDIT.
package com.google.iam.v1;

import akka.annotation.*;
import akka.grpc.internal.*;
import akka.grpc.GrpcClientSettings;
import akka.grpc.javadsl.AkkaGrpcClient;
import akka.grpc.javadsl.SingleResponseRequestBuilder;
import akka.grpc.javadsl.StreamResponseRequestBuilder;
import akka.stream.ActorMaterializer;
import akka.stream.Materializer;
import akka.stream.OverflowStrategy;

import io.grpc.ManagedChannel;
import io.grpc.MethodDescriptor;

import static com.google.iam.v1.IAMPolicy.Serializers.*;

import scala.concurrent.ExecutionContext;
import scala.compat.java8.FutureConverters;

public abstract class IAMPolicyClient extends IAMPolicyClientPowerApi implements IAMPolicy, AkkaGrpcClient {
  public static final IAMPolicyClient create(GrpcClientSettings settings, Materializer mat, ExecutionContext ec) {
    return new DefaultIAMPolicyClient(settings, mat, ec);
  }

  protected final static class DefaultIAMPolicyClient extends IAMPolicyClient {

      private final ClientState clientState;
      private final GrpcClientSettings settings;
      private final io.grpc.CallOptions options;
      private final Materializer mat;
      private final ExecutionContext ec;

      private DefaultIAMPolicyClient(GrpcClientSettings settings, Materializer mat, ExecutionContext ec) {
        this.settings = settings;
        this.mat = mat;
        this.ec = ec;
        this.clientState = new ClientState(settings, mat, ec);
        this.options = NettyClientUtils.callOptions(settings);

        if (mat instanceof ActorMaterializer) {
          ((ActorMaterializer) mat).system().getWhenTerminated().whenComplete((v, e) -> close());
        }
      }

  
    
      private final SingleResponseRequestBuilder<com.google.iam.v1.SetIamPolicyRequest, com.google.iam.v1.Policy> setIamPolicyRequestBuilder(scala.concurrent.Future<ManagedChannel> channel){
        return new JavaUnaryRequestBuilder<>(setIamPolicyDescriptor, channel, options, settings, ec);
      }
    
  
    
      private final SingleResponseRequestBuilder<com.google.iam.v1.GetIamPolicyRequest, com.google.iam.v1.Policy> getIamPolicyRequestBuilder(scala.concurrent.Future<ManagedChannel> channel){
        return new JavaUnaryRequestBuilder<>(getIamPolicyDescriptor, channel, options, settings, ec);
      }
    
  
    
      private final SingleResponseRequestBuilder<com.google.iam.v1.TestIamPermissionsRequest, com.google.iam.v1.TestIamPermissionsResponse> testIamPermissionsRequestBuilder(scala.concurrent.Future<ManagedChannel> channel){
        return new JavaUnaryRequestBuilder<>(testIamPermissionsDescriptor, channel, options, settings, ec);
      }
    
  

      

        /**
         * For access to method metadata use the parameterless version of setIamPolicy
         */
        public java.util.concurrent.CompletionStage<com.google.iam.v1.Policy> setIamPolicy(com.google.iam.v1.SetIamPolicyRequest request) {
          return setIamPolicy().invoke(request);
        }

        /**
         * Lower level "lifted" version of the method, giving access to request metadata etc.
         * prefer setIamPolicy(com.google.iam.v1.SetIamPolicyRequest) if possible.
         */
        
          public SingleResponseRequestBuilder<com.google.iam.v1.SetIamPolicyRequest, com.google.iam.v1.Policy> setIamPolicy()
        
        {
          return clientState.withChannel( this::setIamPolicyRequestBuilder);
        }
      

        /**
         * For access to method metadata use the parameterless version of getIamPolicy
         */
        public java.util.concurrent.CompletionStage<com.google.iam.v1.Policy> getIamPolicy(com.google.iam.v1.GetIamPolicyRequest request) {
          return getIamPolicy().invoke(request);
        }

        /**
         * Lower level "lifted" version of the method, giving access to request metadata etc.
         * prefer getIamPolicy(com.google.iam.v1.GetIamPolicyRequest) if possible.
         */
        
          public SingleResponseRequestBuilder<com.google.iam.v1.GetIamPolicyRequest, com.google.iam.v1.Policy> getIamPolicy()
        
        {
          return clientState.withChannel( this::getIamPolicyRequestBuilder);
        }
      

        /**
         * For access to method metadata use the parameterless version of testIamPermissions
         */
        public java.util.concurrent.CompletionStage<com.google.iam.v1.TestIamPermissionsResponse> testIamPermissions(com.google.iam.v1.TestIamPermissionsRequest request) {
          return testIamPermissions().invoke(request);
        }

        /**
         * Lower level "lifted" version of the method, giving access to request metadata etc.
         * prefer testIamPermissions(com.google.iam.v1.TestIamPermissionsRequest) if possible.
         */
        
          public SingleResponseRequestBuilder<com.google.iam.v1.TestIamPermissionsRequest, com.google.iam.v1.TestIamPermissionsResponse> testIamPermissions()
        
        {
          return clientState.withChannel( this::testIamPermissionsRequestBuilder);
        }
      

      
        private static MethodDescriptor<com.google.iam.v1.SetIamPolicyRequest, com.google.iam.v1.Policy> setIamPolicyDescriptor =
          MethodDescriptor.<com.google.iam.v1.SetIamPolicyRequest, com.google.iam.v1.Policy>newBuilder()
            .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
            .setFullMethodName(MethodDescriptor.generateFullMethodName("google.iam.v1.IAMPolicy", "SetIamPolicy"))
            .setRequestMarshaller(new ProtoMarshaller<com.google.iam.v1.SetIamPolicyRequest>(SetIamPolicyRequestSerializer))
            .setResponseMarshaller(new ProtoMarshaller<com.google.iam.v1.Policy>(PolicySerializer))
            .setSampledToLocalTracing(true)
            .build();
        
        private static MethodDescriptor<com.google.iam.v1.GetIamPolicyRequest, com.google.iam.v1.Policy> getIamPolicyDescriptor =
          MethodDescriptor.<com.google.iam.v1.GetIamPolicyRequest, com.google.iam.v1.Policy>newBuilder()
            .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
            .setFullMethodName(MethodDescriptor.generateFullMethodName("google.iam.v1.IAMPolicy", "GetIamPolicy"))
            .setRequestMarshaller(new ProtoMarshaller<com.google.iam.v1.GetIamPolicyRequest>(GetIamPolicyRequestSerializer))
            .setResponseMarshaller(new ProtoMarshaller<com.google.iam.v1.Policy>(PolicySerializer))
            .setSampledToLocalTracing(true)
            .build();
        
        private static MethodDescriptor<com.google.iam.v1.TestIamPermissionsRequest, com.google.iam.v1.TestIamPermissionsResponse> testIamPermissionsDescriptor =
          MethodDescriptor.<com.google.iam.v1.TestIamPermissionsRequest, com.google.iam.v1.TestIamPermissionsResponse>newBuilder()
            .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
            .setFullMethodName(MethodDescriptor.generateFullMethodName("google.iam.v1.IAMPolicy", "TestIamPermissions"))
            .setRequestMarshaller(new ProtoMarshaller<com.google.iam.v1.TestIamPermissionsRequest>(TestIamPermissionsRequestSerializer))
            .setResponseMarshaller(new ProtoMarshaller<com.google.iam.v1.TestIamPermissionsResponse>(TestIamPermissionsResponseSerializer))
            .setSampledToLocalTracing(true)
            .build();
        

      /**
       * Initiates a shutdown in which preexisting and new calls are cancelled.
       */
      public java.util.concurrent.CompletionStage<akka.Done> close() {
        return clientState.closeCS() ;
      }

     /**
      * Returns a CompletionState that completes successfully when shutdown via close()
      * or exceptionally if a connection can not be established after maxConnectionAttempts.
      */
      public java.util.concurrent.CompletionStage<akka.Done> closed() {
        return clientState.closedCS();
      }
  }

}



