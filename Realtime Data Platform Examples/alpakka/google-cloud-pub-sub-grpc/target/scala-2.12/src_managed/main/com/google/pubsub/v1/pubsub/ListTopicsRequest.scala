// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.google.pubsub.v1.pubsub

/** Request for the `ListTopics` method.
  *
  * @param project
  *   The name of the cloud project that topics belong to.
  *   Format is `projects/{project}`.
  * @param pageSize
  *   Maximum number of topics to return.
  * @param pageToken
  *   The value returned by the last `ListTopicsResponse`; indicates that this is
  *   a continuation of a prior `ListTopics` call, and that the system should
  *   return the next page of data.
  */
@SerialVersionUID(0L)
final case class ListTopicsRequest(
    project: _root_.scala.Predef.String = "",
    pageSize: _root_.scala.Int = 0,
    pageToken: _root_.scala.Predef.String = ""
    ) extends scalapb.GeneratedMessage with scalapb.Message[ListTopicsRequest] with scalapb.lenses.Updatable[ListTopicsRequest] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = project
        if (__value != "") {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      
      {
        val __value = pageSize
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(2, __value)
        }
      };
      
      {
        val __value = pageToken
        if (__value != "") {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
        }
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = project
        if (__v != "") {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = pageSize
        if (__v != 0) {
          _output__.writeInt32(2, __v)
        }
      };
      {
        val __v = pageToken
        if (__v != "") {
          _output__.writeString(3, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.google.pubsub.v1.pubsub.ListTopicsRequest = {
      var __project = this.project
      var __pageSize = this.pageSize
      var __pageToken = this.pageToken
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __project = _input__.readString()
          case 16 =>
            __pageSize = _input__.readInt32()
          case 26 =>
            __pageToken = _input__.readString()
          case tag => _input__.skipField(tag)
        }
      }
      com.google.pubsub.v1.pubsub.ListTopicsRequest(
          project = __project,
          pageSize = __pageSize,
          pageToken = __pageToken
      )
    }
    def withProject(__v: _root_.scala.Predef.String): ListTopicsRequest = copy(project = __v)
    def withPageSize(__v: _root_.scala.Int): ListTopicsRequest = copy(pageSize = __v)
    def withPageToken(__v: _root_.scala.Predef.String): ListTopicsRequest = copy(pageToken = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = project
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = pageSize
          if (__t != 0) __t else null
        }
        case 3 => {
          val __t = pageToken
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(project)
        case 2 => _root_.scalapb.descriptors.PInt(pageSize)
        case 3 => _root_.scalapb.descriptors.PString(pageToken)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = com.google.pubsub.v1.pubsub.ListTopicsRequest
}

object ListTopicsRequest extends scalapb.GeneratedMessageCompanion[com.google.pubsub.v1.pubsub.ListTopicsRequest] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.google.pubsub.v1.pubsub.ListTopicsRequest] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): com.google.pubsub.v1.pubsub.ListTopicsRequest = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.google.pubsub.v1.pubsub.ListTopicsRequest(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(1), 0).asInstanceOf[_root_.scala.Int],
      __fieldsMap.getOrElse(__fields.get(2), "").asInstanceOf[_root_.scala.Predef.String]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.google.pubsub.v1.pubsub.ListTopicsRequest] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.google.pubsub.v1.pubsub.ListTopicsRequest(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = PubsubProto.javaDescriptor.getMessageTypes.get(6)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = PubsubProto.scalaDescriptor.messages(6)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.google.pubsub.v1.pubsub.ListTopicsRequest(
  )
  implicit class ListTopicsRequestLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.google.pubsub.v1.pubsub.ListTopicsRequest]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.google.pubsub.v1.pubsub.ListTopicsRequest](_l) {
    def project: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.project)((c_, f_) => c_.copy(project = f_))
    def pageSize: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.pageSize)((c_, f_) => c_.copy(pageSize = f_))
    def pageToken: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.pageToken)((c_, f_) => c_.copy(pageToken = f_))
  }
  final val PROJECT_FIELD_NUMBER = 1
  final val PAGE_SIZE_FIELD_NUMBER = 2
  final val PAGE_TOKEN_FIELD_NUMBER = 3
  def of(
    project: _root_.scala.Predef.String,
    pageSize: _root_.scala.Int,
    pageToken: _root_.scala.Predef.String
  ): _root_.com.google.pubsub.v1.pubsub.ListTopicsRequest = _root_.com.google.pubsub.v1.pubsub.ListTopicsRequest(
    project,
    pageSize,
    pageToken
  )
}
