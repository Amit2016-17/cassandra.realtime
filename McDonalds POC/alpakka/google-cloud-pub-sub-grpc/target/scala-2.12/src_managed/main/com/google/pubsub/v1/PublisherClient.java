
// Generated by Akka gRPC. DO NOT EDIT.
package com.google.pubsub.v1;

import akka.annotation.*;
import akka.grpc.internal.*;
import akka.grpc.GrpcClientSettings;
import akka.grpc.javadsl.AkkaGrpcClient;
import akka.grpc.javadsl.SingleResponseRequestBuilder;
import akka.grpc.javadsl.StreamResponseRequestBuilder;
import akka.stream.ActorMaterializer;
import akka.stream.Materializer;
import akka.stream.OverflowStrategy;

import io.grpc.ManagedChannel;
import io.grpc.MethodDescriptor;

import static com.google.pubsub.v1.Publisher.Serializers.*;

import scala.concurrent.ExecutionContext;
import scala.compat.java8.FutureConverters;

public abstract class PublisherClient extends PublisherClientPowerApi implements Publisher, AkkaGrpcClient {
  public static final PublisherClient create(GrpcClientSettings settings, Materializer mat, ExecutionContext ec) {
    return new DefaultPublisherClient(settings, mat, ec);
  }

  protected final static class DefaultPublisherClient extends PublisherClient {

      private final ClientState clientState;
      private final GrpcClientSettings settings;
      private final io.grpc.CallOptions options;
      private final Materializer mat;
      private final ExecutionContext ec;

      private DefaultPublisherClient(GrpcClientSettings settings, Materializer mat, ExecutionContext ec) {
        this.settings = settings;
        this.mat = mat;
        this.ec = ec;
        this.clientState = new ClientState(settings, mat, ec);
        this.options = NettyClientUtils.callOptions(settings);

        if (mat instanceof ActorMaterializer) {
          ((ActorMaterializer) mat).system().getWhenTerminated().whenComplete((v, e) -> close());
        }
      }

  
    
      private final SingleResponseRequestBuilder<com.google.pubsub.v1.Topic, com.google.pubsub.v1.Topic> createTopicRequestBuilder(scala.concurrent.Future<ManagedChannel> channel){
        return new JavaUnaryRequestBuilder<>(createTopicDescriptor, channel, options, settings, ec);
      }
    
  
    
      private final SingleResponseRequestBuilder<com.google.pubsub.v1.UpdateTopicRequest, com.google.pubsub.v1.Topic> updateTopicRequestBuilder(scala.concurrent.Future<ManagedChannel> channel){
        return new JavaUnaryRequestBuilder<>(updateTopicDescriptor, channel, options, settings, ec);
      }
    
  
    
      private final SingleResponseRequestBuilder<com.google.pubsub.v1.PublishRequest, com.google.pubsub.v1.PublishResponse> publishRequestBuilder(scala.concurrent.Future<ManagedChannel> channel){
        return new JavaUnaryRequestBuilder<>(publishDescriptor, channel, options, settings, ec);
      }
    
  
    
      private final SingleResponseRequestBuilder<com.google.pubsub.v1.GetTopicRequest, com.google.pubsub.v1.Topic> getTopicRequestBuilder(scala.concurrent.Future<ManagedChannel> channel){
        return new JavaUnaryRequestBuilder<>(getTopicDescriptor, channel, options, settings, ec);
      }
    
  
    
      private final SingleResponseRequestBuilder<com.google.pubsub.v1.ListTopicsRequest, com.google.pubsub.v1.ListTopicsResponse> listTopicsRequestBuilder(scala.concurrent.Future<ManagedChannel> channel){
        return new JavaUnaryRequestBuilder<>(listTopicsDescriptor, channel, options, settings, ec);
      }
    
  
    
      private final SingleResponseRequestBuilder<com.google.pubsub.v1.ListTopicSubscriptionsRequest, com.google.pubsub.v1.ListTopicSubscriptionsResponse> listTopicSubscriptionsRequestBuilder(scala.concurrent.Future<ManagedChannel> channel){
        return new JavaUnaryRequestBuilder<>(listTopicSubscriptionsDescriptor, channel, options, settings, ec);
      }
    
  
    
      private final SingleResponseRequestBuilder<com.google.pubsub.v1.DeleteTopicRequest, com.google.protobuf.Empty> deleteTopicRequestBuilder(scala.concurrent.Future<ManagedChannel> channel){
        return new JavaUnaryRequestBuilder<>(deleteTopicDescriptor, channel, options, settings, ec);
      }
    
  

      

        /**
         * For access to method metadata use the parameterless version of createTopic
         */
        public java.util.concurrent.CompletionStage<com.google.pubsub.v1.Topic> createTopic(com.google.pubsub.v1.Topic request) {
          return createTopic().invoke(request);
        }

        /**
         * Lower level "lifted" version of the method, giving access to request metadata etc.
         * prefer createTopic(com.google.pubsub.v1.Topic) if possible.
         */
        
          public SingleResponseRequestBuilder<com.google.pubsub.v1.Topic, com.google.pubsub.v1.Topic> createTopic()
        
        {
          return clientState.withChannel( this::createTopicRequestBuilder);
        }
      

        /**
         * For access to method metadata use the parameterless version of updateTopic
         */
        public java.util.concurrent.CompletionStage<com.google.pubsub.v1.Topic> updateTopic(com.google.pubsub.v1.UpdateTopicRequest request) {
          return updateTopic().invoke(request);
        }

        /**
         * Lower level "lifted" version of the method, giving access to request metadata etc.
         * prefer updateTopic(com.google.pubsub.v1.UpdateTopicRequest) if possible.
         */
        
          public SingleResponseRequestBuilder<com.google.pubsub.v1.UpdateTopicRequest, com.google.pubsub.v1.Topic> updateTopic()
        
        {
          return clientState.withChannel( this::updateTopicRequestBuilder);
        }
      

        /**
         * For access to method metadata use the parameterless version of publish
         */
        public java.util.concurrent.CompletionStage<com.google.pubsub.v1.PublishResponse> publish(com.google.pubsub.v1.PublishRequest request) {
          return publish().invoke(request);
        }

        /**
         * Lower level "lifted" version of the method, giving access to request metadata etc.
         * prefer publish(com.google.pubsub.v1.PublishRequest) if possible.
         */
        
          public SingleResponseRequestBuilder<com.google.pubsub.v1.PublishRequest, com.google.pubsub.v1.PublishResponse> publish()
        
        {
          return clientState.withChannel( this::publishRequestBuilder);
        }
      

        /**
         * For access to method metadata use the parameterless version of getTopic
         */
        public java.util.concurrent.CompletionStage<com.google.pubsub.v1.Topic> getTopic(com.google.pubsub.v1.GetTopicRequest request) {
          return getTopic().invoke(request);
        }

        /**
         * Lower level "lifted" version of the method, giving access to request metadata etc.
         * prefer getTopic(com.google.pubsub.v1.GetTopicRequest) if possible.
         */
        
          public SingleResponseRequestBuilder<com.google.pubsub.v1.GetTopicRequest, com.google.pubsub.v1.Topic> getTopic()
        
        {
          return clientState.withChannel( this::getTopicRequestBuilder);
        }
      

        /**
         * For access to method metadata use the parameterless version of listTopics
         */
        public java.util.concurrent.CompletionStage<com.google.pubsub.v1.ListTopicsResponse> listTopics(com.google.pubsub.v1.ListTopicsRequest request) {
          return listTopics().invoke(request);
        }

        /**
         * Lower level "lifted" version of the method, giving access to request metadata etc.
         * prefer listTopics(com.google.pubsub.v1.ListTopicsRequest) if possible.
         */
        
          public SingleResponseRequestBuilder<com.google.pubsub.v1.ListTopicsRequest, com.google.pubsub.v1.ListTopicsResponse> listTopics()
        
        {
          return clientState.withChannel( this::listTopicsRequestBuilder);
        }
      

        /**
         * For access to method metadata use the parameterless version of listTopicSubscriptions
         */
        public java.util.concurrent.CompletionStage<com.google.pubsub.v1.ListTopicSubscriptionsResponse> listTopicSubscriptions(com.google.pubsub.v1.ListTopicSubscriptionsRequest request) {
          return listTopicSubscriptions().invoke(request);
        }

        /**
         * Lower level "lifted" version of the method, giving access to request metadata etc.
         * prefer listTopicSubscriptions(com.google.pubsub.v1.ListTopicSubscriptionsRequest) if possible.
         */
        
          public SingleResponseRequestBuilder<com.google.pubsub.v1.ListTopicSubscriptionsRequest, com.google.pubsub.v1.ListTopicSubscriptionsResponse> listTopicSubscriptions()
        
        {
          return clientState.withChannel( this::listTopicSubscriptionsRequestBuilder);
        }
      

        /**
         * For access to method metadata use the parameterless version of deleteTopic
         */
        public java.util.concurrent.CompletionStage<com.google.protobuf.Empty> deleteTopic(com.google.pubsub.v1.DeleteTopicRequest request) {
          return deleteTopic().invoke(request);
        }

        /**
         * Lower level "lifted" version of the method, giving access to request metadata etc.
         * prefer deleteTopic(com.google.pubsub.v1.DeleteTopicRequest) if possible.
         */
        
          public SingleResponseRequestBuilder<com.google.pubsub.v1.DeleteTopicRequest, com.google.protobuf.Empty> deleteTopic()
        
        {
          return clientState.withChannel( this::deleteTopicRequestBuilder);
        }
      

      
        private static MethodDescriptor<com.google.pubsub.v1.Topic, com.google.pubsub.v1.Topic> createTopicDescriptor =
          MethodDescriptor.<com.google.pubsub.v1.Topic, com.google.pubsub.v1.Topic>newBuilder()
            .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
            .setFullMethodName(MethodDescriptor.generateFullMethodName("google.pubsub.v1.Publisher", "CreateTopic"))
            .setRequestMarshaller(new ProtoMarshaller<com.google.pubsub.v1.Topic>(TopicSerializer))
            .setResponseMarshaller(new ProtoMarshaller<com.google.pubsub.v1.Topic>(TopicSerializer))
            .setSampledToLocalTracing(true)
            .build();
        
        private static MethodDescriptor<com.google.pubsub.v1.UpdateTopicRequest, com.google.pubsub.v1.Topic> updateTopicDescriptor =
          MethodDescriptor.<com.google.pubsub.v1.UpdateTopicRequest, com.google.pubsub.v1.Topic>newBuilder()
            .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
            .setFullMethodName(MethodDescriptor.generateFullMethodName("google.pubsub.v1.Publisher", "UpdateTopic"))
            .setRequestMarshaller(new ProtoMarshaller<com.google.pubsub.v1.UpdateTopicRequest>(UpdateTopicRequestSerializer))
            .setResponseMarshaller(new ProtoMarshaller<com.google.pubsub.v1.Topic>(TopicSerializer))
            .setSampledToLocalTracing(true)
            .build();
        
        private static MethodDescriptor<com.google.pubsub.v1.PublishRequest, com.google.pubsub.v1.PublishResponse> publishDescriptor =
          MethodDescriptor.<com.google.pubsub.v1.PublishRequest, com.google.pubsub.v1.PublishResponse>newBuilder()
            .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
            .setFullMethodName(MethodDescriptor.generateFullMethodName("google.pubsub.v1.Publisher", "Publish"))
            .setRequestMarshaller(new ProtoMarshaller<com.google.pubsub.v1.PublishRequest>(PublishRequestSerializer))
            .setResponseMarshaller(new ProtoMarshaller<com.google.pubsub.v1.PublishResponse>(PublishResponseSerializer))
            .setSampledToLocalTracing(true)
            .build();
        
        private static MethodDescriptor<com.google.pubsub.v1.GetTopicRequest, com.google.pubsub.v1.Topic> getTopicDescriptor =
          MethodDescriptor.<com.google.pubsub.v1.GetTopicRequest, com.google.pubsub.v1.Topic>newBuilder()
            .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
            .setFullMethodName(MethodDescriptor.generateFullMethodName("google.pubsub.v1.Publisher", "GetTopic"))
            .setRequestMarshaller(new ProtoMarshaller<com.google.pubsub.v1.GetTopicRequest>(GetTopicRequestSerializer))
            .setResponseMarshaller(new ProtoMarshaller<com.google.pubsub.v1.Topic>(TopicSerializer))
            .setSampledToLocalTracing(true)
            .build();
        
        private static MethodDescriptor<com.google.pubsub.v1.ListTopicsRequest, com.google.pubsub.v1.ListTopicsResponse> listTopicsDescriptor =
          MethodDescriptor.<com.google.pubsub.v1.ListTopicsRequest, com.google.pubsub.v1.ListTopicsResponse>newBuilder()
            .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
            .setFullMethodName(MethodDescriptor.generateFullMethodName("google.pubsub.v1.Publisher", "ListTopics"))
            .setRequestMarshaller(new ProtoMarshaller<com.google.pubsub.v1.ListTopicsRequest>(ListTopicsRequestSerializer))
            .setResponseMarshaller(new ProtoMarshaller<com.google.pubsub.v1.ListTopicsResponse>(ListTopicsResponseSerializer))
            .setSampledToLocalTracing(true)
            .build();
        
        private static MethodDescriptor<com.google.pubsub.v1.ListTopicSubscriptionsRequest, com.google.pubsub.v1.ListTopicSubscriptionsResponse> listTopicSubscriptionsDescriptor =
          MethodDescriptor.<com.google.pubsub.v1.ListTopicSubscriptionsRequest, com.google.pubsub.v1.ListTopicSubscriptionsResponse>newBuilder()
            .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
            .setFullMethodName(MethodDescriptor.generateFullMethodName("google.pubsub.v1.Publisher", "ListTopicSubscriptions"))
            .setRequestMarshaller(new ProtoMarshaller<com.google.pubsub.v1.ListTopicSubscriptionsRequest>(ListTopicSubscriptionsRequestSerializer))
            .setResponseMarshaller(new ProtoMarshaller<com.google.pubsub.v1.ListTopicSubscriptionsResponse>(ListTopicSubscriptionsResponseSerializer))
            .setSampledToLocalTracing(true)
            .build();
        
        private static MethodDescriptor<com.google.pubsub.v1.DeleteTopicRequest, com.google.protobuf.Empty> deleteTopicDescriptor =
          MethodDescriptor.<com.google.pubsub.v1.DeleteTopicRequest, com.google.protobuf.Empty>newBuilder()
            .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
            .setFullMethodName(MethodDescriptor.generateFullMethodName("google.pubsub.v1.Publisher", "DeleteTopic"))
            .setRequestMarshaller(new ProtoMarshaller<com.google.pubsub.v1.DeleteTopicRequest>(DeleteTopicRequestSerializer))
            .setResponseMarshaller(new ProtoMarshaller<com.google.protobuf.Empty>(EmptySerializer))
            .setSampledToLocalTracing(true)
            .build();
        

      /**
       * Initiates a shutdown in which preexisting and new calls are cancelled.
       */
      public java.util.concurrent.CompletionStage<akka.Done> close() {
        return clientState.closeCS() ;
      }

     /**
      * Returns a CompletionState that completes successfully when shutdown via close()
      * or exceptionally if a connection can not be established after maxConnectionAttempts.
      */
      public java.util.concurrent.CompletionStage<akka.Done> closed() {
        return clientState.closedCS();
      }
  }

}



