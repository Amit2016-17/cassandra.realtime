
// Generated by Akka gRPC. DO NOT EDIT.
package com.google.iam.v1.iam_policy

import akka.grpc.GrpcClientSettings
import akka.grpc.internal._
import akka.grpc.scaladsl._
import akka.stream.Materializer
import scala.concurrent.{ ExecutionContext, Promise }

import io.grpc._

// Not sealed so users can extend to write their stubs
trait IAMPolicyClient extends IAMPolicy with IAMPolicyClientPowerApi with AkkaGrpcClient

object IAMPolicyClient {
  def apply(settings: GrpcClientSettings)(implicit mat: Materializer, ex: ExecutionContext): IAMPolicyClient =
    new DefaultIAMPolicyClient(settings)
}

final class DefaultIAMPolicyClient(settings: GrpcClientSettings)(implicit mat: Materializer, ex: ExecutionContext) extends IAMPolicyClient {
  import DefaultIAMPolicyClient._

  private val options = NettyClientUtils.callOptions(settings)
  private val clientState = new ClientState(settings)

  
    private def setIamPolicyRequestBuilder(channel:scala.concurrent.Future[ManagedChannel]) = {
      
        new ScalaUnaryRequestBuilder(setIamPolicyDescriptor, channel, options, settings)
      
    }
  
    private def getIamPolicyRequestBuilder(channel:scala.concurrent.Future[ManagedChannel]) = {
      
        new ScalaUnaryRequestBuilder(getIamPolicyDescriptor, channel, options, settings)
      
    }
  
    private def testIamPermissionsRequestBuilder(channel:scala.concurrent.Future[ManagedChannel]) = {
      
        new ScalaUnaryRequestBuilder(testIamPermissionsDescriptor, channel, options, settings)
      
    }
  

  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer setIamPolicy(com.google.iam.v1.iam_policy.SetIamPolicyRequest) if possible.
     */
    
      override def setIamPolicy(): SingleResponseRequestBuilder[com.google.iam.v1.iam_policy.SetIamPolicyRequest, com.google.iam.v1.policy.Policy] =
        clientState.withChannel(setIamPolicyRequestBuilder _)
    

    /**
     * For access to method metadata use the parameterless version of setIamPolicy
     */
    def setIamPolicy(in: com.google.iam.v1.iam_policy.SetIamPolicyRequest): scala.concurrent.Future[com.google.iam.v1.policy.Policy] =
      setIamPolicy().invoke(in)
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer getIamPolicy(com.google.iam.v1.iam_policy.GetIamPolicyRequest) if possible.
     */
    
      override def getIamPolicy(): SingleResponseRequestBuilder[com.google.iam.v1.iam_policy.GetIamPolicyRequest, com.google.iam.v1.policy.Policy] =
        clientState.withChannel(getIamPolicyRequestBuilder _)
    

    /**
     * For access to method metadata use the parameterless version of getIamPolicy
     */
    def getIamPolicy(in: com.google.iam.v1.iam_policy.GetIamPolicyRequest): scala.concurrent.Future[com.google.iam.v1.policy.Policy] =
      getIamPolicy().invoke(in)
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer testIamPermissions(com.google.iam.v1.iam_policy.TestIamPermissionsRequest) if possible.
     */
    
      override def testIamPermissions(): SingleResponseRequestBuilder[com.google.iam.v1.iam_policy.TestIamPermissionsRequest, com.google.iam.v1.iam_policy.TestIamPermissionsResponse] =
        clientState.withChannel(testIamPermissionsRequestBuilder _)
    

    /**
     * For access to method metadata use the parameterless version of testIamPermissions
     */
    def testIamPermissions(in: com.google.iam.v1.iam_policy.TestIamPermissionsRequest): scala.concurrent.Future[com.google.iam.v1.iam_policy.TestIamPermissionsResponse] =
      testIamPermissions().invoke(in)
  

  override def close(): scala.concurrent.Future[akka.Done] = clientState.close()
  override def closed(): scala.concurrent.Future[akka.Done] = clientState.closed()

}



private object DefaultIAMPolicyClient {

  def apply(settings: GrpcClientSettings)(implicit mat: Materializer, ex: ExecutionContext): IAMPolicyClient =
    new DefaultIAMPolicyClient(settings)

  import IAMPolicy.Serializers._

  
    private val setIamPolicyDescriptor: MethodDescriptor[com.google.iam.v1.iam_policy.SetIamPolicyRequest, com.google.iam.v1.policy.Policy] =
      MethodDescriptor.newBuilder()
        .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
        .setFullMethodName(MethodDescriptor.generateFullMethodName("google.iam.v1.IAMPolicy", "SetIamPolicy"))
        .setRequestMarshaller(new Marshaller(SetIamPolicyRequestSerializer))
        .setResponseMarshaller(new Marshaller(PolicySerializer))
        .setSampledToLocalTracing(true)
        .build()
  
    private val getIamPolicyDescriptor: MethodDescriptor[com.google.iam.v1.iam_policy.GetIamPolicyRequest, com.google.iam.v1.policy.Policy] =
      MethodDescriptor.newBuilder()
        .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
        .setFullMethodName(MethodDescriptor.generateFullMethodName("google.iam.v1.IAMPolicy", "GetIamPolicy"))
        .setRequestMarshaller(new Marshaller(GetIamPolicyRequestSerializer))
        .setResponseMarshaller(new Marshaller(PolicySerializer))
        .setSampledToLocalTracing(true)
        .build()
  
    private val testIamPermissionsDescriptor: MethodDescriptor[com.google.iam.v1.iam_policy.TestIamPermissionsRequest, com.google.iam.v1.iam_policy.TestIamPermissionsResponse] =
      MethodDescriptor.newBuilder()
        .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
        .setFullMethodName(MethodDescriptor.generateFullMethodName("google.iam.v1.IAMPolicy", "TestIamPermissions"))
        .setRequestMarshaller(new Marshaller(TestIamPermissionsRequestSerializer))
        .setResponseMarshaller(new Marshaller(TestIamPermissionsResponseSerializer))
        .setSampledToLocalTracing(true)
        .build()
  
}

trait IAMPolicyClientPowerApi {
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer setIamPolicy(com.google.iam.v1.iam_policy.SetIamPolicyRequest) if possible.
     */
    
      def setIamPolicy(): SingleResponseRequestBuilder[com.google.iam.v1.iam_policy.SetIamPolicyRequest, com.google.iam.v1.policy.Policy] = ???
    
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer getIamPolicy(com.google.iam.v1.iam_policy.GetIamPolicyRequest) if possible.
     */
    
      def getIamPolicy(): SingleResponseRequestBuilder[com.google.iam.v1.iam_policy.GetIamPolicyRequest, com.google.iam.v1.policy.Policy] = ???
    
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer testIamPermissions(com.google.iam.v1.iam_policy.TestIamPermissionsRequest) if possible.
     */
    
      def testIamPermissions(): SingleResponseRequestBuilder[com.google.iam.v1.iam_policy.TestIamPermissionsRequest, com.google.iam.v1.iam_policy.TestIamPermissionsResponse] = ???
    
  

}
