// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.google.iam.v1.logging.audit_data

/** Audit log information specific to Cloud IAM. This message is serialized
  * as an `Any` type in the `ServiceData` message of an
  * `AuditLog` message.
  *
  * @param policyDelta
  *   Policy delta between the original policy and the newly set policy.
  */
@SerialVersionUID(0L)
final case class AuditData(
    policyDelta: _root_.scala.Option[com.google.iam.v1.policy.PolicyDelta] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[AuditData] with scalapb.lenses.Updatable[AuditData] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (policyDelta.isDefined) {
        val __value = policyDelta.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      policyDelta.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.google.iam.v1.logging.audit_data.AuditData = {
      var __policyDelta = this.policyDelta
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 18 =>
            __policyDelta = Option(_root_.scalapb.LiteParser.readMessage(_input__, __policyDelta.getOrElse(com.google.iam.v1.policy.PolicyDelta.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      com.google.iam.v1.logging.audit_data.AuditData(
          policyDelta = __policyDelta
      )
    }
    def getPolicyDelta: com.google.iam.v1.policy.PolicyDelta = policyDelta.getOrElse(com.google.iam.v1.policy.PolicyDelta.defaultInstance)
    def clearPolicyDelta: AuditData = copy(policyDelta = None)
    def withPolicyDelta(__v: com.google.iam.v1.policy.PolicyDelta): AuditData = copy(policyDelta = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 2 => policyDelta.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 2 => policyDelta.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = com.google.iam.v1.logging.audit_data.AuditData
}

object AuditData extends scalapb.GeneratedMessageCompanion[com.google.iam.v1.logging.audit_data.AuditData] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.google.iam.v1.logging.audit_data.AuditData] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): com.google.iam.v1.logging.audit_data.AuditData = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.google.iam.v1.logging.audit_data.AuditData(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[_root_.scala.Option[com.google.iam.v1.policy.PolicyDelta]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.google.iam.v1.logging.audit_data.AuditData] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.google.iam.v1.logging.audit_data.AuditData(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[com.google.iam.v1.policy.PolicyDelta]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = AuditDataProto.javaDescriptor.getMessageTypes.get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = AuditDataProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = com.google.iam.v1.policy.PolicyDelta
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.google.iam.v1.logging.audit_data.AuditData(
  )
  implicit class AuditDataLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.google.iam.v1.logging.audit_data.AuditData]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.google.iam.v1.logging.audit_data.AuditData](_l) {
    def policyDelta: _root_.scalapb.lenses.Lens[UpperPB, com.google.iam.v1.policy.PolicyDelta] = field(_.getPolicyDelta)((c_, f_) => c_.copy(policyDelta = Option(f_)))
    def optionalPolicyDelta: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.google.iam.v1.policy.PolicyDelta]] = field(_.policyDelta)((c_, f_) => c_.copy(policyDelta = f_))
  }
  final val POLICY_DELTA_FIELD_NUMBER = 2
  def of(
    policyDelta: _root_.scala.Option[com.google.iam.v1.policy.PolicyDelta]
  ): _root_.com.google.iam.v1.logging.audit_data.AuditData = _root_.com.google.iam.v1.logging.audit_data.AuditData(
    policyDelta
  )
}
