// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.google.pubsub.v1.pubsub

/** Request for the `Seek` method.
  *
  * @param subscription
  *   The subscription to affect.
  */
@SerialVersionUID(0L)
final case class SeekRequest(
    subscription: _root_.scala.Predef.String = "",
    target: com.google.pubsub.v1.pubsub.SeekRequest.Target = com.google.pubsub.v1.pubsub.SeekRequest.Target.Empty
    ) extends scalapb.GeneratedMessage with scalapb.Message[SeekRequest] with scalapb.lenses.Updatable[SeekRequest] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = subscription
        if (__value != "") {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      if (target.time.isDefined) {
        val __value = target.time.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (target.snapshot.isDefined) {
        val __value = target.snapshot.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = subscription
        if (__v != "") {
          _output__.writeString(1, __v)
        }
      };
      target.time.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      target.snapshot.foreach { __v =>
        val __m = __v
        _output__.writeString(3, __m)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.google.pubsub.v1.pubsub.SeekRequest = {
      var __subscription = this.subscription
      var __target = this.target
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __subscription = _input__.readString()
          case 18 =>
            __target = com.google.pubsub.v1.pubsub.SeekRequest.Target.Time(_root_.scalapb.LiteParser.readMessage(_input__, target.time.getOrElse(com.google.protobuf.timestamp.Timestamp.defaultInstance)))
          case 26 =>
            __target = com.google.pubsub.v1.pubsub.SeekRequest.Target.Snapshot(_input__.readString())
          case tag => _input__.skipField(tag)
        }
      }
      com.google.pubsub.v1.pubsub.SeekRequest(
          subscription = __subscription,
          target = __target
      )
    }
    def withSubscription(__v: _root_.scala.Predef.String): SeekRequest = copy(subscription = __v)
    def getTime: com.google.protobuf.timestamp.Timestamp = target.time.getOrElse(com.google.protobuf.timestamp.Timestamp.defaultInstance)
    def withTime(__v: com.google.protobuf.timestamp.Timestamp): SeekRequest = copy(target = com.google.pubsub.v1.pubsub.SeekRequest.Target.Time(__v))
    def getSnapshot: _root_.scala.Predef.String = target.snapshot.getOrElse("")
    def withSnapshot(__v: _root_.scala.Predef.String): SeekRequest = copy(target = com.google.pubsub.v1.pubsub.SeekRequest.Target.Snapshot(__v))
    def clearTarget: SeekRequest = copy(target = com.google.pubsub.v1.pubsub.SeekRequest.Target.Empty)
    def withTarget(__v: com.google.pubsub.v1.pubsub.SeekRequest.Target): SeekRequest = copy(target = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = subscription
          if (__t != "") __t else null
        }
        case 2 => target.time.orNull
        case 3 => target.snapshot.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(subscription)
        case 2 => target.time.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => target.snapshot.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = com.google.pubsub.v1.pubsub.SeekRequest
}

object SeekRequest extends scalapb.GeneratedMessageCompanion[com.google.pubsub.v1.pubsub.SeekRequest] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.google.pubsub.v1.pubsub.SeekRequest] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): com.google.pubsub.v1.pubsub.SeekRequest = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.google.pubsub.v1.pubsub.SeekRequest(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String],
      target = __fieldsMap.get(__fields.get(1)).asInstanceOf[_root_.scala.Option[com.google.protobuf.timestamp.Timestamp]].map(com.google.pubsub.v1.pubsub.SeekRequest.Target.Time)
    .orElse[com.google.pubsub.v1.pubsub.SeekRequest.Target](__fieldsMap.get(__fields.get(2)).asInstanceOf[_root_.scala.Option[_root_.scala.Predef.String]].map(com.google.pubsub.v1.pubsub.SeekRequest.Target.Snapshot))
    .getOrElse(com.google.pubsub.v1.pubsub.SeekRequest.Target.Empty)
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.google.pubsub.v1.pubsub.SeekRequest] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.google.pubsub.v1.pubsub.SeekRequest(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        target = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[com.google.protobuf.timestamp.Timestamp]]).map(com.google.pubsub.v1.pubsub.SeekRequest.Target.Time)
    .orElse[com.google.pubsub.v1.pubsub.SeekRequest.Target](__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]).map(com.google.pubsub.v1.pubsub.SeekRequest.Target.Snapshot))
    .getOrElse(com.google.pubsub.v1.pubsub.SeekRequest.Target.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = PubsubProto.javaDescriptor.getMessageTypes.get(32)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = PubsubProto.scalaDescriptor.messages(32)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = com.google.protobuf.timestamp.Timestamp
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.google.pubsub.v1.pubsub.SeekRequest(
  )
  sealed trait Target extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isTime: _root_.scala.Boolean = false
    def isSnapshot: _root_.scala.Boolean = false
    def time: _root_.scala.Option[com.google.protobuf.timestamp.Timestamp] = None
    def snapshot: _root_.scala.Option[_root_.scala.Predef.String] = None
  }
  object Target extends {
    @SerialVersionUID(0L)
    case object Empty extends com.google.pubsub.v1.pubsub.SeekRequest.Target {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class Time(value: com.google.protobuf.timestamp.Timestamp) extends com.google.pubsub.v1.pubsub.SeekRequest.Target {
      type ValueType = com.google.protobuf.timestamp.Timestamp
      override def isTime: _root_.scala.Boolean = true
      override def time: _root_.scala.Option[com.google.protobuf.timestamp.Timestamp] = Some(value)
      override def number: _root_.scala.Int = 2
    }
    @SerialVersionUID(0L)
    final case class Snapshot(value: _root_.scala.Predef.String) extends com.google.pubsub.v1.pubsub.SeekRequest.Target {
      type ValueType = _root_.scala.Predef.String
      override def isSnapshot: _root_.scala.Boolean = true
      override def snapshot: _root_.scala.Option[_root_.scala.Predef.String] = Some(value)
      override def number: _root_.scala.Int = 3
    }
  }
  implicit class SeekRequestLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.google.pubsub.v1.pubsub.SeekRequest]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.google.pubsub.v1.pubsub.SeekRequest](_l) {
    def subscription: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.subscription)((c_, f_) => c_.copy(subscription = f_))
    def time: _root_.scalapb.lenses.Lens[UpperPB, com.google.protobuf.timestamp.Timestamp] = field(_.getTime)((c_, f_) => c_.copy(target = com.google.pubsub.v1.pubsub.SeekRequest.Target.Time(f_)))
    def snapshot: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getSnapshot)((c_, f_) => c_.copy(target = com.google.pubsub.v1.pubsub.SeekRequest.Target.Snapshot(f_)))
    def target: _root_.scalapb.lenses.Lens[UpperPB, com.google.pubsub.v1.pubsub.SeekRequest.Target] = field(_.target)((c_, f_) => c_.copy(target = f_))
  }
  final val SUBSCRIPTION_FIELD_NUMBER = 1
  final val TIME_FIELD_NUMBER = 2
  final val SNAPSHOT_FIELD_NUMBER = 3
  def of(
    subscription: _root_.scala.Predef.String,
    target: com.google.pubsub.v1.pubsub.SeekRequest.Target
  ): _root_.com.google.pubsub.v1.pubsub.SeekRequest = _root_.com.google.pubsub.v1.pubsub.SeekRequest(
    subscription,
    target
  )
}
