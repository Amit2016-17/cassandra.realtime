// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.google.pubsub.v1.pubsub

/** A message and its corresponding acknowledgment ID.
  *
  * @param ackId
  *   This ID can be used to acknowledge the received message.
  * @param message
  *   The message.
  */
@SerialVersionUID(0L)
final case class ReceivedMessage(
    ackId: _root_.scala.Predef.String = "",
    message: _root_.scala.Option[com.google.pubsub.v1.pubsub.PubsubMessage] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[ReceivedMessage] with scalapb.lenses.Updatable[ReceivedMessage] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = ackId
        if (__value != "") {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      if (message.isDefined) {
        val __value = message.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = ackId
        if (__v != "") {
          _output__.writeString(1, __v)
        }
      };
      message.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.google.pubsub.v1.pubsub.ReceivedMessage = {
      var __ackId = this.ackId
      var __message = this.message
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __ackId = _input__.readString()
          case 18 =>
            __message = Option(_root_.scalapb.LiteParser.readMessage(_input__, __message.getOrElse(com.google.pubsub.v1.pubsub.PubsubMessage.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      com.google.pubsub.v1.pubsub.ReceivedMessage(
          ackId = __ackId,
          message = __message
      )
    }
    def withAckId(__v: _root_.scala.Predef.String): ReceivedMessage = copy(ackId = __v)
    def getMessage: com.google.pubsub.v1.pubsub.PubsubMessage = message.getOrElse(com.google.pubsub.v1.pubsub.PubsubMessage.defaultInstance)
    def clearMessage: ReceivedMessage = copy(message = None)
    def withMessage(__v: com.google.pubsub.v1.pubsub.PubsubMessage): ReceivedMessage = copy(message = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = ackId
          if (__t != "") __t else null
        }
        case 2 => message.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(ackId)
        case 2 => message.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = com.google.pubsub.v1.pubsub.ReceivedMessage
}

object ReceivedMessage extends scalapb.GeneratedMessageCompanion[com.google.pubsub.v1.pubsub.ReceivedMessage] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.google.pubsub.v1.pubsub.ReceivedMessage] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): com.google.pubsub.v1.pubsub.ReceivedMessage = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.google.pubsub.v1.pubsub.ReceivedMessage(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[_root_.scala.Option[com.google.pubsub.v1.pubsub.PubsubMessage]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.google.pubsub.v1.pubsub.ReceivedMessage] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.google.pubsub.v1.pubsub.ReceivedMessage(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[com.google.pubsub.v1.pubsub.PubsubMessage]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = PubsubProto.javaDescriptor.getMessageTypes.get(13)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = PubsubProto.scalaDescriptor.messages(13)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = com.google.pubsub.v1.pubsub.PubsubMessage
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.google.pubsub.v1.pubsub.ReceivedMessage(
  )
  implicit class ReceivedMessageLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.google.pubsub.v1.pubsub.ReceivedMessage]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.google.pubsub.v1.pubsub.ReceivedMessage](_l) {
    def ackId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.ackId)((c_, f_) => c_.copy(ackId = f_))
    def message: _root_.scalapb.lenses.Lens[UpperPB, com.google.pubsub.v1.pubsub.PubsubMessage] = field(_.getMessage)((c_, f_) => c_.copy(message = Option(f_)))
    def optionalMessage: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.google.pubsub.v1.pubsub.PubsubMessage]] = field(_.message)((c_, f_) => c_.copy(message = f_))
  }
  final val ACK_ID_FIELD_NUMBER = 1
  final val MESSAGE_FIELD_NUMBER = 2
  def of(
    ackId: _root_.scala.Predef.String,
    message: _root_.scala.Option[com.google.pubsub.v1.pubsub.PubsubMessage]
  ): _root_.com.google.pubsub.v1.pubsub.ReceivedMessage = _root_.com.google.pubsub.v1.pubsub.ReceivedMessage(
    ackId,
    message
  )
}
