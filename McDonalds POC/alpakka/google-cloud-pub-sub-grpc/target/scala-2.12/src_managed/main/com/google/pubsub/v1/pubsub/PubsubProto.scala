// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.google.pubsub.v1.pubsub

object PubsubProto extends _root_.scalapb.GeneratedFileObject {
  lazy val dependencies: Seq[_root_.scalapb.GeneratedFileObject] = Seq(
    com.google.api.annotations.AnnotationsProto,
    com.google.protobuf.duration.DurationProto,
    com.google.protobuf.empty.EmptyProto,
    com.google.protobuf.field_mask.FieldMaskProto,
    com.google.protobuf.timestamp.TimestampProto
  )
  lazy val messagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq(
    com.google.pubsub.v1.pubsub.Topic,
    com.google.pubsub.v1.pubsub.PubsubMessage,
    com.google.pubsub.v1.pubsub.GetTopicRequest,
    com.google.pubsub.v1.pubsub.UpdateTopicRequest,
    com.google.pubsub.v1.pubsub.PublishRequest,
    com.google.pubsub.v1.pubsub.PublishResponse,
    com.google.pubsub.v1.pubsub.ListTopicsRequest,
    com.google.pubsub.v1.pubsub.ListTopicsResponse,
    com.google.pubsub.v1.pubsub.ListTopicSubscriptionsRequest,
    com.google.pubsub.v1.pubsub.ListTopicSubscriptionsResponse,
    com.google.pubsub.v1.pubsub.DeleteTopicRequest,
    com.google.pubsub.v1.pubsub.Subscription,
    com.google.pubsub.v1.pubsub.PushConfig,
    com.google.pubsub.v1.pubsub.ReceivedMessage,
    com.google.pubsub.v1.pubsub.GetSubscriptionRequest,
    com.google.pubsub.v1.pubsub.UpdateSubscriptionRequest,
    com.google.pubsub.v1.pubsub.ListSubscriptionsRequest,
    com.google.pubsub.v1.pubsub.ListSubscriptionsResponse,
    com.google.pubsub.v1.pubsub.DeleteSubscriptionRequest,
    com.google.pubsub.v1.pubsub.ModifyPushConfigRequest,
    com.google.pubsub.v1.pubsub.PullRequest,
    com.google.pubsub.v1.pubsub.PullResponse,
    com.google.pubsub.v1.pubsub.ModifyAckDeadlineRequest,
    com.google.pubsub.v1.pubsub.AcknowledgeRequest,
    com.google.pubsub.v1.pubsub.StreamingPullRequest,
    com.google.pubsub.v1.pubsub.StreamingPullResponse,
    com.google.pubsub.v1.pubsub.CreateSnapshotRequest,
    com.google.pubsub.v1.pubsub.UpdateSnapshotRequest,
    com.google.pubsub.v1.pubsub.Snapshot,
    com.google.pubsub.v1.pubsub.ListSnapshotsRequest,
    com.google.pubsub.v1.pubsub.ListSnapshotsResponse,
    com.google.pubsub.v1.pubsub.DeleteSnapshotRequest,
    com.google.pubsub.v1.pubsub.SeekRequest,
    com.google.pubsub.v1.pubsub.SeekResponse
  )
  private lazy val ProtoBytes: Array[Byte] =
      scalapb.Encoding.fromBase64(scala.collection.Seq(
  """Ch1nb29nbGUvcHVic3ViL3YxL3B1YnN1Yi5wcm90bxIQZ29vZ2xlLnB1YnN1Yi52MRocZ29vZ2xlL2FwaS9hbm5vdGF0aW9uc
  y5wcm90bxoeZ29vZ2xlL3Byb3RvYnVmL2R1cmF0aW9uLnByb3RvGhtnb29nbGUvcHJvdG9idWYvZW1wdHkucHJvdG8aIGdvb2dsZ
  S9wcm90b2J1Zi9maWVsZF9tYXNrLnByb3RvGh9nb29nbGUvcHJvdG9idWYvdGltZXN0YW1wLnByb3RvIsEBCgVUb3BpYxIdCgRuY
  W1lGAEgASgJQgniPwYSBG5hbWVSBG5hbWUSSAoGbGFiZWxzGAIgAygLMiMuZ29vZ2xlLnB1YnN1Yi52MS5Ub3BpYy5MYWJlbHNFb
  nRyeUIL4j8IEgZsYWJlbHNSBmxhYmVscxpPCgtMYWJlbHNFbnRyeRIaCgNrZXkYASABKAlCCOI/BRIDa2V5UgNrZXkSIAoFdmFsd
  WUYAiABKAlCCuI/BxIFdmFsdWVSBXZhbHVlOgI4ASLlAgoNUHVic3ViTWVzc2FnZRIdCgRkYXRhGAEgASgMQgniPwYSBGRhdGFSB
  GRhdGESYAoKYXR0cmlidXRlcxgCIAMoCzIvLmdvb2dsZS5wdWJzdWIudjEuUHVic3ViTWVzc2FnZS5BdHRyaWJ1dGVzRW50cnlCD
  +I/DBIKYXR0cmlidXRlc1IKYXR0cmlidXRlcxItCgptZXNzYWdlX2lkGAMgASgJQg7iPwsSCW1lc3NhZ2VJZFIJbWVzc2FnZUlkE
  k8KDHB1Ymxpc2hfdGltZRgEIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBCEOI/DRILcHVibGlzaFRpbWVSC3B1Ymxpc
  2hUaW1lGlMKD0F0dHJpYnV0ZXNFbnRyeRIaCgNrZXkYASABKAlCCOI/BRIDa2V5UgNrZXkSIAoFdmFsdWUYAiABKAlCCuI/BxIFd
  mFsdWVSBXZhbHVlOgI4ASIzCg9HZXRUb3BpY1JlcXVlc3QSIAoFdG9waWMYASABKAlCCuI/BxIFdG9waWNSBXRvcGljIp0BChJVc
  GRhdGVUb3BpY1JlcXVlc3QSOQoFdG9waWMYASABKAsyFy5nb29nbGUucHVic3ViLnYxLlRvcGljQgriPwcSBXRvcGljUgV0b3BpY
  xJMCgt1cGRhdGVfbWFzaxgCIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5GaWVsZE1hc2tCD+I/DBIKdXBkYXRlTWFza1IKdXBkYXRlT
  WFzayJ+Cg5QdWJsaXNoUmVxdWVzdBIgCgV0b3BpYxgBIAEoCUIK4j8HEgV0b3BpY1IFdG9waWMSSgoIbWVzc2FnZXMYAiADKAsyH
  y5nb29nbGUucHVic3ViLnYxLlB1YnN1Yk1lc3NhZ2VCDeI/ChIIbWVzc2FnZXNSCG1lc3NhZ2VzIkMKD1B1Ymxpc2hSZXNwb25zZ
  RIwCgttZXNzYWdlX2lkcxgBIAMoCUIP4j8MEgptZXNzYWdlSWRzUgptZXNzYWdlSWRzIpYBChFMaXN0VG9waWNzUmVxdWVzdBImC
  gdwcm9qZWN0GAEgASgJQgziPwkSB3Byb2plY3RSB3Byb2plY3QSKgoJcGFnZV9zaXplGAIgASgFQg3iPwoSCHBhZ2VTaXplUghwY
  WdlU2l6ZRItCgpwYWdlX3Rva2VuGAMgASgJQg7iPwsSCXBhZ2VUb2tlblIJcGFnZVRva2VuIo4BChJMaXN0VG9waWNzUmVzcG9uc
  2USPAoGdG9waWNzGAEgAygLMhcuZ29vZ2xlLnB1YnN1Yi52MS5Ub3BpY0IL4j8IEgZ0b3BpY3NSBnRvcGljcxI6Cg9uZXh0X3BhZ
  2VfdG9rZW4YAiABKAlCEuI/DxINbmV4dFBhZ2VUb2tlblINbmV4dFBhZ2VUb2tlbiKcAQodTGlzdFRvcGljU3Vic2NyaXB0aW9uc
  1JlcXVlc3QSIAoFdG9waWMYASABKAlCCuI/BxIFdG9waWNSBXRvcGljEioKCXBhZ2Vfc2l6ZRgCIAEoBUIN4j8KEghwYWdlU2l6Z
  VIIcGFnZVNpemUSLQoKcGFnZV90b2tlbhgDIAEoCUIO4j8LEglwYWdlVG9rZW5SCXBhZ2VUb2tlbiKWAQoeTGlzdFRvcGljU3Vic
  2NyaXB0aW9uc1Jlc3BvbnNlEjgKDXN1YnNjcmlwdGlvbnMYASADKAlCEuI/DxINc3Vic2NyaXB0aW9uc1INc3Vic2NyaXB0aW9uc
  xI6Cg9uZXh0X3BhZ2VfdG9rZW4YAiABKAlCEuI/DxINbmV4dFBhZ2VUb2tlblINbmV4dFBhZ2VUb2tlbiI2ChJEZWxldGVUb3BpY
  1JlcXVlc3QSIAoFdG9waWMYASABKAlCCuI/BxIFdG9waWNSBXRvcGljItIECgxTdWJzY3JpcHRpb24SHQoEbmFtZRgBIAEoCUIJ4
  j8GEgRuYW1lUgRuYW1lEiAKBXRvcGljGAIgASgJQgriPwcSBXRvcGljUgV0b3BpYxJOCgtwdXNoX2NvbmZpZxgEIAEoCzIcLmdvb
  2dsZS5wdWJzdWIudjEuUHVzaENvbmZpZ0IP4j8MEgpwdXNoQ29uZmlnUgpwdXNoQ29uZmlnEkkKFGFja19kZWFkbGluZV9zZWNvb
  mRzGAUgASgFQhfiPxQSEmFja0RlYWRsaW5lU2Vjb25kc1ISYWNrRGVhZGxpbmVTZWNvbmRzEkwKFXJldGFpbl9hY2tlZF9tZXNzY
  WdlcxgHIAEoCEIY4j8VEhNyZXRhaW5BY2tlZE1lc3NhZ2VzUhNyZXRhaW5BY2tlZE1lc3NhZ2VzEnYKGm1lc3NhZ2VfcmV0ZW50a
  W9uX2R1cmF0aW9uGAggASgLMhkuZ29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uQh3iPxoSGG1lc3NhZ2VSZXRlbnRpb25EdXJhdGlvb
  lIYbWVzc2FnZVJldGVudGlvbkR1cmF0aW9uEk8KBmxhYmVscxgJIAMoCzIqLmdvb2dsZS5wdWJzdWIudjEuU3Vic2NyaXB0aW9uL
  kxhYmVsc0VudHJ5QgviPwgSBmxhYmVsc1IGbGFiZWxzGk8KC0xhYmVsc0VudHJ5EhoKA2tleRgBIAEoCUII4j8FEgNrZXlSA2tle
  RIgCgV2YWx1ZRgCIAEoCUIK4j8HEgV2YWx1ZVIFdmFsdWU6AjgBIvgBCgpQdXNoQ29uZmlnEjYKDXB1c2hfZW5kcG9pbnQYASABK
  AlCEeI/DhIMcHVzaEVuZHBvaW50UgxwdXNoRW5kcG9pbnQSXQoKYXR0cmlidXRlcxgCIAMoCzIsLmdvb2dsZS5wdWJzdWIudjEuU
  HVzaENvbmZpZy5BdHRyaWJ1dGVzRW50cnlCD+I/DBIKYXR0cmlidXRlc1IKYXR0cmlidXRlcxpTCg9BdHRyaWJ1dGVzRW50cnkSG
  goDa2V5GAEgASgJQgjiPwUSA2tleVIDa2V5EiAKBXZhbHVlGAIgASgJQgriPwcSBXZhbHVlUgV2YWx1ZToCOAEifQoPUmVjZWl2Z
  WRNZXNzYWdlEiEKBmFja19pZBgBIAEoCUIK4j8HEgVhY2tJZFIFYWNrSWQSRwoHbWVzc2FnZRgCIAEoCzIfLmdvb2dsZS5wdWJzd
  WIudjEuUHVic3ViTWVzc2FnZUIM4j8JEgdtZXNzYWdlUgdtZXNzYWdlIk8KFkdldFN1YnNjcmlwdGlvblJlcXVlc3QSNQoMc3Vic
  2NyaXB0aW9uGAEgASgJQhHiPw4SDHN1YnNjcmlwdGlvblIMc3Vic2NyaXB0aW9uIsABChlVcGRhdGVTdWJzY3JpcHRpb25SZXF1Z
  XN0ElUKDHN1YnNjcmlwdGlvbhgBIAEoCzIeLmdvb2dsZS5wdWJzdWIudjEuU3Vic2NyaXB0aW9uQhHiPw4SDHN1YnNjcmlwdGlvb
  lIMc3Vic2NyaXB0aW9uEkwKC3VwZGF0ZV9tYXNrGAIgASgLMhouZ29vZ2xlLnByb3RvYnVmLkZpZWxkTWFza0IP4j8MEgp1cGRhd
  GVNYXNrUgp1cGRhdGVNYXNrIp0BChhMaXN0U3Vic2NyaXB0aW9uc1JlcXVlc3QSJgoHcHJvamVjdBgBIAEoCUIM4j8JEgdwcm9qZ
  WN0Ugdwcm9qZWN0EioKCXBhZ2Vfc2l6ZRgCIAEoBUIN4j8KEghwYWdlU2l6ZVIIcGFnZVNpemUSLQoKcGFnZV90b2tlbhgDIAEoC
  UIO4j8LEglwYWdlVG9rZW5SCXBhZ2VUb2tlbiKxAQoZTGlzdFN1YnNjcmlwdGlvbnNSZXNwb25zZRJYCg1zdWJzY3JpcHRpb25zG
  AEgAygLMh4uZ29vZ2xlLnB1YnN1Yi52MS5TdWJzY3JpcHRpb25CEuI/DxINc3Vic2NyaXB0aW9uc1INc3Vic2NyaXB0aW9ucxI6C
  g9uZXh0X3BhZ2VfdG9rZW4YAiABKAlCEuI/DxINbmV4dFBhZ2VUb2tlblINbmV4dFBhZ2VUb2tlbiJSChlEZWxldGVTdWJzY3Jpc
  HRpb25SZXF1ZXN0EjUKDHN1YnNjcmlwdGlvbhgBIAEoCUIR4j8OEgxzdWJzY3JpcHRpb25SDHN1YnNjcmlwdGlvbiKgAQoXTW9ka
  WZ5UHVzaENvbmZpZ1JlcXVlc3QSNQoMc3Vic2NyaXB0aW9uGAEgASgJQhHiPw4SDHN1YnNjcmlwdGlvblIMc3Vic2NyaXB0aW9uE
  k4KC3B1c2hfY29uZmlnGAIgASgLMhwuZ29vZ2xlLnB1YnN1Yi52MS5QdXNoQ29uZmlnQg/iPwwSCnB1c2hDb25maWdSCnB1c2hDb
  25maWciwAEKC1B1bGxSZXF1ZXN0EjUKDHN1YnNjcmlwdGlvbhgBIAEoCUIR4j8OEgxzdWJzY3JpcHRpb25SDHN1YnNjcmlwdGlvb
  hJFChJyZXR1cm5faW1tZWRpYXRlbHkYAiABKAhCFuI/ExIRcmV0dXJuSW1tZWRpYXRlbHlSEXJldHVybkltbWVkaWF0ZWx5EjMKD
  G1heF9tZXNzYWdlcxgDIAEoBUIQ4j8NEgttYXhNZXNzYWdlc1ILbWF4TWVzc2FnZXMidQoMUHVsbFJlc3BvbnNlEmUKEXJlY2Vpd
  mVkX21lc3NhZ2VzGAEgAygLMiEuZ29vZ2xlLnB1YnN1Yi52MS5SZWNlaXZlZE1lc3NhZ2VCFeI/EhIQcmVjZWl2ZWRNZXNzYWdlc
  1IQcmVjZWl2ZWRNZXNzYWdlcyLCAQoYTW9kaWZ5QWNrRGVhZGxpbmVSZXF1ZXN0EjUKDHN1YnNjcmlwdGlvbhgBIAEoCUIR4j8OE
  gxzdWJzY3JpcHRpb25SDHN1YnNjcmlwdGlvbhIkCgdhY2tfaWRzGAQgAygJQgviPwgSBmFja0lkc1IGYWNrSWRzEkkKFGFja19kZ
  WFkbGluZV9zZWNvbmRzGAMgASgFQhfiPxQSEmFja0RlYWRsaW5lU2Vjb25kc1ISYWNrRGVhZGxpbmVTZWNvbmRzInEKEkFja25vd
  2xlZGdlUmVxdWVzdBI1CgxzdWJzY3JpcHRpb24YASABKAlCEeI/DhIMc3Vic2NyaXB0aW9uUgxzdWJzY3JpcHRpb24SJAoHYWNrX
  2lkcxgCIAMoCUIL4j8IEgZhY2tJZHNSBmFja0lkcyL3AgoUU3RyZWFtaW5nUHVsbFJlcXVlc3QSNQoMc3Vic2NyaXB0aW9uGAEgA
  SgJQhHiPw4SDHN1YnNjcmlwdGlvblIMc3Vic2NyaXB0aW9uEiQKB2Fja19pZHMYAiADKAlCC+I/CBIGYWNrSWRzUgZhY2tJZHMSU
  goXbW9kaWZ5X2RlYWRsaW5lX3NlY29uZHMYAyADKAVCGuI/FxIVbW9kaWZ5RGVhZGxpbmVTZWNvbmRzUhVtb2RpZnlEZWFkbGluZ
  VNlY29uZHMSUAoXbW9kaWZ5X2RlYWRsaW5lX2Fja19pZHMYBCADKAlCGeI/FhIUbW9kaWZ5RGVhZGxpbmVBY2tJZHNSFG1vZGlme
  URlYWRsaW5lQWNrSWRzElwKG3N0cmVhbV9hY2tfZGVhZGxpbmVfc2Vjb25kcxgFIAEoBUId4j8aEhhzdHJlYW1BY2tEZWFkbGluZ
  VNlY29uZHNSGHN0cmVhbUFja0RlYWRsaW5lU2Vjb25kcyJ+ChVTdHJlYW1pbmdQdWxsUmVzcG9uc2USZQoRcmVjZWl2ZWRfbWVzc
  2FnZXMYASADKAsyIS5nb29nbGUucHVic3ViLnYxLlJlY2VpdmVkTWVzc2FnZUIV4j8SEhByZWNlaXZlZE1lc3NhZ2VzUhByZWNla
  XZlZE1lc3NhZ2VzIm0KFUNyZWF0ZVNuYXBzaG90UmVxdWVzdBIdCgRuYW1lGAEgASgJQgniPwYSBG5hbWVSBG5hbWUSNQoMc3Vic
  2NyaXB0aW9uGAIgASgJQhHiPw4SDHN1YnNjcmlwdGlvblIMc3Vic2NyaXB0aW9uIqwBChVVcGRhdGVTbmFwc2hvdFJlcXVlc3QSR
  QoIc25hcHNob3QYASABKAsyGi5nb29nbGUucHVic3ViLnYxLlNuYXBzaG90Qg3iPwoSCHNuYXBzaG90UghzbmFwc2hvdBJMCgt1c
  GRhdGVfbWFzaxgCIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5GaWVsZE1hc2tCD+I/DBIKdXBkYXRlTWFza1IKdXBkYXRlTWFzayK3A
  goIU25hcHNob3QSHQoEbmFtZRgBIAEoCUIJ4j8GEgRuYW1lUgRuYW1lEiAKBXRvcGljGAIgASgJQgriPwcSBXRvcGljUgV0b3BpY
  xJMCgtleHBpcmVfdGltZRgDIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBCD+I/DBIKZXhwaXJlVGltZVIKZXhwaXJlV
  GltZRJLCgZsYWJlbHMYBCADKAsyJi5nb29nbGUucHVic3ViLnYxLlNuYXBzaG90LkxhYmVsc0VudHJ5QgviPwgSBmxhYmVsc1IGb
  GFiZWxzGk8KC0xhYmVsc0VudHJ5EhoKA2tleRgBIAEoCUII4j8FEgNrZXlSA2tleRIgCgV2YWx1ZRgCIAEoCUIK4j8HEgV2YWx1Z
  VIFdmFsdWU6AjgBIpkBChRMaXN0U25hcHNob3RzUmVxdWVzdBImCgdwcm9qZWN0GAEgASgJQgziPwkSB3Byb2plY3RSB3Byb2plY
  3QSKgoJcGFnZV9zaXplGAIgASgFQg3iPwoSCHBhZ2VTaXplUghwYWdlU2l6ZRItCgpwYWdlX3Rva2VuGAMgASgJQg7iPwsSCXBhZ
  2VUb2tlblIJcGFnZVRva2VuIp0BChVMaXN0U25hcHNob3RzUmVzcG9uc2USSAoJc25hcHNob3RzGAEgAygLMhouZ29vZ2xlLnB1Y
  nN1Yi52MS5TbmFwc2hvdEIO4j8LEglzbmFwc2hvdHNSCXNuYXBzaG90cxI6Cg9uZXh0X3BhZ2VfdG9rZW4YAiABKAlCEuI/DxINb
  mV4dFBhZ2VUb2tlblINbmV4dFBhZ2VUb2tlbiJCChVEZWxldGVTbmFwc2hvdFJlcXVlc3QSKQoIc25hcHNob3QYASABKAlCDeI/C
  hIIc25hcHNob3RSCHNuYXBzaG90IrgBCgtTZWVrUmVxdWVzdBI1CgxzdWJzY3JpcHRpb24YASABKAlCEeI/DhIMc3Vic2NyaXB0a
  W9uUgxzdWJzY3JpcHRpb24SOwoEdGltZRgCIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBCCeI/BhIEdGltZUgAUgR0a
  W1lEisKCHNuYXBzaG90GAMgASgJQg3iPwoSCHNuYXBzaG90SABSCHNuYXBzaG90QggKBnRhcmdldCIOCgxTZWVrUmVzcG9uc2Uy9
  xAKClN1YnNjcmliZXIShgEKEkNyZWF0ZVN1YnNjcmlwdGlvbhIeLmdvb2dsZS5wdWJzdWIudjEuU3Vic2NyaXB0aW9uGh4uZ29vZ
  2xlLnB1YnN1Yi52MS5TdWJzY3JpcHRpb24iMILT5JMCKholL3YxL3tuYW1lPXByb2plY3RzLyovc3Vic2NyaXB0aW9ucy8qfToBK
  hKSAQoPR2V0U3Vic2NyaXB0aW9uEiguZ29vZ2xlLnB1YnN1Yi52MS5HZXRTdWJzY3JpcHRpb25SZXF1ZXN0Gh4uZ29vZ2xlLnB1Y
  nN1Yi52MS5TdWJzY3JpcHRpb24iNYLT5JMCLxItL3YxL3tzdWJzY3JpcHRpb249cHJvamVjdHMvKi9zdWJzY3JpcHRpb25zLyp9E
  qABChJVcGRhdGVTdWJzY3JpcHRpb24SKy5nb29nbGUucHVic3ViLnYxLlVwZGF0ZVN1YnNjcmlwdGlvblJlcXVlc3QaHi5nb29nb
  GUucHVic3ViLnYxLlN1YnNjcmlwdGlvbiI9gtPkkwI3MjIvdjEve3N1YnNjcmlwdGlvbi5uYW1lPXByb2plY3RzLyovc3Vic2Nya
  XB0aW9ucy8qfToBKhKcAQoRTGlzdFN1YnNjcmlwdGlvbnMSKi5nb29nbGUucHVic3ViLnYxLkxpc3RTdWJzY3JpcHRpb25zUmVxd
  WVzdBorLmdvb2dsZS5wdWJzdWIudjEuTGlzdFN1YnNjcmlwdGlvbnNSZXNwb25zZSIugtPkkwIoEiYvdjEve3Byb2plY3Q9cHJva
  mVjdHMvKn0vc3Vic2NyaXB0aW9ucxKQAQoSRGVsZXRlU3Vic2NyaXB0aW9uEisuZ29vZ2xlLnB1YnN1Yi52MS5EZWxldGVTdWJzY
  3JpcHRpb25SZXF1ZXN0GhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5IjWC0+STAi8qLS92MS97c3Vic2NyaXB0aW9uPXByb2plY3RzL
  yovc3Vic2NyaXB0aW9ucy8qfRKjAQoRTW9kaWZ5QWNrRGVhZGxpbmUSKi5nb29nbGUucHVic3ViLnYxLk1vZGlmeUFja0RlYWRsa
  W5lUmVxdWVzdBoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eSJKgtPkkwJEIj8vdjEve3N1YnNjcmlwdGlvbj1wcm9qZWN0cy8qL3N1Y
  nNjcmlwdGlvbnMvKn06bW9kaWZ5QWNrRGVhZGxpbmU6ASoSkQEKC0Fja25vd2xlZGdlEiQuZ29vZ2xlLnB1YnN1Yi52MS5BY2tub
  3dsZWRnZVJlcXVlc3QaFi5nb29nbGUucHJvdG9idWYuRW1wdHkiRILT5JMCPiI5L3YxL3tzdWJzY3JpcHRpb249cHJvamVjdHMvK
  i9zdWJzY3JpcHRpb25zLyp9OmFja25vd2xlZGdlOgEqEoQBCgRQdWxsEh0uZ29vZ2xlLnB1YnN1Yi52MS5QdWxsUmVxdWVzdBoeL
  mdvb2dsZS5wdWJzdWIudjEuUHVsbFJlc3BvbnNlIj2C0+STAjciMi92MS97c3Vic2NyaXB0aW9uPXByb2plY3RzLyovc3Vic2Nya
  XB0aW9ucy8qfTpwdWxsOgEqEmQKDVN0cmVhbWluZ1B1bGwSJi5nb29nbGUucHVic3ViLnYxLlN0cmVhbWluZ1B1bGxSZXF1ZXN0G
  icuZ29vZ2xlLnB1YnN1Yi52MS5TdHJlYW1pbmdQdWxsUmVzcG9uc2UoATABEqABChBNb2RpZnlQdXNoQ29uZmlnEikuZ29vZ2xlL
  nB1YnN1Yi52MS5Nb2RpZnlQdXNoQ29uZmlnUmVxdWVzdBoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eSJJgtPkkwJDIj4vdjEve3N1Y
  nNjcmlwdGlvbj1wcm9qZWN0cy8qL3N1YnNjcmlwdGlvbnMvKn06bW9kaWZ5UHVzaENvbmZpZzoBKhKMAQoNTGlzdFNuYXBzaG90c
  xImLmdvb2dsZS5wdWJzdWIudjEuTGlzdFNuYXBzaG90c1JlcXVlc3QaJy5nb29nbGUucHVic3ViLnYxLkxpc3RTbmFwc2hvdHNSZ
  XNwb25zZSIqgtPkkwIkEiIvdjEve3Byb2plY3Q9cHJvamVjdHMvKn0vc25hcHNob3RzEoMBCg5DcmVhdGVTbmFwc2hvdBInLmdvb
  2dsZS5wdWJzdWIudjEuQ3JlYXRlU25hcHNob3RSZXF1ZXN0GhouZ29vZ2xlLnB1YnN1Yi52MS5TbmFwc2hvdCIsgtPkkwImGiEvd
  jEve25hbWU9cHJvamVjdHMvKi9zbmFwc2hvdHMvKn06ASoSjAEKDlVwZGF0ZVNuYXBzaG90EicuZ29vZ2xlLnB1YnN1Yi52MS5Vc
  GRhdGVTbmFwc2hvdFJlcXVlc3QaGi5nb29nbGUucHVic3ViLnYxLlNuYXBzaG90IjWC0+STAi8yKi92MS97c25hcHNob3QubmFtZ
  T1wcm9qZWN0cy8qL3NuYXBzaG90cy8qfToBKhKAAQoORGVsZXRlU25hcHNob3QSJy5nb29nbGUucHVic3ViLnYxLkRlbGV0ZVNuY
  XBzaG90UmVxdWVzdBoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eSItgtPkkwInKiUvdjEve3NuYXBzaG90PXByb2plY3RzLyovc25hc
  HNob3RzLyp9EoQBCgRTZWVrEh0uZ29vZ2xlLnB1YnN1Yi52MS5TZWVrUmVxdWVzdBoeLmdvb2dsZS5wdWJzdWIudjEuU2Vla1Jlc
  3BvbnNlIj2C0+STAjciMi92MS97c3Vic2NyaXB0aW9uPXByb2plY3RzLyovc3Vic2NyaXB0aW9ucy8qfTpzZWVrOgEqMpoHCglQd
  WJsaXNoZXISagoLQ3JlYXRlVG9waWMSFy5nb29nbGUucHVic3ViLnYxLlRvcGljGhcuZ29vZ2xlLnB1YnN1Yi52MS5Ub3BpYyIpg
  tPkkwIjGh4vdjEve25hbWU9cHJvamVjdHMvKi90b3BpY3MvKn06ASoSfQoLVXBkYXRlVG9waWMSJC5nb29nbGUucHVic3ViLnYxL
  lVwZGF0ZVRvcGljUmVxdWVzdBoXLmdvb2dsZS5wdWJzdWIudjEuVG9waWMiL4LT5JMCKTIkL3YxL3t0b3BpYy5uYW1lPXByb2plY
  3RzLyovdG9waWNzLyp9OgEqEoIBCgdQdWJsaXNoEiAuZ29vZ2xlLnB1YnN1Yi52MS5QdWJsaXNoUmVxdWVzdBohLmdvb2dsZS5wd
  WJzdWIudjEuUHVibGlzaFJlc3BvbnNlIjKC0+STAiwiJy92MS97dG9waWM9cHJvamVjdHMvKi90b3BpY3MvKn06cHVibGlzaDoBK
  hJvCghHZXRUb3BpYxIhLmdvb2dsZS5wdWJzdWIudjEuR2V0VG9waWNSZXF1ZXN0GhcuZ29vZ2xlLnB1YnN1Yi52MS5Ub3BpYyIng
  tPkkwIhEh8vdjEve3RvcGljPXByb2plY3RzLyovdG9waWNzLyp9EoABCgpMaXN0VG9waWNzEiMuZ29vZ2xlLnB1YnN1Yi52MS5Ma
  XN0VG9waWNzUmVxdWVzdBokLmdvb2dsZS5wdWJzdWIudjEuTGlzdFRvcGljc1Jlc3BvbnNlIieC0+STAiESHy92MS97cHJvamVjd
  D1wcm9qZWN0cy8qfS90b3BpY3MSsgEKFkxpc3RUb3BpY1N1YnNjcmlwdGlvbnMSLy5nb29nbGUucHVic3ViLnYxLkxpc3RUb3BpY
  1N1YnNjcmlwdGlvbnNSZXF1ZXN0GjAuZ29vZ2xlLnB1YnN1Yi52MS5MaXN0VG9waWNTdWJzY3JpcHRpb25zUmVzcG9uc2UiNYLT5
  JMCLxItL3YxL3t0b3BpYz1wcm9qZWN0cy8qL3RvcGljcy8qfS9zdWJzY3JpcHRpb25zEnQKC0RlbGV0ZVRvcGljEiQuZ29vZ2xlL
  nB1YnN1Yi52MS5EZWxldGVUb3BpY1JlcXVlc3QaFi5nb29nbGUucHJvdG9idWYuRW1wdHkiJ4LT5JMCISofL3YxL3t0b3BpYz1wc
  m9qZWN0cy8qL3RvcGljcy8qfUKSAQoUY29tLmdvb2dsZS5wdWJzdWIudjFCC1B1YnN1YlByb3RvUAFaNmdvb2dsZS5nb2xhbmcub
  3JnL2dlbnByb3RvL2dvb2dsZWFwaXMvcHVic3ViL3YxO3B1YnN1YvgBAaoCFkdvb2dsZS5DbG91ZC5QdWJTdWIuVjHKAhZHb29nb
  GVcQ2xvdWRcUHViU3ViXFYxYgZwcm90bzM="""
      ).mkString)
  lazy val scalaDescriptor: _root_.scalapb.descriptors.FileDescriptor = {
    val scalaProto = com.google.protobuf.descriptor.FileDescriptorProto.parseFrom(ProtoBytes)
    _root_.scalapb.descriptors.FileDescriptor.buildFrom(scalaProto, dependencies.map(_.scalaDescriptor))
  }
  lazy val javaDescriptor: com.google.protobuf.Descriptors.FileDescriptor = {
    val javaProto = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(ProtoBytes)
    com.google.protobuf.Descriptors.FileDescriptor.buildFrom(javaProto, Array(
      com.google.api.annotations.AnnotationsProto.javaDescriptor,
      com.google.protobuf.duration.DurationProto.javaDescriptor,
      com.google.protobuf.empty.EmptyProto.javaDescriptor,
      com.google.protobuf.field_mask.FieldMaskProto.javaDescriptor,
      com.google.protobuf.timestamp.TimestampProto.javaDescriptor
    ))
  }
  @deprecated("Use javaDescriptor instead. In a future version this will refer to scalaDescriptor.", "ScalaPB 0.5.47")
  def descriptor: com.google.protobuf.Descriptors.FileDescriptor = javaDescriptor
}