// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.google.pubsub.v1.pubsub

/** Request for the Publish method.
  *
  * @param topic
  *   The messages in the request will be published on this topic.
  *   Format is `projects/{project}/topics/{topic}`.
  * @param messages
  *   The messages to publish.
  */
@SerialVersionUID(0L)
final case class PublishRequest(
    topic: _root_.scala.Predef.String = "",
    messages: _root_.scala.collection.Seq[com.google.pubsub.v1.pubsub.PubsubMessage] = _root_.scala.collection.Seq.empty
    ) extends scalapb.GeneratedMessage with scalapb.Message[PublishRequest] with scalapb.lenses.Updatable[PublishRequest] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = topic
        if (__value != "") {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      messages.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = topic
        if (__v != "") {
          _output__.writeString(1, __v)
        }
      };
      messages.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.google.pubsub.v1.pubsub.PublishRequest = {
      var __topic = this.topic
      val __messages = (_root_.scala.collection.immutable.Vector.newBuilder[com.google.pubsub.v1.pubsub.PubsubMessage] ++= this.messages)
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __topic = _input__.readString()
          case 18 =>
            __messages += _root_.scalapb.LiteParser.readMessage(_input__, com.google.pubsub.v1.pubsub.PubsubMessage.defaultInstance)
          case tag => _input__.skipField(tag)
        }
      }
      com.google.pubsub.v1.pubsub.PublishRequest(
          topic = __topic,
          messages = __messages.result()
      )
    }
    def withTopic(__v: _root_.scala.Predef.String): PublishRequest = copy(topic = __v)
    def clearMessages = copy(messages = _root_.scala.collection.Seq.empty)
    def addMessages(__vs: com.google.pubsub.v1.pubsub.PubsubMessage*): PublishRequest = addAllMessages(__vs)
    def addAllMessages(__vs: TraversableOnce[com.google.pubsub.v1.pubsub.PubsubMessage]): PublishRequest = copy(messages = messages ++ __vs)
    def withMessages(__v: _root_.scala.collection.Seq[com.google.pubsub.v1.pubsub.PubsubMessage]): PublishRequest = copy(messages = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = topic
          if (__t != "") __t else null
        }
        case 2 => messages
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(topic)
        case 2 => _root_.scalapb.descriptors.PRepeated(messages.map(_.toPMessage)(_root_.scala.collection.breakOut))
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = com.google.pubsub.v1.pubsub.PublishRequest
}

object PublishRequest extends scalapb.GeneratedMessageCompanion[com.google.pubsub.v1.pubsub.PublishRequest] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.google.pubsub.v1.pubsub.PublishRequest] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): com.google.pubsub.v1.pubsub.PublishRequest = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.google.pubsub.v1.pubsub.PublishRequest(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(1), Nil).asInstanceOf[_root_.scala.collection.Seq[com.google.pubsub.v1.pubsub.PubsubMessage]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.google.pubsub.v1.pubsub.PublishRequest] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.google.pubsub.v1.pubsub.PublishRequest(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.collection.Seq[com.google.pubsub.v1.pubsub.PubsubMessage]]).getOrElse(_root_.scala.collection.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = PubsubProto.javaDescriptor.getMessageTypes.get(4)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = PubsubProto.scalaDescriptor.messages(4)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = com.google.pubsub.v1.pubsub.PubsubMessage
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.google.pubsub.v1.pubsub.PublishRequest(
  )
  implicit class PublishRequestLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.google.pubsub.v1.pubsub.PublishRequest]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.google.pubsub.v1.pubsub.PublishRequest](_l) {
    def topic: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.topic)((c_, f_) => c_.copy(topic = f_))
    def messages: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[com.google.pubsub.v1.pubsub.PubsubMessage]] = field(_.messages)((c_, f_) => c_.copy(messages = f_))
  }
  final val TOPIC_FIELD_NUMBER = 1
  final val MESSAGES_FIELD_NUMBER = 2
  def of(
    topic: _root_.scala.Predef.String,
    messages: _root_.scala.collection.Seq[com.google.pubsub.v1.pubsub.PubsubMessage]
  ): _root_.com.google.pubsub.v1.pubsub.PublishRequest = _root_.com.google.pubsub.v1.pubsub.PublishRequest(
    topic,
    messages
  )
}
