
// Generated by Akka gRPC. DO NOT EDIT.
package com.google.pubsub.v1;

import akka.annotation.*;
import akka.grpc.internal.*;
import akka.grpc.GrpcClientSettings;
import akka.grpc.javadsl.AkkaGrpcClient;
import akka.grpc.javadsl.SingleResponseRequestBuilder;
import akka.grpc.javadsl.StreamResponseRequestBuilder;
import akka.stream.ActorMaterializer;
import akka.stream.Materializer;
import akka.stream.OverflowStrategy;

import io.grpc.ManagedChannel;
import io.grpc.MethodDescriptor;

import static com.google.pubsub.v1.Subscriber.Serializers.*;

import scala.concurrent.ExecutionContext;
import scala.compat.java8.FutureConverters;

public abstract class SubscriberClient extends SubscriberClientPowerApi implements Subscriber, AkkaGrpcClient {
  public static final SubscriberClient create(GrpcClientSettings settings, Materializer mat, ExecutionContext ec) {
    return new DefaultSubscriberClient(settings, mat, ec);
  }

  protected final static class DefaultSubscriberClient extends SubscriberClient {

      private final ClientState clientState;
      private final GrpcClientSettings settings;
      private final io.grpc.CallOptions options;
      private final Materializer mat;
      private final ExecutionContext ec;

      private DefaultSubscriberClient(GrpcClientSettings settings, Materializer mat, ExecutionContext ec) {
        this.settings = settings;
        this.mat = mat;
        this.ec = ec;
        this.clientState = new ClientState(settings, mat, ec);
        this.options = NettyClientUtils.callOptions(settings);

        if (mat instanceof ActorMaterializer) {
          ((ActorMaterializer) mat).system().getWhenTerminated().whenComplete((v, e) -> close());
        }
      }

  
    
      private final SingleResponseRequestBuilder<com.google.pubsub.v1.Subscription, com.google.pubsub.v1.Subscription> createSubscriptionRequestBuilder(scala.concurrent.Future<ManagedChannel> channel){
        return new JavaUnaryRequestBuilder<>(createSubscriptionDescriptor, channel, options, settings, ec);
      }
    
  
    
      private final SingleResponseRequestBuilder<com.google.pubsub.v1.GetSubscriptionRequest, com.google.pubsub.v1.Subscription> getSubscriptionRequestBuilder(scala.concurrent.Future<ManagedChannel> channel){
        return new JavaUnaryRequestBuilder<>(getSubscriptionDescriptor, channel, options, settings, ec);
      }
    
  
    
      private final SingleResponseRequestBuilder<com.google.pubsub.v1.UpdateSubscriptionRequest, com.google.pubsub.v1.Subscription> updateSubscriptionRequestBuilder(scala.concurrent.Future<ManagedChannel> channel){
        return new JavaUnaryRequestBuilder<>(updateSubscriptionDescriptor, channel, options, settings, ec);
      }
    
  
    
      private final SingleResponseRequestBuilder<com.google.pubsub.v1.ListSubscriptionsRequest, com.google.pubsub.v1.ListSubscriptionsResponse> listSubscriptionsRequestBuilder(scala.concurrent.Future<ManagedChannel> channel){
        return new JavaUnaryRequestBuilder<>(listSubscriptionsDescriptor, channel, options, settings, ec);
      }
    
  
    
      private final SingleResponseRequestBuilder<com.google.pubsub.v1.DeleteSubscriptionRequest, com.google.protobuf.Empty> deleteSubscriptionRequestBuilder(scala.concurrent.Future<ManagedChannel> channel){
        return new JavaUnaryRequestBuilder<>(deleteSubscriptionDescriptor, channel, options, settings, ec);
      }
    
  
    
      private final SingleResponseRequestBuilder<com.google.pubsub.v1.ModifyAckDeadlineRequest, com.google.protobuf.Empty> modifyAckDeadlineRequestBuilder(scala.concurrent.Future<ManagedChannel> channel){
        return new JavaUnaryRequestBuilder<>(modifyAckDeadlineDescriptor, channel, options, settings, ec);
      }
    
  
    
      private final SingleResponseRequestBuilder<com.google.pubsub.v1.AcknowledgeRequest, com.google.protobuf.Empty> acknowledgeRequestBuilder(scala.concurrent.Future<ManagedChannel> channel){
        return new JavaUnaryRequestBuilder<>(acknowledgeDescriptor, channel, options, settings, ec);
      }
    
  
    
      private final SingleResponseRequestBuilder<com.google.pubsub.v1.PullRequest, com.google.pubsub.v1.PullResponse> pullRequestBuilder(scala.concurrent.Future<ManagedChannel> channel){
        return new JavaUnaryRequestBuilder<>(pullDescriptor, channel, options, settings, ec);
      }
    
  
    
      
        
          private final StreamResponseRequestBuilder<akka.stream.javadsl.Source<com.google.pubsub.v1.StreamingPullRequest, akka.NotUsed>, com.google.pubsub.v1.StreamingPullResponse> streamingPullRequestBuilder(scala.concurrent.Future<ManagedChannel> channel){
            return new JavaBidirectionalStreamingRequestBuilder<>(
                                 streamingPullDescriptor, "google.pubsub.v1.Subscriber.StreamingPull", channel, options, settings, ec);
          }
        
      
    
  
    
      private final SingleResponseRequestBuilder<com.google.pubsub.v1.ModifyPushConfigRequest, com.google.protobuf.Empty> modifyPushConfigRequestBuilder(scala.concurrent.Future<ManagedChannel> channel){
        return new JavaUnaryRequestBuilder<>(modifyPushConfigDescriptor, channel, options, settings, ec);
      }
    
  
    
      private final SingleResponseRequestBuilder<com.google.pubsub.v1.ListSnapshotsRequest, com.google.pubsub.v1.ListSnapshotsResponse> listSnapshotsRequestBuilder(scala.concurrent.Future<ManagedChannel> channel){
        return new JavaUnaryRequestBuilder<>(listSnapshotsDescriptor, channel, options, settings, ec);
      }
    
  
    
      private final SingleResponseRequestBuilder<com.google.pubsub.v1.CreateSnapshotRequest, com.google.pubsub.v1.Snapshot> createSnapshotRequestBuilder(scala.concurrent.Future<ManagedChannel> channel){
        return new JavaUnaryRequestBuilder<>(createSnapshotDescriptor, channel, options, settings, ec);
      }
    
  
    
      private final SingleResponseRequestBuilder<com.google.pubsub.v1.UpdateSnapshotRequest, com.google.pubsub.v1.Snapshot> updateSnapshotRequestBuilder(scala.concurrent.Future<ManagedChannel> channel){
        return new JavaUnaryRequestBuilder<>(updateSnapshotDescriptor, channel, options, settings, ec);
      }
    
  
    
      private final SingleResponseRequestBuilder<com.google.pubsub.v1.DeleteSnapshotRequest, com.google.protobuf.Empty> deleteSnapshotRequestBuilder(scala.concurrent.Future<ManagedChannel> channel){
        return new JavaUnaryRequestBuilder<>(deleteSnapshotDescriptor, channel, options, settings, ec);
      }
    
  
    
      private final SingleResponseRequestBuilder<com.google.pubsub.v1.SeekRequest, com.google.pubsub.v1.SeekResponse> seekRequestBuilder(scala.concurrent.Future<ManagedChannel> channel){
        return new JavaUnaryRequestBuilder<>(seekDescriptor, channel, options, settings, ec);
      }
    
  

      

        /**
         * For access to method metadata use the parameterless version of createSubscription
         */
        public java.util.concurrent.CompletionStage<com.google.pubsub.v1.Subscription> createSubscription(com.google.pubsub.v1.Subscription request) {
          return createSubscription().invoke(request);
        }

        /**
         * Lower level "lifted" version of the method, giving access to request metadata etc.
         * prefer createSubscription(com.google.pubsub.v1.Subscription) if possible.
         */
        
          public SingleResponseRequestBuilder<com.google.pubsub.v1.Subscription, com.google.pubsub.v1.Subscription> createSubscription()
        
        {
          return clientState.withChannel( this::createSubscriptionRequestBuilder);
        }
      

        /**
         * For access to method metadata use the parameterless version of getSubscription
         */
        public java.util.concurrent.CompletionStage<com.google.pubsub.v1.Subscription> getSubscription(com.google.pubsub.v1.GetSubscriptionRequest request) {
          return getSubscription().invoke(request);
        }

        /**
         * Lower level "lifted" version of the method, giving access to request metadata etc.
         * prefer getSubscription(com.google.pubsub.v1.GetSubscriptionRequest) if possible.
         */
        
          public SingleResponseRequestBuilder<com.google.pubsub.v1.GetSubscriptionRequest, com.google.pubsub.v1.Subscription> getSubscription()
        
        {
          return clientState.withChannel( this::getSubscriptionRequestBuilder);
        }
      

        /**
         * For access to method metadata use the parameterless version of updateSubscription
         */
        public java.util.concurrent.CompletionStage<com.google.pubsub.v1.Subscription> updateSubscription(com.google.pubsub.v1.UpdateSubscriptionRequest request) {
          return updateSubscription().invoke(request);
        }

        /**
         * Lower level "lifted" version of the method, giving access to request metadata etc.
         * prefer updateSubscription(com.google.pubsub.v1.UpdateSubscriptionRequest) if possible.
         */
        
          public SingleResponseRequestBuilder<com.google.pubsub.v1.UpdateSubscriptionRequest, com.google.pubsub.v1.Subscription> updateSubscription()
        
        {
          return clientState.withChannel( this::updateSubscriptionRequestBuilder);
        }
      

        /**
         * For access to method metadata use the parameterless version of listSubscriptions
         */
        public java.util.concurrent.CompletionStage<com.google.pubsub.v1.ListSubscriptionsResponse> listSubscriptions(com.google.pubsub.v1.ListSubscriptionsRequest request) {
          return listSubscriptions().invoke(request);
        }

        /**
         * Lower level "lifted" version of the method, giving access to request metadata etc.
         * prefer listSubscriptions(com.google.pubsub.v1.ListSubscriptionsRequest) if possible.
         */
        
          public SingleResponseRequestBuilder<com.google.pubsub.v1.ListSubscriptionsRequest, com.google.pubsub.v1.ListSubscriptionsResponse> listSubscriptions()
        
        {
          return clientState.withChannel( this::listSubscriptionsRequestBuilder);
        }
      

        /**
         * For access to method metadata use the parameterless version of deleteSubscription
         */
        public java.util.concurrent.CompletionStage<com.google.protobuf.Empty> deleteSubscription(com.google.pubsub.v1.DeleteSubscriptionRequest request) {
          return deleteSubscription().invoke(request);
        }

        /**
         * Lower level "lifted" version of the method, giving access to request metadata etc.
         * prefer deleteSubscription(com.google.pubsub.v1.DeleteSubscriptionRequest) if possible.
         */
        
          public SingleResponseRequestBuilder<com.google.pubsub.v1.DeleteSubscriptionRequest, com.google.protobuf.Empty> deleteSubscription()
        
        {
          return clientState.withChannel( this::deleteSubscriptionRequestBuilder);
        }
      

        /**
         * For access to method metadata use the parameterless version of modifyAckDeadline
         */
        public java.util.concurrent.CompletionStage<com.google.protobuf.Empty> modifyAckDeadline(com.google.pubsub.v1.ModifyAckDeadlineRequest request) {
          return modifyAckDeadline().invoke(request);
        }

        /**
         * Lower level "lifted" version of the method, giving access to request metadata etc.
         * prefer modifyAckDeadline(com.google.pubsub.v1.ModifyAckDeadlineRequest) if possible.
         */
        
          public SingleResponseRequestBuilder<com.google.pubsub.v1.ModifyAckDeadlineRequest, com.google.protobuf.Empty> modifyAckDeadline()
        
        {
          return clientState.withChannel( this::modifyAckDeadlineRequestBuilder);
        }
      

        /**
         * For access to method metadata use the parameterless version of acknowledge
         */
        public java.util.concurrent.CompletionStage<com.google.protobuf.Empty> acknowledge(com.google.pubsub.v1.AcknowledgeRequest request) {
          return acknowledge().invoke(request);
        }

        /**
         * Lower level "lifted" version of the method, giving access to request metadata etc.
         * prefer acknowledge(com.google.pubsub.v1.AcknowledgeRequest) if possible.
         */
        
          public SingleResponseRequestBuilder<com.google.pubsub.v1.AcknowledgeRequest, com.google.protobuf.Empty> acknowledge()
        
        {
          return clientState.withChannel( this::acknowledgeRequestBuilder);
        }
      

        /**
         * For access to method metadata use the parameterless version of pull
         */
        public java.util.concurrent.CompletionStage<com.google.pubsub.v1.PullResponse> pull(com.google.pubsub.v1.PullRequest request) {
          return pull().invoke(request);
        }

        /**
         * Lower level "lifted" version of the method, giving access to request metadata etc.
         * prefer pull(com.google.pubsub.v1.PullRequest) if possible.
         */
        
          public SingleResponseRequestBuilder<com.google.pubsub.v1.PullRequest, com.google.pubsub.v1.PullResponse> pull()
        
        {
          return clientState.withChannel( this::pullRequestBuilder);
        }
      

        /**
         * For access to method metadata use the parameterless version of streamingPull
         */
        public akka.stream.javadsl.Source<com.google.pubsub.v1.StreamingPullResponse, akka.NotUsed> streamingPull(akka.stream.javadsl.Source<com.google.pubsub.v1.StreamingPullRequest, akka.NotUsed> request) {
          return streamingPull().invoke(request);
        }

        /**
         * Lower level "lifted" version of the method, giving access to request metadata etc.
         * prefer streamingPull(com.google.pubsub.v1.StreamingPullRequest) if possible.
         */
        
          public StreamResponseRequestBuilder<akka.stream.javadsl.Source<com.google.pubsub.v1.StreamingPullRequest, akka.NotUsed>, com.google.pubsub.v1.StreamingPullResponse> streamingPull()
        
        {
          return clientState.withChannel( this::streamingPullRequestBuilder);
        }
      

        /**
         * For access to method metadata use the parameterless version of modifyPushConfig
         */
        public java.util.concurrent.CompletionStage<com.google.protobuf.Empty> modifyPushConfig(com.google.pubsub.v1.ModifyPushConfigRequest request) {
          return modifyPushConfig().invoke(request);
        }

        /**
         * Lower level "lifted" version of the method, giving access to request metadata etc.
         * prefer modifyPushConfig(com.google.pubsub.v1.ModifyPushConfigRequest) if possible.
         */
        
          public SingleResponseRequestBuilder<com.google.pubsub.v1.ModifyPushConfigRequest, com.google.protobuf.Empty> modifyPushConfig()
        
        {
          return clientState.withChannel( this::modifyPushConfigRequestBuilder);
        }
      

        /**
         * For access to method metadata use the parameterless version of listSnapshots
         */
        public java.util.concurrent.CompletionStage<com.google.pubsub.v1.ListSnapshotsResponse> listSnapshots(com.google.pubsub.v1.ListSnapshotsRequest request) {
          return listSnapshots().invoke(request);
        }

        /**
         * Lower level "lifted" version of the method, giving access to request metadata etc.
         * prefer listSnapshots(com.google.pubsub.v1.ListSnapshotsRequest) if possible.
         */
        
          public SingleResponseRequestBuilder<com.google.pubsub.v1.ListSnapshotsRequest, com.google.pubsub.v1.ListSnapshotsResponse> listSnapshots()
        
        {
          return clientState.withChannel( this::listSnapshotsRequestBuilder);
        }
      

        /**
         * For access to method metadata use the parameterless version of createSnapshot
         */
        public java.util.concurrent.CompletionStage<com.google.pubsub.v1.Snapshot> createSnapshot(com.google.pubsub.v1.CreateSnapshotRequest request) {
          return createSnapshot().invoke(request);
        }

        /**
         * Lower level "lifted" version of the method, giving access to request metadata etc.
         * prefer createSnapshot(com.google.pubsub.v1.CreateSnapshotRequest) if possible.
         */
        
          public SingleResponseRequestBuilder<com.google.pubsub.v1.CreateSnapshotRequest, com.google.pubsub.v1.Snapshot> createSnapshot()
        
        {
          return clientState.withChannel( this::createSnapshotRequestBuilder);
        }
      

        /**
         * For access to method metadata use the parameterless version of updateSnapshot
         */
        public java.util.concurrent.CompletionStage<com.google.pubsub.v1.Snapshot> updateSnapshot(com.google.pubsub.v1.UpdateSnapshotRequest request) {
          return updateSnapshot().invoke(request);
        }

        /**
         * Lower level "lifted" version of the method, giving access to request metadata etc.
         * prefer updateSnapshot(com.google.pubsub.v1.UpdateSnapshotRequest) if possible.
         */
        
          public SingleResponseRequestBuilder<com.google.pubsub.v1.UpdateSnapshotRequest, com.google.pubsub.v1.Snapshot> updateSnapshot()
        
        {
          return clientState.withChannel( this::updateSnapshotRequestBuilder);
        }
      

        /**
         * For access to method metadata use the parameterless version of deleteSnapshot
         */
        public java.util.concurrent.CompletionStage<com.google.protobuf.Empty> deleteSnapshot(com.google.pubsub.v1.DeleteSnapshotRequest request) {
          return deleteSnapshot().invoke(request);
        }

        /**
         * Lower level "lifted" version of the method, giving access to request metadata etc.
         * prefer deleteSnapshot(com.google.pubsub.v1.DeleteSnapshotRequest) if possible.
         */
        
          public SingleResponseRequestBuilder<com.google.pubsub.v1.DeleteSnapshotRequest, com.google.protobuf.Empty> deleteSnapshot()
        
        {
          return clientState.withChannel( this::deleteSnapshotRequestBuilder);
        }
      

        /**
         * For access to method metadata use the parameterless version of seek
         */
        public java.util.concurrent.CompletionStage<com.google.pubsub.v1.SeekResponse> seek(com.google.pubsub.v1.SeekRequest request) {
          return seek().invoke(request);
        }

        /**
         * Lower level "lifted" version of the method, giving access to request metadata etc.
         * prefer seek(com.google.pubsub.v1.SeekRequest) if possible.
         */
        
          public SingleResponseRequestBuilder<com.google.pubsub.v1.SeekRequest, com.google.pubsub.v1.SeekResponse> seek()
        
        {
          return clientState.withChannel( this::seekRequestBuilder);
        }
      

      
        private static MethodDescriptor<com.google.pubsub.v1.Subscription, com.google.pubsub.v1.Subscription> createSubscriptionDescriptor =
          MethodDescriptor.<com.google.pubsub.v1.Subscription, com.google.pubsub.v1.Subscription>newBuilder()
            .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
            .setFullMethodName(MethodDescriptor.generateFullMethodName("google.pubsub.v1.Subscriber", "CreateSubscription"))
            .setRequestMarshaller(new ProtoMarshaller<com.google.pubsub.v1.Subscription>(SubscriptionSerializer))
            .setResponseMarshaller(new ProtoMarshaller<com.google.pubsub.v1.Subscription>(SubscriptionSerializer))
            .setSampledToLocalTracing(true)
            .build();
        
        private static MethodDescriptor<com.google.pubsub.v1.GetSubscriptionRequest, com.google.pubsub.v1.Subscription> getSubscriptionDescriptor =
          MethodDescriptor.<com.google.pubsub.v1.GetSubscriptionRequest, com.google.pubsub.v1.Subscription>newBuilder()
            .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
            .setFullMethodName(MethodDescriptor.generateFullMethodName("google.pubsub.v1.Subscriber", "GetSubscription"))
            .setRequestMarshaller(new ProtoMarshaller<com.google.pubsub.v1.GetSubscriptionRequest>(GetSubscriptionRequestSerializer))
            .setResponseMarshaller(new ProtoMarshaller<com.google.pubsub.v1.Subscription>(SubscriptionSerializer))
            .setSampledToLocalTracing(true)
            .build();
        
        private static MethodDescriptor<com.google.pubsub.v1.UpdateSubscriptionRequest, com.google.pubsub.v1.Subscription> updateSubscriptionDescriptor =
          MethodDescriptor.<com.google.pubsub.v1.UpdateSubscriptionRequest, com.google.pubsub.v1.Subscription>newBuilder()
            .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
            .setFullMethodName(MethodDescriptor.generateFullMethodName("google.pubsub.v1.Subscriber", "UpdateSubscription"))
            .setRequestMarshaller(new ProtoMarshaller<com.google.pubsub.v1.UpdateSubscriptionRequest>(UpdateSubscriptionRequestSerializer))
            .setResponseMarshaller(new ProtoMarshaller<com.google.pubsub.v1.Subscription>(SubscriptionSerializer))
            .setSampledToLocalTracing(true)
            .build();
        
        private static MethodDescriptor<com.google.pubsub.v1.ListSubscriptionsRequest, com.google.pubsub.v1.ListSubscriptionsResponse> listSubscriptionsDescriptor =
          MethodDescriptor.<com.google.pubsub.v1.ListSubscriptionsRequest, com.google.pubsub.v1.ListSubscriptionsResponse>newBuilder()
            .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
            .setFullMethodName(MethodDescriptor.generateFullMethodName("google.pubsub.v1.Subscriber", "ListSubscriptions"))
            .setRequestMarshaller(new ProtoMarshaller<com.google.pubsub.v1.ListSubscriptionsRequest>(ListSubscriptionsRequestSerializer))
            .setResponseMarshaller(new ProtoMarshaller<com.google.pubsub.v1.ListSubscriptionsResponse>(ListSubscriptionsResponseSerializer))
            .setSampledToLocalTracing(true)
            .build();
        
        private static MethodDescriptor<com.google.pubsub.v1.DeleteSubscriptionRequest, com.google.protobuf.Empty> deleteSubscriptionDescriptor =
          MethodDescriptor.<com.google.pubsub.v1.DeleteSubscriptionRequest, com.google.protobuf.Empty>newBuilder()
            .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
            .setFullMethodName(MethodDescriptor.generateFullMethodName("google.pubsub.v1.Subscriber", "DeleteSubscription"))
            .setRequestMarshaller(new ProtoMarshaller<com.google.pubsub.v1.DeleteSubscriptionRequest>(DeleteSubscriptionRequestSerializer))
            .setResponseMarshaller(new ProtoMarshaller<com.google.protobuf.Empty>(EmptySerializer))
            .setSampledToLocalTracing(true)
            .build();
        
        private static MethodDescriptor<com.google.pubsub.v1.ModifyAckDeadlineRequest, com.google.protobuf.Empty> modifyAckDeadlineDescriptor =
          MethodDescriptor.<com.google.pubsub.v1.ModifyAckDeadlineRequest, com.google.protobuf.Empty>newBuilder()
            .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
            .setFullMethodName(MethodDescriptor.generateFullMethodName("google.pubsub.v1.Subscriber", "ModifyAckDeadline"))
            .setRequestMarshaller(new ProtoMarshaller<com.google.pubsub.v1.ModifyAckDeadlineRequest>(ModifyAckDeadlineRequestSerializer))
            .setResponseMarshaller(new ProtoMarshaller<com.google.protobuf.Empty>(EmptySerializer))
            .setSampledToLocalTracing(true)
            .build();
        
        private static MethodDescriptor<com.google.pubsub.v1.AcknowledgeRequest, com.google.protobuf.Empty> acknowledgeDescriptor =
          MethodDescriptor.<com.google.pubsub.v1.AcknowledgeRequest, com.google.protobuf.Empty>newBuilder()
            .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
            .setFullMethodName(MethodDescriptor.generateFullMethodName("google.pubsub.v1.Subscriber", "Acknowledge"))
            .setRequestMarshaller(new ProtoMarshaller<com.google.pubsub.v1.AcknowledgeRequest>(AcknowledgeRequestSerializer))
            .setResponseMarshaller(new ProtoMarshaller<com.google.protobuf.Empty>(EmptySerializer))
            .setSampledToLocalTracing(true)
            .build();
        
        private static MethodDescriptor<com.google.pubsub.v1.PullRequest, com.google.pubsub.v1.PullResponse> pullDescriptor =
          MethodDescriptor.<com.google.pubsub.v1.PullRequest, com.google.pubsub.v1.PullResponse>newBuilder()
            .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
            .setFullMethodName(MethodDescriptor.generateFullMethodName("google.pubsub.v1.Subscriber", "Pull"))
            .setRequestMarshaller(new ProtoMarshaller<com.google.pubsub.v1.PullRequest>(PullRequestSerializer))
            .setResponseMarshaller(new ProtoMarshaller<com.google.pubsub.v1.PullResponse>(PullResponseSerializer))
            .setSampledToLocalTracing(true)
            .build();
        
        private static MethodDescriptor<com.google.pubsub.v1.StreamingPullRequest, com.google.pubsub.v1.StreamingPullResponse> streamingPullDescriptor =
          MethodDescriptor.<com.google.pubsub.v1.StreamingPullRequest, com.google.pubsub.v1.StreamingPullResponse>newBuilder()
            .setType(
  
  
  
  MethodDescriptor.MethodType.BIDI_STREAMING 
)
            .setFullMethodName(MethodDescriptor.generateFullMethodName("google.pubsub.v1.Subscriber", "StreamingPull"))
            .setRequestMarshaller(new ProtoMarshaller<com.google.pubsub.v1.StreamingPullRequest>(StreamingPullRequestSerializer))
            .setResponseMarshaller(new ProtoMarshaller<com.google.pubsub.v1.StreamingPullResponse>(StreamingPullResponseSerializer))
            .setSampledToLocalTracing(true)
            .build();
        
        private static MethodDescriptor<com.google.pubsub.v1.ModifyPushConfigRequest, com.google.protobuf.Empty> modifyPushConfigDescriptor =
          MethodDescriptor.<com.google.pubsub.v1.ModifyPushConfigRequest, com.google.protobuf.Empty>newBuilder()
            .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
            .setFullMethodName(MethodDescriptor.generateFullMethodName("google.pubsub.v1.Subscriber", "ModifyPushConfig"))
            .setRequestMarshaller(new ProtoMarshaller<com.google.pubsub.v1.ModifyPushConfigRequest>(ModifyPushConfigRequestSerializer))
            .setResponseMarshaller(new ProtoMarshaller<com.google.protobuf.Empty>(EmptySerializer))
            .setSampledToLocalTracing(true)
            .build();
        
        private static MethodDescriptor<com.google.pubsub.v1.ListSnapshotsRequest, com.google.pubsub.v1.ListSnapshotsResponse> listSnapshotsDescriptor =
          MethodDescriptor.<com.google.pubsub.v1.ListSnapshotsRequest, com.google.pubsub.v1.ListSnapshotsResponse>newBuilder()
            .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
            .setFullMethodName(MethodDescriptor.generateFullMethodName("google.pubsub.v1.Subscriber", "ListSnapshots"))
            .setRequestMarshaller(new ProtoMarshaller<com.google.pubsub.v1.ListSnapshotsRequest>(ListSnapshotsRequestSerializer))
            .setResponseMarshaller(new ProtoMarshaller<com.google.pubsub.v1.ListSnapshotsResponse>(ListSnapshotsResponseSerializer))
            .setSampledToLocalTracing(true)
            .build();
        
        private static MethodDescriptor<com.google.pubsub.v1.CreateSnapshotRequest, com.google.pubsub.v1.Snapshot> createSnapshotDescriptor =
          MethodDescriptor.<com.google.pubsub.v1.CreateSnapshotRequest, com.google.pubsub.v1.Snapshot>newBuilder()
            .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
            .setFullMethodName(MethodDescriptor.generateFullMethodName("google.pubsub.v1.Subscriber", "CreateSnapshot"))
            .setRequestMarshaller(new ProtoMarshaller<com.google.pubsub.v1.CreateSnapshotRequest>(CreateSnapshotRequestSerializer))
            .setResponseMarshaller(new ProtoMarshaller<com.google.pubsub.v1.Snapshot>(SnapshotSerializer))
            .setSampledToLocalTracing(true)
            .build();
        
        private static MethodDescriptor<com.google.pubsub.v1.UpdateSnapshotRequest, com.google.pubsub.v1.Snapshot> updateSnapshotDescriptor =
          MethodDescriptor.<com.google.pubsub.v1.UpdateSnapshotRequest, com.google.pubsub.v1.Snapshot>newBuilder()
            .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
            .setFullMethodName(MethodDescriptor.generateFullMethodName("google.pubsub.v1.Subscriber", "UpdateSnapshot"))
            .setRequestMarshaller(new ProtoMarshaller<com.google.pubsub.v1.UpdateSnapshotRequest>(UpdateSnapshotRequestSerializer))
            .setResponseMarshaller(new ProtoMarshaller<com.google.pubsub.v1.Snapshot>(SnapshotSerializer))
            .setSampledToLocalTracing(true)
            .build();
        
        private static MethodDescriptor<com.google.pubsub.v1.DeleteSnapshotRequest, com.google.protobuf.Empty> deleteSnapshotDescriptor =
          MethodDescriptor.<com.google.pubsub.v1.DeleteSnapshotRequest, com.google.protobuf.Empty>newBuilder()
            .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
            .setFullMethodName(MethodDescriptor.generateFullMethodName("google.pubsub.v1.Subscriber", "DeleteSnapshot"))
            .setRequestMarshaller(new ProtoMarshaller<com.google.pubsub.v1.DeleteSnapshotRequest>(DeleteSnapshotRequestSerializer))
            .setResponseMarshaller(new ProtoMarshaller<com.google.protobuf.Empty>(EmptySerializer))
            .setSampledToLocalTracing(true)
            .build();
        
        private static MethodDescriptor<com.google.pubsub.v1.SeekRequest, com.google.pubsub.v1.SeekResponse> seekDescriptor =
          MethodDescriptor.<com.google.pubsub.v1.SeekRequest, com.google.pubsub.v1.SeekResponse>newBuilder()
            .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
            .setFullMethodName(MethodDescriptor.generateFullMethodName("google.pubsub.v1.Subscriber", "Seek"))
            .setRequestMarshaller(new ProtoMarshaller<com.google.pubsub.v1.SeekRequest>(SeekRequestSerializer))
            .setResponseMarshaller(new ProtoMarshaller<com.google.pubsub.v1.SeekResponse>(SeekResponseSerializer))
            .setSampledToLocalTracing(true)
            .build();
        

      /**
       * Initiates a shutdown in which preexisting and new calls are cancelled.
       */
      public java.util.concurrent.CompletionStage<akka.Done> close() {
        return clientState.closeCS() ;
      }

     /**
      * Returns a CompletionState that completes successfully when shutdown via close()
      * or exceptionally if a connection can not be established after maxConnectionAttempts.
      */
      public java.util.concurrent.CompletionStage<akka.Done> closed() {
        return clientState.closedCS();
      }
  }

}



