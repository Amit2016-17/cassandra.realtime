[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/sns/src/main/scala/akka/stream/alpakka/sns/javadsl/SnsPublisher.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.sns.javadsl[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.util.concurrent.CompletionStage[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.sns.SnsPublishSettings[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.javadsl.{Flow, Keep, Sink}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.{Done, NotUsed}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport software.amazon.awssdk.services.sns.SnsAsyncClient[0m
[0m[[0m[0mdebug[0m] [0m[0mimport software.amazon.awssdk.services.sns.model.{PublishRequest, PublishResponse}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m/**[0m
[0m[[0m[0mdebug[0m] [0m[0m * Java API[0m
[0m[[0m[0mdebug[0m] [0m[0m * Amazon SNS publisher factory.[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0mobject SnsPublisher {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * creates a [[akka.stream.javadsl.Flow Flow]] to publish messages to a SNS topic using an [[software.amazon.awssdk.services.sns.SnsAsyncClient SnsAsyncClient]][0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def createFlow(topicArn: String,[0m
[0m[[0m[0mdebug[0m] [0m[0m                 settings: SnsPublishSettings,[0m
[0m[[0m[0mdebug[0m] [0m[0m                 snsClient: SnsAsyncClient): Flow[String, PublishResponse, NotUsed] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    akka.stream.alpakka.sns.scaladsl.SnsPublisher.flow(topicArn, settings)(snsClient).asJava[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * creates a [[akka.stream.javadsl.Flow Flow]] to publish messages to a SNS topic using an [[software.amazon.awssdk.services.sns.SnsAsyncClient SnsAsyncClient]][0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def createFlow(topicArn: String, snsClient: SnsAsyncClient): Flow[String, PublishResponse, NotUsed] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    akka.stream.alpakka.sns.scaladsl.SnsPublisher.flow(topicArn, SnsPublishSettings())(snsClient).asJava[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * creates a [[akka.stream.javadsl.Flow Flow]] to publish messages to a SNS topic using an [[software.amazon.awssdk.services.sns.SnsAsyncClient SnsAsyncClient]][0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def createPublishFlow(topicArn: String,[0m
[0m[[0m[0mdebug[0m] [0m[0m                        settings: SnsPublishSettings,[0m
[0m[[0m[0mdebug[0m] [0m[0m                        snsClient: SnsAsyncClient): Flow[PublishRequest, PublishResponse, NotUsed] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    akka.stream.alpakka.sns.scaladsl.SnsPublisher.publishFlow(topicArn, settings)(snsClient).asJava[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * creates a [[akka.stream.javadsl.Flow Flow]] to publish messages to a SNS topic using an [[software.amazon.awssdk.services.sns.SnsAsyncClient SnsAsyncClient]][0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def createPublishFlow(topicArn: String, snsClient: SnsAsyncClient): Flow[PublishRequest, PublishResponse, NotUsed] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    akka.stream.alpakka.sns.scaladsl.SnsPublisher.publishFlow(topicArn, SnsPublishSettings())(snsClient).asJava[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * creates a [[akka.stream.javadsl.Flow Flow]] to publish messages to a SNS topics based on the message topic arn using an [[software.amazon.awssdk.services.sns.SnsAsyncClient SnsAsyncClient]][0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def createPublishFlow(settings: SnsPublishSettings,[0m
[0m[[0m[0mdebug[0m] [0m[0m                        snsClient: SnsAsyncClient): Flow[PublishRequest, PublishResponse, NotUsed] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    akka.stream.alpakka.sns.scaladsl.SnsPublisher.publishFlow(settings)(snsClient).asJava[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * creates a [[akka.stream.javadsl.Flow Flow]] to publish messages to a SNS topics based on the message topic arn using an [[software.amazon.awssdk.services.sns.SnsAsyncClient SnsAsyncClient]][0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def createPublishFlow(snsClient: SnsAsyncClient): Flow[PublishRequest, PublishResponse, NotUsed] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    akka.stream.alpakka.sns.scaladsl.SnsPublisher.publishFlow(SnsPublishSettings())(snsClient).asJava[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * creates a [[akka.stream.javadsl.Sink Sink]] to publish messages to a SNS topic using an [[software.amazon.awssdk.services.sns.SnsAsyncClient SnsAsyncClient]][0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def createSink(topicArn: String,[0m
[0m[[0m[0mdebug[0m] [0m[0m                 settings: SnsPublishSettings,[0m
[0m[[0m[0mdebug[0m] [0m[0m                 snsClient: SnsAsyncClient): Sink[String, CompletionStage[Done]] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    createFlow(topicArn, settings, snsClient)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .toMat(Sink.ignore(), Keep.right[NotUsed, CompletionStage[Done]])[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * creates a [[akka.stream.javadsl.Sink Sink]] to publish messages to a SNS topic using an [[software.amazon.awssdk.services.sns.SnsAsyncClient SnsAsyncClient]][0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def createSink(topicArn: String, snsClient: SnsAsyncClient): Sink[String, CompletionStage[Done]] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    createFlow(topicArn, SnsPublishSettings(), snsClient)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .toMat(Sink.ignore(), Keep.right[NotUsed, CompletionStage[Done]])[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * creates a [[akka.stream.javadsl.Sink Sink]] to publish messages to a SNS topic using an [[software.amazon.awssdk.services.sns.SnsAsyncClient SnsAsyncClient]][0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def createPublishSink(topicArn: String,[0m
[0m[[0m[0mdebug[0m] [0m[0m                        settings: SnsPublishSettings,[0m
[0m[[0m[0mdebug[0m] [0m[0m                        snsClient: SnsAsyncClient): Sink[PublishRequest, CompletionStage[Done]] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    createPublishFlow(topicArn, settings, snsClient)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .toMat(Sink.ignore(), Keep.right[NotUsed, CompletionStage[Done]])[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * creates a [[akka.stream.javadsl.Sink Sink]] to publish messages to a SNS topic using an [[software.amazon.awssdk.services.sns.SnsAsyncClient SnsAsyncClient]][0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def createPublishSink(topicArn: String, snsClient: SnsAsyncClient): Sink[PublishRequest, CompletionStage[Done]] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    createPublishFlow(topicArn, SnsPublishSettings(), snsClient)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .toMat(Sink.ignore(), Keep.right[NotUsed, CompletionStage[Done]])[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * creates a [[akka.stream.javadsl.Sink Sink]] to publish messages to a SNS topics based on the message topic arn using an [[software.amazon.awssdk.services.sns.SnsAsyncClient SnsAsyncClient]][0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def createPublishSink(settings: SnsPublishSettings,[0m
[0m[[0m[0mdebug[0m] [0m[0m                        snsClient: SnsAsyncClient): Sink[PublishRequest, CompletionStage[Done]] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    createPublishFlow(settings, snsClient)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .toMat(Sink.ignore(), Keep.right[NotUsed, CompletionStage[Done]])[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * creates a [[akka.stream.javadsl.Sink Sink]] to publish messages to a SNS topics based on the message topic arn using an [[software.amazon.awssdk.services.sns.SnsAsyncClient SnsAsyncClient]][0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def createPublishSink(snsClient: SnsAsyncClient): Sink[PublishRequest, CompletionStage[Done]] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    createPublishFlow(SnsPublishSettings(), snsClient)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .toMat(Sink.ignore(), Keep.right[NotUsed, CompletionStage[Done]])[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/sns/src/main/scala/akka/stream/alpakka/sns/SnsPublishSettings.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.sns[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mfinal class SnsPublishSettings private (val concurrency: Int) {[0m
[0m[[0m[0mdebug[0m] [0m[0m  require(concurrency > 0)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def withConcurrency(concurrency: Int): SnsPublishSettings = copy(concurrency = concurrency)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def copy(concurrency: Int) = new SnsPublishSettings(concurrency)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  override def toString: String =[0m
[0m[[0m[0mdebug[0m] [0m[0m    "SnsPublishSettings(" +[0m
[0m[[0m[0mdebug[0m] [0m[0m    s"concurrency=$concurrency" +[0m
[0m[[0m[0mdebug[0m] [0m[0m    ")"[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mobject SnsPublishSettings {[0m
[0m[[0m[0mdebug[0m] [0m[0m  val Defaults: SnsPublishSettings = new SnsPublishSettings(concurrency = 10)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /** Scala API */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def apply(): SnsPublishSettings = Defaults[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /** Java API */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def create(): SnsPublishSettings = Defaults[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/sns/src/main/scala/akka/stream/alpakka/sns/scaladsl/SnsPublisher.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.sns.scaladsl[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.sns.SnsPublishSettings[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.scaladsl.{Flow, Keep, Sink}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.{Done, NotUsed}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport software.amazon.awssdk.services.sns.SnsAsyncClient[0m
[0m[[0m[0mdebug[0m] [0m[0mimport software.amazon.awssdk.services.sns.model.{PublishRequest, PublishResponse}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.concurrent.Future[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.compat.java8.FutureConverters._[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m/**[0m
[0m[[0m[0mdebug[0m] [0m[0m * Scala API[0m
[0m[[0m[0mdebug[0m] [0m[0m * Amazon SNS publisher factory.[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0mobject SnsPublisher {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * creates a [[akka.stream.scaladsl.Flow Flow]] to publish messages to a SNS topic using an [[software.amazon.awssdk.services.sns.SnsAsyncClient SnsAsyncClient]][0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def flow(topicArn: String, settings: SnsPublishSettings = SnsPublishSettings())([0m
[0m[[0m[0mdebug[0m] [0m[0m      implicit snsClient: SnsAsyncClient[0m
[0m[[0m[0mdebug[0m] [0m[0m  ): Flow[String, PublishResponse, NotUsed] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    Flow[0m
[0m[[0m[0mdebug[0m] [0m[0m      .fromFunction((message: String) => PublishRequest.builder().message(message).topicArn(topicArn).build())[0m
[0m[[0m[0mdebug[0m] [0m[0m      .via(publishFlow(settings))[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * creates a [[akka.stream.scaladsl.Flow Flow]] to publish messages to a SNS topic using an [[software.amazon.awssdk.services.sns.SnsAsyncClient SnsAsyncClient]][0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def publishFlow(topicArn: String, settings: SnsPublishSettings = SnsPublishSettings())([0m
[0m[[0m[0mdebug[0m] [0m[0m      implicit snsClient: SnsAsyncClient[0m
[0m[[0m[0mdebug[0m] [0m[0m  ): Flow[PublishRequest, PublishResponse, NotUsed] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    Flow[0m
[0m[[0m[0mdebug[0m] [0m[0m      .fromFunction((request: PublishRequest) => request.toBuilder.topicArn(topicArn).build())[0m
[0m[[0m[0mdebug[0m] [0m[0m      .via(publishFlow(settings))[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * creates a [[akka.stream.scaladsl.Flow Flow]] to publish messages to SNS topics based on the message topic arn using an [[software.amazon.awssdk.services.sns.SnsAsyncClient SnsAsyncClient]][0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def publishFlow([0m
[0m[[0m[0mdebug[0m] [0m[0m      settings: SnsPublishSettings[0m
[0m[[0m[0mdebug[0m] [0m[0m  )(implicit snsClient: SnsAsyncClient): Flow[PublishRequest, PublishResponse, NotUsed] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    Flow[PublishRequest][0m
[0m[[0m[0mdebug[0m] [0m[0m      .mapAsyncUnordered(settings.concurrency)(snsClient.publish(_).toScala)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * creates a [[akka.stream.scaladsl.Flow Flow]] to publish messages to SNS topics based on the message topic arn using an [[software.amazon.awssdk.services.sns.SnsAsyncClient SnsAsyncClient]][0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def publishFlow()(implicit snsClient: SnsAsyncClient): Flow[PublishRequest, PublishResponse, NotUsed] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    publishFlow(SnsPublishSettings())[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * creates a [[akka.stream.scaladsl.Sink Sink]] to publish messages to a SNS topic using an [[software.amazon.awssdk.services.sns.SnsAsyncClient SnsAsyncClient]][0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def sink(topicArn: String, settings: SnsPublishSettings = SnsPublishSettings())([0m
[0m[[0m[0mdebug[0m] [0m[0m      implicit snsClient: SnsAsyncClient[0m
[0m[[0m[0mdebug[0m] [0m[0m  ): Sink[String, Future[Done]] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    flow(topicArn, settings).toMat(Sink.ignore)(Keep.right)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * creates a [[akka.stream.scaladsl.Sink Sink]] to publish messages to a SNS topic using an [[software.amazon.awssdk.services.sns.SnsAsyncClient SnsAsyncClient]][0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def publishSink(topicArn: String, settings: SnsPublishSettings = SnsPublishSettings())([0m
[0m[[0m[0mdebug[0m] [0m[0m      implicit snsClient: SnsAsyncClient[0m
[0m[[0m[0mdebug[0m] [0m[0m  ): Sink[PublishRequest, Future[Done]] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    publishFlow(topicArn, settings).toMat(Sink.ignore)(Keep.right)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * creates a [[akka.stream.scaladsl.Sink Sink]] to publish messages to SNS topics based on the message topic arn using an [[software.amazon.awssdk.services.sns.SnsAsyncClient SnsAsyncClient]][0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def publishSink([0m
[0m[[0m[0mdebug[0m] [0m[0m      settings: SnsPublishSettings[0m
[0m[[0m[0mdebug[0m] [0m[0m  )(implicit snsClient: SnsAsyncClient): Sink[PublishRequest, Future[Done]] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    publishFlow(settings).toMat(Sink.ignore)(Keep.right)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * creates a [[akka.stream.scaladsl.Sink Sink]] to publish messages to SNS topics based on the message topic arn using an [[software.amazon.awssdk.services.sns.SnsAsyncClient SnsAsyncClient]][0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def publishSink()(implicit snsClient: SnsAsyncClient): Sink[PublishRequest, Future[Done]] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    publishFlow(SnsPublishSettings()).toMat(Sink.ignore)(Keep.right)[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
