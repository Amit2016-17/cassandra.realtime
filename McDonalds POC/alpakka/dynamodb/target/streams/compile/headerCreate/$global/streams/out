[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/dynamodb/src/main/scala/akka/stream/alpakka/dynamodb/javadsl/DynamoDb.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.dynamodb.javadsl[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.util.concurrent.CompletionStage[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.NotUsed[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.Materializer[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.dynamodb.{AwsOp, AwsPagedOp}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.dynamodb.scaladsl[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.javadsl.{Flow, Sink, Source}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport com.amazonaws.services.dynamodbv2.model._[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m/**[0m
[0m[[0m[0mdebug[0m] [0m[0m * Factory of DynamoDb Akka Stream operators.[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0mobject DynamoDb {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Create a Flow that emits a response for every request.[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def flow[Op <: AwsOp](): Flow[Op, Op#B, NotUsed] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    scaladsl.DynamoDb.flow.asJava[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Create a Source that will emit potentially multiple responses for a given request.[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def source(op: AwsPagedOp): Source[op.B, NotUsed] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    scaladsl.DynamoDb.source(op).asJava[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Create a Source that will emit a response for a given request.[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def source(op: AwsOp): Source[op.B, NotUsed] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    scaladsl.DynamoDb.source(op).asJava[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Create a CompletionStage that will be completed with a response to a given request.[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def single[Op <: AwsOp](op: Op, mat: Materializer): CompletionStage[Op#B] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    source(op).runWith(Sink.head(), mat)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def batchGetItem(request: BatchGetItemRequest): Source[BatchGetItemResult, NotUsed] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    scaladsl.DynamoDb.source(request).asJava[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def createTable(request: CreateTableRequest): Source[CreateTableResult, NotUsed] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    scaladsl.DynamoDb.source(request).asJava[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def deleteItem(request: DeleteItemRequest): Source[DeleteItemResult, NotUsed] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    scaladsl.DynamoDb.source(request).asJava[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def deleteTable(request: DeleteTableRequest): Source[DeleteTableResult, NotUsed] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    scaladsl.DynamoDb.source(request).asJava[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def describeLimits(request: DescribeLimitsRequest): Source[DescribeLimitsResult, NotUsed] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    scaladsl.DynamoDb.source(request).asJava[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def describeTable(request: DescribeTableRequest): Source[DescribeTableResult, NotUsed] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    scaladsl.DynamoDb.source(request).asJava[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def describeTimeToLive(request: DescribeTimeToLiveRequest): Source[DescribeTimeToLiveResult, NotUsed] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    scaladsl.DynamoDb.source(request).asJava[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def query(request: QueryRequest): Source[QueryResult, NotUsed] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    scaladsl.DynamoDb.source(request).asJava[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def queryAll(request: QueryRequest): Source[QueryResult, NotUsed] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    scaladsl.DynamoDb.source(request).asJava[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def scan(request: ScanRequest): Source[ScanResult, NotUsed] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    scaladsl.DynamoDb.source(request).asJava[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def scanAll(request: ScanRequest): Source[ScanResult, NotUsed] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    scaladsl.DynamoDb.source(request).asJava[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def updateItem(request: UpdateItemRequest): Source[UpdateItemResult, NotUsed] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    scaladsl.DynamoDb.source(request).asJava[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def updateTable(request: UpdateTableRequest): Source[UpdateTableResult, NotUsed] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    scaladsl.DynamoDb.source(request).asJava[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def putItem(request: PutItemRequest): Source[PutItemResult, NotUsed] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    scaladsl.DynamoDb.source(request).asJava[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def batchWriteItem(request: BatchWriteItemRequest): Source[BatchWriteItemResult, NotUsed] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    scaladsl.DynamoDb.source(request).asJava[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def getItem(request: GetItemRequest): Source[GetItemResult, NotUsed] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    scaladsl.DynamoDb.source(request).asJava[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def listTables(request: ListTablesRequest): Source[ListTablesResult, NotUsed] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    scaladsl.DynamoDb.source(request).asJava[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def transactGetItems(request: TransactGetItemsRequest): Source[TransactGetItemsResult, NotUsed] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    scaladsl.DynamoDb.source(request).asJava[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def transactWriteItems(request: TransactWriteItemsRequest): Source[TransactWriteItemsResult, NotUsed] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    scaladsl.DynamoDb.source(request).asJava[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def updateTimeToLive(request: UpdateTimeToLiveRequest): Source[UpdateTimeToLiveResult, NotUsed] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    scaladsl.DynamoDb.source(request).asJava[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/dynamodb/src/main/scala/akka/stream/alpakka/dynamodb/attributes.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.dynamodb[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.annotation.InternalApi[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.Attributes[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.Attributes.Attribute[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m/**[0m
[0m[[0m[0mdebug[0m] [0m[0m * Akka Stream attributes that are used when materializing DynamoDb stream blueprints.[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0mobject DynamoAttributes {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Client to use for the DynamoDb stream[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def client(client: DynamoClient): Attributes = Attributes(new Client(client))[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  final class Client @InternalApi private[DynamoAttributes] (val client: DynamoClient) extends Attribute[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/dynamodb/src/main/scala/akka/stream/alpakka/dynamodb/DynamoClient.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.dynamodb[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.actor.{ActorSystem, ExtendedActorSystem, Extension, ExtensionId, ExtensionIdProvider}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.{ActorMaterializer, Materializer}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.dynamodb.impl.DynamoClientImpl[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m/**[0m
[0m[[0m[0mdebug[0m] [0m[0m * Holds an instance of `DynamoClientImpl`. This is usually created and managed by an extension,[0m
[0m[[0m[0mdebug[0m] [0m[0m * but could be manually managed by a user as well.[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0mfinal class DynamoClient private (settings: DynamoSettings)(implicit system: ActorSystem,[0m
[0m[[0m[0mdebug[0m] [0m[0m                                                            val materializer: Materializer) {[0m
[0m[[0m[0mdebug[0m] [0m[0m  final val underlying = new DynamoClientImpl(settings, AwsOp.errorResponseHandler)[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mobject DynamoClient {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Create [[DynamoClient]] from [[DynamoSettings]].[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def apply(settings: DynamoSettings)(implicit system: ActorSystem, materializer: Materializer): DynamoClient =[0m
[0m[[0m[0mdebug[0m] [0m[0m    new DynamoClient(settings)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Java API[0m
[0m[[0m[0mdebug[0m] [0m[0m   *[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Create [[DynamoClient]] from [[DynamoSettings]].[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def create(settings: DynamoSettings, system: ActorSystem, materializer: Materializer): DynamoClient =[0m
[0m[[0m[0mdebug[0m] [0m[0m    DynamoClient(settings)(system, materializer)[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m/**[0m
[0m[[0m[0mdebug[0m] [0m[0m * Manages one [[DynamoClient]] per `ActorSystem`.[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0mfinal class DynamoClientExt private (sys: ExtendedActorSystem) extends Extension {[0m
[0m[[0m[0mdebug[0m] [0m[0m  private[this] val systemMaterializer = ActorMaterializer()(sys)[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit val dynamoClient = DynamoClient(DynamoSettings(sys))(sys, systemMaterializer)[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mobject DynamoClientExt extends ExtensionId[DynamoClientExt] with ExtensionIdProvider {[0m
[0m[[0m[0mdebug[0m] [0m[0m  override def lookup = DynamoClientExt[0m
[0m[[0m[0mdebug[0m] [0m[0m  override def createExtension(system: ExtendedActorSystem) = new DynamoClientExt(system)[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/dynamodb/src/main/scala/akka/stream/alpakka/dynamodb/AwsOp.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.dynamodb[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.dynamodb.impl.DynamoProtocol[0m
[0m[[0m[0mdebug[0m] [0m[0mimport com.amazonaws._[0m
[0m[[0m[0mdebug[0m] [0m[0mimport com.amazonaws.http.HttpResponseHandler[0m
[0m[[0m[0mdebug[0m] [0m[0mimport com.amazonaws.services.dynamodbv2.model._[0m
[0m[[0m[0mdebug[0m] [0m[0mimport com.amazonaws.transform.Marshaller[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m/**[0m
[0m[[0m[0mdebug[0m] [0m[0m * Provide conversion and marshalling for [[com.amazonaws.AmazonWebServiceRequest]].[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0mabstract class AwsOp {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /** Type of the request. */[0m
[0m[[0m[0mdebug[0m] [0m[0m  type A <: AmazonWebServiceRequest[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /** Type of the reply. */[0m
[0m[[0m[0mdebug[0m] [0m[0m  type B <: AmazonWebServiceResult[ResponseMetadata][0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /** The request instance to be sent. */[0m
[0m[[0m[0mdebug[0m] [0m[0m  val request: A[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  val handler: HttpResponseHandler[AmazonWebServiceResponse[B]][0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  val marshaller: Marshaller[Request[A], A][0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mobject AwsOp extends DynamoProtocol {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit class BatchGetItem(val request: BatchGetItemRequest) extends AwsOp {[0m
[0m[[0m[0mdebug[0m] [0m[0m    override type A = BatchGetItemRequest[0m
[0m[[0m[0mdebug[0m] [0m[0m    override type B = BatchGetItemResult[0m
[0m[[0m[0mdebug[0m] [0m[0m    override val handler = batchGetItemU[0m
[0m[[0m[0mdebug[0m] [0m[0m    override val marshaller = batchGetItemM[0m
[0m[[0m[0mdebug[0m] [0m[0m    def toOp: BatchGetItem = this[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit class CreateTable(val request: CreateTableRequest) extends AwsOp {[0m
[0m[[0m[0mdebug[0m] [0m[0m    override type A = CreateTableRequest[0m
[0m[[0m[0mdebug[0m] [0m[0m    override type B = CreateTableResult[0m
[0m[[0m[0mdebug[0m] [0m[0m    override val handler = createTableU[0m
[0m[[0m[0mdebug[0m] [0m[0m    override val marshaller = createTableM[0m
[0m[[0m[0mdebug[0m] [0m[0m    def toOp: CreateTable = this[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit class DeleteItem(val request: DeleteItemRequest) extends AwsOp {[0m
[0m[[0m[0mdebug[0m] [0m[0m    override type A = DeleteItemRequest[0m
[0m[[0m[0mdebug[0m] [0m[0m    override type B = DeleteItemResult[0m
[0m[[0m[0mdebug[0m] [0m[0m    override val handler = deleteItemU[0m
[0m[[0m[0mdebug[0m] [0m[0m    override val marshaller = deleteItemM[0m
[0m[[0m[0mdebug[0m] [0m[0m    def toOp: DeleteItem = this[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit class DeleteTable(val request: DeleteTableRequest) extends AwsOp {[0m
[0m[[0m[0mdebug[0m] [0m[0m    override type A = DeleteTableRequest[0m
[0m[[0m[0mdebug[0m] [0m[0m    override type B = DeleteTableResult[0m
[0m[[0m[0mdebug[0m] [0m[0m    override val handler = deleteTableU[0m
[0m[[0m[0mdebug[0m] [0m[0m    override val marshaller = deleteTableM[0m
[0m[[0m[0mdebug[0m] [0m[0m    def toOp: DeleteTable = this[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit class DescribeLimits(val request: DescribeLimitsRequest) extends AwsOp {[0m
[0m[[0m[0mdebug[0m] [0m[0m    override type A = DescribeLimitsRequest[0m
[0m[[0m[0mdebug[0m] [0m[0m    override type B = DescribeLimitsResult[0m
[0m[[0m[0mdebug[0m] [0m[0m    override val handler = describeLimitsU[0m
[0m[[0m[0mdebug[0m] [0m[0m    override val marshaller = describeLimitsM[0m
[0m[[0m[0mdebug[0m] [0m[0m    def toOp: DescribeLimits = this[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit class DescribeTable(val request: DescribeTableRequest) extends AwsOp {[0m
[0m[[0m[0mdebug[0m] [0m[0m    override type A = DescribeTableRequest[0m
[0m[[0m[0mdebug[0m] [0m[0m    override type B = DescribeTableResult[0m
[0m[[0m[0mdebug[0m] [0m[0m    override val handler = describeTableU[0m
[0m[[0m[0mdebug[0m] [0m[0m    override val marshaller = describeTableM[0m
[0m[[0m[0mdebug[0m] [0m[0m    def toOp: DescribeTable = this[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit class UpdateItem(val request: UpdateItemRequest) extends AwsOp {[0m
[0m[[0m[0mdebug[0m] [0m[0m    override type A = UpdateItemRequest[0m
[0m[[0m[0mdebug[0m] [0m[0m    override type B = UpdateItemResult[0m
[0m[[0m[0mdebug[0m] [0m[0m    override val handler = updateItemU[0m
[0m[[0m[0mdebug[0m] [0m[0m    override val marshaller = updateItemM[0m
[0m[[0m[0mdebug[0m] [0m[0m    def toOp: UpdateItem = this[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit class UpdateTable(val request: UpdateTableRequest) extends AwsOp {[0m
[0m[[0m[0mdebug[0m] [0m[0m    override type A = UpdateTableRequest[0m
[0m[[0m[0mdebug[0m] [0m[0m    override type B = UpdateTableResult[0m
[0m[[0m[0mdebug[0m] [0m[0m    override val handler = updateTableU[0m
[0m[[0m[0mdebug[0m] [0m[0m    override val marshaller = updateTableM[0m
[0m[[0m[0mdebug[0m] [0m[0m    def toOp: UpdateTable = this[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit class PutItem(val request: PutItemRequest) extends AwsOp {[0m
[0m[[0m[0mdebug[0m] [0m[0m    override type A = PutItemRequest[0m
[0m[[0m[0mdebug[0m] [0m[0m    override type B = PutItemResult[0m
[0m[[0m[0mdebug[0m] [0m[0m    override val handler = putItemU[0m
[0m[[0m[0mdebug[0m] [0m[0m    override val marshaller = putItemM[0m
[0m[[0m[0mdebug[0m] [0m[0m    def toOp: PutItem = this[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit class BatchWriteItem(val request: BatchWriteItemRequest) extends AwsOp {[0m
[0m[[0m[0mdebug[0m] [0m[0m    override type A = BatchWriteItemRequest[0m
[0m[[0m[0mdebug[0m] [0m[0m    override type B = BatchWriteItemResult[0m
[0m[[0m[0mdebug[0m] [0m[0m    override val handler = batchWriteItemU[0m
[0m[[0m[0mdebug[0m] [0m[0m    override val marshaller = batchWriteItemM[0m
[0m[[0m[0mdebug[0m] [0m[0m    def toOp: BatchWriteItem = this[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit class GetItem(val request: GetItemRequest) extends AwsOp {[0m
[0m[[0m[0mdebug[0m] [0m[0m    override type A = GetItemRequest[0m
[0m[[0m[0mdebug[0m] [0m[0m    override type B = GetItemResult[0m
[0m[[0m[0mdebug[0m] [0m[0m    override val handler = getItemU[0m
[0m[[0m[0mdebug[0m] [0m[0m    override val marshaller = getItemM[0m
[0m[[0m[0mdebug[0m] [0m[0m    def toOp: GetItem = this[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit class ListTables(val request: ListTablesRequest) extends AwsOp {[0m
[0m[[0m[0mdebug[0m] [0m[0m    override type A = ListTablesRequest[0m
[0m[[0m[0mdebug[0m] [0m[0m    override type B = ListTablesResult[0m
[0m[[0m[0mdebug[0m] [0m[0m    override val handler = listTablesU[0m
[0m[[0m[0mdebug[0m] [0m[0m    override val marshaller = listTablesM[0m
[0m[[0m[0mdebug[0m] [0m[0m    def toOp: ListTables = this[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit class DescribeTimeToLive(val request: DescribeTimeToLiveRequest) extends AwsOp {[0m
[0m[[0m[0mdebug[0m] [0m[0m    override type A = DescribeTimeToLiveRequest[0m
[0m[[0m[0mdebug[0m] [0m[0m    override type B = DescribeTimeToLiveResult[0m
[0m[[0m[0mdebug[0m] [0m[0m    override val handler = describeTimeToLiveU[0m
[0m[[0m[0mdebug[0m] [0m[0m    override val marshaller = describeTimeToLiveM[0m
[0m[[0m[0mdebug[0m] [0m[0m    def toOp: DescribeTimeToLive = this[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit class TransactGetItems(val request: TransactGetItemsRequest) extends AwsOp {[0m
[0m[[0m[0mdebug[0m] [0m[0m    override type A = TransactGetItemsRequest[0m
[0m[[0m[0mdebug[0m] [0m[0m    override type B = TransactGetItemsResult[0m
[0m[[0m[0mdebug[0m] [0m[0m    override val handler = transactGetItemsU[0m
[0m[[0m[0mdebug[0m] [0m[0m    override val marshaller = transactGetItemsM[0m
[0m[[0m[0mdebug[0m] [0m[0m    def toOp: TransactGetItems = this[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit class TransactWriteItems(val request: TransactWriteItemsRequest) extends AwsOp {[0m
[0m[[0m[0mdebug[0m] [0m[0m    override type A = TransactWriteItemsRequest[0m
[0m[[0m[0mdebug[0m] [0m[0m    override type B = TransactWriteItemsResult[0m
[0m[[0m[0mdebug[0m] [0m[0m    override val handler = transactWriteItemsU[0m
[0m[[0m[0mdebug[0m] [0m[0m    override val marshaller = transactWriteItemsM[0m
[0m[[0m[0mdebug[0m] [0m[0m    def toOp: TransactWriteItems = this[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit class UpdateTimeToLive(val request: UpdateTimeToLiveRequest) extends AwsOp {[0m
[0m[[0m[0mdebug[0m] [0m[0m    override type A = UpdateTimeToLiveRequest[0m
[0m[[0m[0mdebug[0m] [0m[0m    override type B = UpdateTimeToLiveResult[0m
[0m[[0m[0mdebug[0m] [0m[0m    override val handler = updateTimeToLiveU[0m
[0m[[0m[0mdebug[0m] [0m[0m    override val marshaller = updateTimeToLiveM[0m
[0m[[0m[0mdebug[0m] [0m[0m    def toOp: UpdateTimeToLive = this[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /** Java Api */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def create(r: BatchGetItemRequest): AwsOp = r[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /** Java Api */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def create(r: CreateTableRequest): CreateTable = r[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /** Java Api */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def create(r: DeleteItemRequest): DeleteItem = r[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /** Java Api */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def create(r: DeleteTableRequest): DeleteTable = r[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /** Java Api */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def create(r: DescribeLimitsRequest): DescribeLimits = r[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /** Java Api */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def create(r: DescribeTableRequest): DescribeTable = r[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /** Java Api */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def create(r: UpdateItemRequest): UpdateItem = r[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /** Java Api */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def create(r: UpdateTableRequest): UpdateTable = r[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /** Java Api */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def create(r: PutItemRequest): PutItem = r[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /** Java Api */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def create(r: BatchWriteItemRequest): BatchWriteItem = r[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /** Java Api */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def create(r: GetItemRequest): GetItem = r[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /** Java Api */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def create(r: ListTablesRequest): ListTables = r[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /** Java Api */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def create(r: DescribeTimeToLiveRequest): DescribeTimeToLive = r[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /** Java Api */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def create(r: TransactGetItemsRequest): TransactGetItems = r[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /** Java Api */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def create(r: TransactWriteItemsRequest): TransactWriteItems = r[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /** Java Api */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def create(r: UpdateTimeToLiveRequest): UpdateTimeToLive = r[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mabstract class AwsPagedOp extends AwsOp {[0m
[0m[[0m[0mdebug[0m] [0m[0m  def next(a: A, b: B): Option[AwsPagedOp][0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mobject AwsPagedOp extends DynamoProtocol {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit class Query(val request: QueryRequest) extends AwsPagedOp {[0m
[0m[[0m[0mdebug[0m] [0m[0m    override type A = QueryRequest[0m
[0m[[0m[0mdebug[0m] [0m[0m    override type B = QueryResult[0m
[0m[[0m[0mdebug[0m] [0m[0m    override val handler = queryU[0m
[0m[[0m[0mdebug[0m] [0m[0m    override val marshaller = queryM[0m
[0m[[0m[0mdebug[0m] [0m[0m    override def next(a: A, b: B) =[0m
[0m[[0m[0mdebug[0m] [0m[0m      if (b.getLastEvaluatedKey == null || b.getLastEvaluatedKey.isEmpty) None[0m
[0m[[0m[0mdebug[0m] [0m[0m      else Some(Query(a.clone().withExclusiveStartKey(b.getLastEvaluatedKey)))[0m
[0m[[0m[0mdebug[0m] [0m[0m    def toOp: Query = this[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit class Scan(val request: ScanRequest) extends AwsPagedOp {[0m
[0m[[0m[0mdebug[0m] [0m[0m    override type A = ScanRequest[0m
[0m[[0m[0mdebug[0m] [0m[0m    override type B = ScanResult[0m
[0m[[0m[0mdebug[0m] [0m[0m    override val handler = scanU[0m
[0m[[0m[0mdebug[0m] [0m[0m    override val marshaller = scanM[0m
[0m[[0m[0mdebug[0m] [0m[0m    override def next(a: A, b: B) =[0m
[0m[[0m[0mdebug[0m] [0m[0m      if (b.getLastEvaluatedKey == null || b.getLastEvaluatedKey.isEmpty) None[0m
[0m[[0m[0mdebug[0m] [0m[0m      else Some(Scan(a.clone().withExclusiveStartKey(b.getLastEvaluatedKey)))[0m
[0m[[0m[0mdebug[0m] [0m[0m    def toOp: Scan = this[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /** Java Api */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def create(r: QueryRequest): Query = r[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /** Java Api */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def create(r: ScanRequest): Scan = r[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/dynamodb/src/main/scala/akka/stream/alpakka/dynamodb/scaladsl/DynamoDb.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.dynamodb.scaladsl[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.NotUsed[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.{ActorMaterializer, Attributes, Materializer}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.dynamodb.impl.{Paginator, Setup}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.dynamodb.{AwsOp, AwsPagedOp, DynamoAttributes, DynamoClientExt}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.scaladsl.{Flow, Sink, Source}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.concurrent.Future[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m/**[0m
[0m[[0m[0mdebug[0m] [0m[0m * Factory of DynamoDb Akka Stream operators.[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0mobject DynamoDb {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Create a Flow that emits a response for every request to DynamoDB.[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def flow[Op <: AwsOp]: Flow[Op, Op#B, NotUsed] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    Setup[0m
[0m[[0m[0mdebug[0m] [0m[0m      .flow(clientFlow[Op])[0m
[0m[[0m[0mdebug[0m] [0m[0m      .mapMaterializedValue(_ => NotUsed)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Create a Source that will emit potentially multiple responses for a given request.[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def source(op: AwsPagedOp): Source[op.B, NotUsed] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    Setup[0m
[0m[[0m[0mdebug[0m] [0m[0m      .source { mat => attr =>[0m
[0m[[0m[0mdebug[0m] [0m[0m        Paginator.source(clientFlow(mat)(attr), op)[0m
[0m[[0m[0mdebug[0m] [0m[0m      }[0m
[0m[[0m[0mdebug[0m] [0m[0m      .mapMaterializedValue(_ => NotUsed)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Create a Source that will emit a response for a given request.[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def source(op: AwsOp): Source[op.B, NotUsed] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    Source.single(op).via(flow).map(_.asInstanceOf[op.B])[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Create a Future that will be completed with a response to a given request.[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def single(op: AwsOp)(implicit mat: Materializer): Future[op.B] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    source(op).runWith(Sink.head)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private def clientFlow[Op <: AwsOp](mat: ActorMaterializer)(attr: Attributes) =[0m
[0m[[0m[0mdebug[0m] [0m[0m    attr[0m
[0m[[0m[0mdebug[0m] [0m[0m      .get[DynamoAttributes.Client][0m
[0m[[0m[0mdebug[0m] [0m[0m      .map(_.client)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .getOrElse(DynamoClientExt(mat.system).dynamoClient)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .underlying[0m
[0m[[0m[0mdebug[0m] [0m[0m      .flow[Op][0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/dynamodb/src/main/scala/akka/stream/alpakka/dynamodb/AwsClientSettings.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.dynamodb[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport com.amazonaws.auth.AWSCredentialsProvider[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mabstract class AwsClientSettings {[0m
[0m[[0m[0mdebug[0m] [0m[0m  val region: String[0m
[0m[[0m[0mdebug[0m] [0m[0m  val host: String[0m
[0m[[0m[0mdebug[0m] [0m[0m  val port: Int[0m
[0m[[0m[0mdebug[0m] [0m[0m  val parallelism: Int[0m
[0m[[0m[0mdebug[0m] [0m[0m  val credentialsProvider: AWSCredentialsProvider[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/dynamodb/src/main/scala/akka/stream/alpakka/dynamodb/DynamoSettings.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.dynamodb[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.actor.ActorSystem[0m
[0m[[0m[0mdebug[0m] [0m[0mimport com.amazonaws.auth._[0m
[0m[[0m[0mdebug[0m] [0m[0mimport com.typesafe.config.Config[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.util.Optional[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.compat.java8.OptionConverters._[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mfinal class DynamoSettings private ([0m
[0m[[0m[0mdebug[0m] [0m[0m    val region: String,[0m
[0m[[0m[0mdebug[0m] [0m[0m    val host: String,[0m
[0m[[0m[0mdebug[0m] [0m[0m    val port: Int,[0m
[0m[[0m[0mdebug[0m] [0m[0m    val tls: Boolean,[0m
[0m[[0m[0mdebug[0m] [0m[0m    val parallelism: Int,[0m
[0m[[0m[0mdebug[0m] [0m[0m    val maxOpenRequests: Option[Int],[0m
[0m[[0m[0mdebug[0m] [0m[0m    val credentialsProvider: com.amazonaws.auth.AWSCredentialsProvider[0m
[0m[[0m[0mdebug[0m] [0m[0m) extends AwsClientSettings {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  require(host.nonEmpty, "A host name must be provided.")[0m
[0m[[0m[0mdebug[0m] [0m[0m  require(port > -1, "A port number must be provided.")[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def withRegion(value: String): DynamoSettings = copy(region = value)[0m
[0m[[0m[0mdebug[0m] [0m[0m  def withHost(value: String): DynamoSettings = copy(host = value)[0m
[0m[[0m[0mdebug[0m] [0m[0m  def withPort(value: Int): DynamoSettings = copy(port = value)[0m
[0m[[0m[0mdebug[0m] [0m[0m  def withPortOverTls(value: Int): DynamoSettings = copy(port = value, tls = true)[0m
[0m[[0m[0mdebug[0m] [0m[0m  def withTls(value: Boolean): DynamoSettings =[0m
[0m[[0m[0mdebug[0m] [0m[0m    if (value == tls) this else copy(tls = value)[0m
[0m[[0m[0mdebug[0m] [0m[0m  def withParallelism(value: Int): DynamoSettings = copy(parallelism = value)[0m
[0m[[0m[0mdebug[0m] [0m[0m  def withMaxOpenRequests(value: Option[Int]): DynamoSettings = copy(maxOpenRequests = value)[0m
[0m[[0m[0mdebug[0m] [0m[0m  def withCredentialsProvider(value: com.amazonaws.auth.AWSCredentialsProvider): DynamoSettings =[0m
[0m[[0m[0mdebug[0m] [0m[0m    copy(credentialsProvider = value)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /** Java Api */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def withMaxOpenRequests(value: Optional[Int]): DynamoSettings = copy(maxOpenRequests = value.asScala)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /** Java Api */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def getMaxOpenRequests(): Optional[Int] = maxOpenRequests.asJava[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private def copy([0m
[0m[[0m[0mdebug[0m] [0m[0m      region: String = region,[0m
[0m[[0m[0mdebug[0m] [0m[0m      host: String = host,[0m
[0m[[0m[0mdebug[0m] [0m[0m      port: Int = port,[0m
[0m[[0m[0mdebug[0m] [0m[0m      tls: Boolean = tls,[0m
[0m[[0m[0mdebug[0m] [0m[0m      parallelism: Int = parallelism,[0m
[0m[[0m[0mdebug[0m] [0m[0m      maxOpenRequests: Option[Int] = maxOpenRequests,[0m
[0m[[0m[0mdebug[0m] [0m[0m      credentialsProvider: com.amazonaws.auth.AWSCredentialsProvider = credentialsProvider[0m
[0m[[0m[0mdebug[0m] [0m[0m  ): DynamoSettings = new DynamoSettings([0m
[0m[[0m[0mdebug[0m] [0m[0m    region = region,[0m
[0m[[0m[0mdebug[0m] [0m[0m    host = host,[0m
[0m[[0m[0mdebug[0m] [0m[0m    port = port,[0m
[0m[[0m[0mdebug[0m] [0m[0m    tls = tls,[0m
[0m[[0m[0mdebug[0m] [0m[0m    parallelism = parallelism,[0m
[0m[[0m[0mdebug[0m] [0m[0m    maxOpenRequests = maxOpenRequests,[0m
[0m[[0m[0mdebug[0m] [0m[0m    credentialsProvider = credentialsProvider[0m
[0m[[0m[0mdebug[0m] [0m[0m  )[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  override def toString =[0m
[0m[[0m[0mdebug[0m] [0m[0m    s"""DynamoSettings(region=$region,host=$host,port=$port,parallelism=$parallelism,maxOpenRequests=$maxOpenRequests,credentialsProvider=$credentialsProvider)"""[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mobject DynamoSettings {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  val ConfigPath = "akka.stream.alpakka.dynamodb"[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Scala API: Creates [[DynamoSettings]] from the [[com.typesafe.config.Config Config]] attached to an [[akka.actor.ActorSystem]].[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def apply(system: ActorSystem): DynamoSettings =[0m
[0m[[0m[0mdebug[0m] [0m[0m    apply(system.settings.config.getConfig(ConfigPath))[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Scala API: Creates [[DynamoSettings]] from a [[com.typesafe.config.Config Config]]. This config is expected to have[0m
[0m[[0m[0mdebug[0m] [0m[0m   * been resolved, i.e. already read from `akka.stream.alpakka.dynamodb`[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def apply(c: Config): DynamoSettings = {[0m
[0m[[0m[0mdebug[0m] [0m[0m    val region = c.getString("region")[0m
[0m[[0m[0mdebug[0m] [0m[0m    val host = c.getString("host")[0m
[0m[[0m[0mdebug[0m] [0m[0m    val port = c.getInt("port")[0m
[0m[[0m[0mdebug[0m] [0m[0m    val tls = c.getBoolean("tls")[0m
[0m[[0m[0mdebug[0m] [0m[0m    val parallelism = c.getInt("parallelism")[0m
[0m[[0m[0mdebug[0m] [0m[0m    val maxOpenRequests = if (c.hasPath("max-open-requests")) {[0m
[0m[[0m[0mdebug[0m] [0m[0m      Option(c.getInt("max-open-requests"))[0m
[0m[[0m[0mdebug[0m] [0m[0m    } else None[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    val awsCredentialsProvider = {[0m
[0m[[0m[0mdebug[0m] [0m[0m      if (c.hasPath("credentials.access-key-id") &&[0m
[0m[[0m[0mdebug[0m] [0m[0m          c.hasPath("credentials.secret-key-id")) {[0m
[0m[[0m[0mdebug[0m] [0m[0m        val accessKey = c.getString("credentials.access-key-id")[0m
[0m[[0m[0mdebug[0m] [0m[0m        val secretKey = c.getString("credentials.secret-key-id")[0m
[0m[[0m[0mdebug[0m] [0m[0m        new AWSStaticCredentialsProvider(new BasicAWSCredentials(accessKey, secretKey))[0m
[0m[[0m[0mdebug[0m] [0m[0m      } else new DefaultAWSCredentialsProviderChain()[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m    new DynamoSettings([0m
[0m[[0m[0mdebug[0m] [0m[0m      region,[0m
[0m[[0m[0mdebug[0m] [0m[0m      host,[0m
[0m[[0m[0mdebug[0m] [0m[0m      port,[0m
[0m[[0m[0mdebug[0m] [0m[0m      tls,[0m
[0m[[0m[0mdebug[0m] [0m[0m      parallelism,[0m
[0m[[0m[0mdebug[0m] [0m[0m      maxOpenRequests,[0m
[0m[[0m[0mdebug[0m] [0m[0m      awsCredentialsProvider[0m
[0m[[0m[0mdebug[0m] [0m[0m    )[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Java API: Creates [[DynamoSettings]] from the [[com.typesafe.config.Config Config]] attached to an [[akka.actor.ActorSystem]].[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def create(system: ActorSystem): DynamoSettings = apply(system)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Java API: Creates [[DynamoSettings]] from a [[com.typesafe.config.Config Config]]. This config is expected to have[0m
[0m[[0m[0mdebug[0m] [0m[0m   * been resolved, i.e. already read from `akka.stream.alpakka.dynamodb`[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def create(resolvedConfig: Config): DynamoSettings = apply(resolvedConfig)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /** Scala API */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def apply([0m
[0m[[0m[0mdebug[0m] [0m[0m      region: String,[0m
[0m[[0m[0mdebug[0m] [0m[0m      host: String[0m
[0m[[0m[0mdebug[0m] [0m[0m  ): DynamoSettings = new DynamoSettings([0m
[0m[[0m[0mdebug[0m] [0m[0m    region,[0m
[0m[[0m[0mdebug[0m] [0m[0m    host,[0m
[0m[[0m[0mdebug[0m] [0m[0m    port = 443,[0m
[0m[[0m[0mdebug[0m] [0m[0m    tls = true,[0m
[0m[[0m[0mdebug[0m] [0m[0m    parallelism = 4,[0m
[0m[[0m[0mdebug[0m] [0m[0m    maxOpenRequests = None,[0m
[0m[[0m[0mdebug[0m] [0m[0m    new DefaultAWSCredentialsProviderChain()[0m
[0m[[0m[0mdebug[0m] [0m[0m  )[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /** Java API */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def create([0m
[0m[[0m[0mdebug[0m] [0m[0m      region: String,[0m
[0m[[0m[0mdebug[0m] [0m[0m      host: String[0m
[0m[[0m[0mdebug[0m] [0m[0m  ): DynamoSettings = apply(region, host)[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/dynamodb/src/main/scala/akka/stream/alpakka/dynamodb/impl/AwsClient.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.dynamodb.impl[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.io.{ByteArrayInputStream, InputStream}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.util.concurrent.atomic.AtomicInteger[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.NotUsed[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.actor.ActorSystem[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.annotation.InternalApi[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.http.scaladsl.Http.HostConnectionPool[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.http.scaladsl.model.{ContentType, HttpEntity, _}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.dynamodb.impl.AwsClient.{AwsConnect, AwsRequestMetadata}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.dynamodb.{AwsClientSettings, AwsOp}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.scaladsl.Flow[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.{ActorAttributes, Materializer, Supervision}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport com.amazonaws.auth.AWS4Signer[0m
[0m[[0m[0mdebug[0m] [0m[0mimport com.amazonaws.http.{HttpMethodName, HttpResponseHandler, HttpResponse => AWSHttpResponse}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport com.amazonaws.{DefaultRequest, HttpMethod => _, _}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.concurrent.{ExecutionContext, Future}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.language.implicitConversions[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.util.{Failure, Success, Try}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m/**[0m
[0m[[0m[0mdebug[0m] [0m[0m * INTERNAL API[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m@InternalApi[0m
[0m[[0m[0mdebug[0m] [0m[0mprivate[dynamodb] object AwsClient {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  case class AwsRequestMetadata(id: Long, op: AwsOp)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  type AwsConnect =[0m
[0m[[0m[0mdebug[0m] [0m[0m    Flow[(HttpRequest, AwsRequestMetadata), (Try[HttpResponse], AwsRequestMetadata), HostConnectionPool][0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m/**[0m
[0m[[0m[0mdebug[0m] [0m[0m * INTERNAL API[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m@InternalApi[0m
[0m[[0m[0mdebug[0m] [0m[0mprivate[dynamodb] trait AwsClient[S <: AwsClientSettings] {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  protected implicit def system: ActorSystem[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  protected implicit def materializer: Materializer[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  protected implicit def ec: ExecutionContext[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  protected val settings: S[0m
[0m[[0m[0mdebug[0m] [0m[0m  protected val connection: AwsConnect[0m
[0m[[0m[0mdebug[0m] [0m[0m  protected val service: String[0m
[0m[[0m[0mdebug[0m] [0m[0m  protected val defaultContentType: ContentType[0m
[0m[[0m[0mdebug[0m] [0m[0m  protected val errorResponseHandler: HttpResponseHandler[AmazonServiceException][0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  protected def url: String = s"https://${settings.host}/"[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private val requestId = new AtomicInteger()[0m
[0m[[0m[0mdebug[0m] [0m[0m  private val credentials = settings.credentialsProvider[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private lazy val signer = {[0m
[0m[[0m[0mdebug[0m] [0m[0m    val s = new AWS4Signer()[0m
[0m[[0m[0mdebug[0m] [0m[0m    s.setServiceName(service)[0m
[0m[[0m[0mdebug[0m] [0m[0m    s.setRegionName(settings.region)[0m
[0m[[0m[0mdebug[0m] [0m[0m    s[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private implicit def method(method: HttpMethodName): HttpMethod = method match {[0m
[0m[[0m[0mdebug[0m] [0m[0m    case HttpMethodName.POST => HttpMethods.POST[0m
[0m[[0m[0mdebug[0m] [0m[0m    case HttpMethodName.GET => HttpMethods.GET[0m
[0m[[0m[0mdebug[0m] [0m[0m    case HttpMethodName.PUT => HttpMethods.PUT[0m
[0m[[0m[0mdebug[0m] [0m[0m    case HttpMethodName.DELETE => HttpMethods.DELETE[0m
[0m[[0m[0mdebug[0m] [0m[0m    case HttpMethodName.HEAD => HttpMethods.HEAD[0m
[0m[[0m[0mdebug[0m] [0m[0m    case HttpMethodName.OPTIONS => HttpMethods.OPTIONS[0m
[0m[[0m[0mdebug[0m] [0m[0m    case HttpMethodName.PATCH => HttpMethods.PATCH[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private val signableUrl = Uri(url)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private val uri = new java.net.URI(url)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private val decider: Supervision.Decider = _ => Supervision.Stop[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def flow[Op <: AwsOp]: Flow[Op, Op#B, NotUsed] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    Flow[Op][0m
[0m[[0m[0mdebug[0m] [0m[0m      .map(op => toAwsRequest(op))[0m
[0m[[0m[0mdebug[0m] [0m[0m      .via(connection)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .mapAsync(settings.parallelism) {[0m
[0m[[0m[0mdebug[0m] [0m[0m        case (Success(response), i) => toAwsResult(response, i)[0m
[0m[[0m[0mdebug[0m] [0m[0m        case (Failure(ex), _) => Future.failed(ex)[0m
[0m[[0m[0mdebug[0m] [0m[0m      }[0m
[0m[[0m[0mdebug[0m] [0m[0m      .withAttributes(ActorAttributes.supervisionStrategy(decider))[0m
[0m[[0m[0mdebug[0m] [0m[0m      .map(_.asInstanceOf[Op#B])[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private def toAwsRequest(s: AwsOp): (HttpRequest, AwsRequestMetadata) = {[0m
[0m[[0m[0mdebug[0m] [0m[0m    val original = s.marshaller.marshall(s.request)[0m
[0m[[0m[0mdebug[0m] [0m[0m    original.setEndpoint(uri)[0m
[0m[[0m[0mdebug[0m] [0m[0m    original.getHeaders.remove("Content-Type")[0m
[0m[[0m[0mdebug[0m] [0m[0m    original.getHeaders.remove("Content-Length")[0m
[0m[[0m[0mdebug[0m] [0m[0m    signer.sign(original, credentials.getCredentials)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    val amzHeaders = original.getHeaders[0m
[0m[[0m[0mdebug[0m] [0m[0m    val body = read(original.getContent)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    val tokenHeader: List[headers.RawHeader] = {[0m
[0m[[0m[0mdebug[0m] [0m[0m      credentials.getCredentials match {[0m
[0m[[0m[0mdebug[0m] [0m[0m        case _: auth.AWSSessionCredentials =>[0m
[0m[[0m[0mdebug[0m] [0m[0m          Some(headers.RawHeader("x-amz-security-token", amzHeaders.get("X-Amz-Security-Token")))[0m
[0m[[0m[0mdebug[0m] [0m[0m        case _ =>[0m
[0m[[0m[0mdebug[0m] [0m[0m          None[0m
[0m[[0m[0mdebug[0m] [0m[0m      }[0m
[0m[[0m[0mdebug[0m] [0m[0m    }.toList[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    val httpr = HttpRequest([0m
[0m[[0m[0mdebug[0m] [0m[0m      uri = signableUrl,[0m
[0m[[0m[0mdebug[0m] [0m[0m      method = original.getHttpMethod,[0m
[0m[[0m[0mdebug[0m] [0m[0m      headers = List([0m
[0m[[0m[0mdebug[0m] [0m[0m        headers.RawHeader("x-amz-date", amzHeaders.get("X-Amz-Date")),[0m
[0m[[0m[0mdebug[0m] [0m[0m        headers.RawHeader("authorization", amzHeaders.get("Authorization")),[0m
[0m[[0m[0mdebug[0m] [0m[0m        headers.RawHeader("x-amz-target", amzHeaders.get("X-Amz-Target"))[0m
[0m[[0m[0mdebug[0m] [0m[0m      ) ++ tokenHeader,[0m
[0m[[0m[0mdebug[0m] [0m[0m      entity = HttpEntity(defaultContentType, body)[0m
[0m[[0m[0mdebug[0m] [0m[0m    )[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    httpr -> AwsRequestMetadata(requestId.getAndIncrement(), s)[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private def toAwsResult([0m
[0m[[0m[0mdebug[0m] [0m[0m      response: HttpResponse,[0m
[0m[[0m[0mdebug[0m] [0m[0m      metadata: AwsRequestMetadata[0m
[0m[[0m[0mdebug[0m] [0m[0m  ): Future[AmazonWebServiceResult[ResponseMetadata]] = {[0m
[0m[[0m[0mdebug[0m] [0m[0m    val req = new DefaultRequest(this.service)[0m
[0m[[0m[0mdebug[0m] [0m[0m    val awsResp = new AWSHttpResponse(req, null) //[0m
[0m[[0m[0mdebug[0m] [0m[0m    response.entity.dataBytes.runFold(Array.emptyByteArray)(_ ++ _).flatMap { bytes =>[0m
[0m[[0m[0mdebug[0m] [0m[0m      awsResp.setContent(new ByteArrayInputStream(bytes))[0m
[0m[[0m[0mdebug[0m] [0m[0m      awsResp.setStatusCode(response.status.intValue)[0m
[0m[[0m[0mdebug[0m] [0m[0m      awsResp.setStatusText(response.status.defaultMessage)[0m
[0m[[0m[0mdebug[0m] [0m[0m      if (200 <= awsResp.getStatusCode && awsResp.getStatusCode < 300) {[0m
[0m[[0m[0mdebug[0m] [0m[0m        val handle = metadata.op.handler.handle(awsResp)[0m
[0m[[0m[0mdebug[0m] [0m[0m        val resp = handle.getResult[0m
[0m[[0m[0mdebug[0m] [0m[0m        Future.successful(resp)[0m
[0m[[0m[0mdebug[0m] [0m[0m      } else {[0m
[0m[[0m[0mdebug[0m] [0m[0m        response.headers.foreach { h =>[0m
[0m[[0m[0mdebug[0m] [0m[0m          awsResp.addHeader(h.name, h.value)[0m
[0m[[0m[0mdebug[0m] [0m[0m        }[0m
[0m[[0m[0mdebug[0m] [0m[0m        Future.failed(errorResponseHandler.handle(awsResp))[0m
[0m[[0m[0mdebug[0m] [0m[0m      }[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private def read(in: InputStream) = Stream.continually(in.read).takeWhile(-1 != _).map(_.toByte).toArray[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/dynamodb/src/main/scala/akka/stream/alpakka/dynamodb/impl/SetupStage.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.dynamodb.impl[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.annotation.InternalApi[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream._[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.scaladsl.{Flow, Keep, Sink, Source}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.stage._[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.concurrent.{Future, Promise}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mprivate final class SetupSinkStage[T, M](factory: ActorMaterializer => Attributes => Sink[T, M])[0m
[0m[[0m[0mdebug[0m] [0m[0m    extends GraphStageWithMaterializedValue[SinkShape[T], Future[M]] {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private val in = Inlet[T]("SetupSinkStage.in")[0m
[0m[[0m[0mdebug[0m] [0m[0m  override val shape = SinkShape(in)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  override def createLogicAndMaterializedValue(inheritedAttributes: Attributes): (GraphStageLogic, Future[M]) = {[0m
[0m[[0m[0mdebug[0m] [0m[0m    val matPromise = Promise[M][0m
[0m[[0m[0mdebug[0m] [0m[0m    (createStageLogic(matPromise), matPromise.future)[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private def createStageLogic(matPromise: Promise[M]) = new GraphStageLogic(shape) {[0m
[0m[[0m[0mdebug[0m] [0m[0m    import SetupStage._[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    val subOutlet = new SubSourceOutlet[T]("SetupSinkStage")[0m
[0m[[0m[0mdebug[0m] [0m[0m    subOutlet.setHandler(delegateToInlet(() => pull(in), () => cancel(in)))[0m
[0m[[0m[0mdebug[0m] [0m[0m    setHandler(in, delegateToSubOutlet(() => grab(in), subOutlet))[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    override def preStart(): Unit = {[0m
[0m[[0m[0mdebug[0m] [0m[0m      val sink = factory(actorMaterializer(materializer))(attributes)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m      val mat = Source.fromGraph(subOutlet.source).runWith(sink)(subFusingMaterializer)[0m
[0m[[0m[0mdebug[0m] [0m[0m      matPromise.success(mat)[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mprivate final class SetupFlowStage[T, U, M](factory: ActorMaterializer => Attributes => Flow[T, U, M])[0m
[0m[[0m[0mdebug[0m] [0m[0m    extends GraphStageWithMaterializedValue[FlowShape[T, U], Future[M]] {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private val in = Inlet[T]("SetupFlowStage.in")[0m
[0m[[0m[0mdebug[0m] [0m[0m  private val out = Outlet[U]("SetupFlowStage.out")[0m
[0m[[0m[0mdebug[0m] [0m[0m  override val shape = FlowShape(in, out)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  override def createLogicAndMaterializedValue(inheritedAttributes: Attributes): (GraphStageLogic, Future[M]) = {[0m
[0m[[0m[0mdebug[0m] [0m[0m    val matPromise = Promise[M][0m
[0m[[0m[0mdebug[0m] [0m[0m    (createStageLogic(matPromise), matPromise.future)[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private def createStageLogic(matPromise: Promise[M]) = new GraphStageLogic(shape) {[0m
[0m[[0m[0mdebug[0m] [0m[0m    import SetupStage._[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    val subInlet = new SubSinkInlet[U]("SetupFlowStage")[0m
[0m[[0m[0mdebug[0m] [0m[0m    val subOutlet = new SubSourceOutlet[T]("SetupFlowStage")[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    subInlet.setHandler(delegateToOutlet(push(out, _: U), () => complete(out), fail(out, _), subInlet))[0m
[0m[[0m[0mdebug[0m] [0m[0m    subOutlet.setHandler(delegateToInlet(() => pull(in), () => cancel(in)))[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    setHandler(in, delegateToSubOutlet(() => grab(in), subOutlet))[0m
[0m[[0m[0mdebug[0m] [0m[0m    setHandler(out, delegateToSubInlet(subInlet))[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    override def preStart(): Unit = {[0m
[0m[[0m[0mdebug[0m] [0m[0m      val flow = factory(actorMaterializer(materializer))(attributes)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m      val mat = Source[0m
[0m[[0m[0mdebug[0m] [0m[0m        .fromGraph(subOutlet.source)[0m
[0m[[0m[0mdebug[0m] [0m[0m        .viaMat(flow)(Keep.right)[0m
[0m[[0m[0mdebug[0m] [0m[0m        .to(Sink.fromGraph(subInlet.sink))[0m
[0m[[0m[0mdebug[0m] [0m[0m        .run()(subFusingMaterializer)[0m
[0m[[0m[0mdebug[0m] [0m[0m      matPromise.success(mat)[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mprivate final class SetupSourceStage[T, M](factory: ActorMaterializer => Attributes => Source[T, M])[0m
[0m[[0m[0mdebug[0m] [0m[0m    extends GraphStageWithMaterializedValue[SourceShape[T], Future[M]] {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private val out = Outlet[T]("SetupSourceStage.out")[0m
[0m[[0m[0mdebug[0m] [0m[0m  override val shape = SourceShape(out)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  override def createLogicAndMaterializedValue(inheritedAttributes: Attributes): (GraphStageLogic, Future[M]) = {[0m
[0m[[0m[0mdebug[0m] [0m[0m    val matPromise = Promise[M][0m
[0m[[0m[0mdebug[0m] [0m[0m    (createStageLogic(matPromise), matPromise.future)[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private def createStageLogic(matPromise: Promise[M]) = new GraphStageLogic(shape) {[0m
[0m[[0m[0mdebug[0m] [0m[0m    import SetupStage._[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    val subInlet = new SubSinkInlet[T]("SetupSourceStage")[0m
[0m[[0m[0mdebug[0m] [0m[0m    subInlet.setHandler(delegateToOutlet(push(out, _: T), () => complete(out), fail(out, _), subInlet))[0m
[0m[[0m[0mdebug[0m] [0m[0m    setHandler(out, delegateToSubInlet(subInlet))[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    override def preStart(): Unit = {[0m
[0m[[0m[0mdebug[0m] [0m[0m      val source = factory(actorMaterializer(materializer))(attributes)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m      val mat = source[0m
[0m[[0m[0mdebug[0m] [0m[0m        .to(Sink.fromGraph(subInlet.sink))[0m
[0m[[0m[0mdebug[0m] [0m[0m        .run()(subFusingMaterializer)[0m
[0m[[0m[0mdebug[0m] [0m[0m      matPromise.success(mat)[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mprivate object SetupStage {[0m
[0m[[0m[0mdebug[0m] [0m[0m  def delegateToSubOutlet[T](grab: () => T, subOutlet: GraphStageLogic#SubSourceOutlet[T]) = new InHandler {[0m
[0m[[0m[0mdebug[0m] [0m[0m    override def onPush(): Unit =[0m
[0m[[0m[0mdebug[0m] [0m[0m      subOutlet.push(grab())[0m
[0m[[0m[0mdebug[0m] [0m[0m    override def onUpstreamFinish(): Unit =[0m
[0m[[0m[0mdebug[0m] [0m[0m      subOutlet.complete()[0m
[0m[[0m[0mdebug[0m] [0m[0m    override def onUpstreamFailure(ex: Throwable): Unit =[0m
[0m[[0m[0mdebug[0m] [0m[0m      subOutlet.fail(ex)[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def delegateToOutlet[T](push: T => Unit,[0m
[0m[[0m[0mdebug[0m] [0m[0m                          complete: () => Unit,[0m
[0m[[0m[0mdebug[0m] [0m[0m                          fail: Throwable => Unit,[0m
[0m[[0m[0mdebug[0m] [0m[0m                          subInlet: GraphStageLogic#SubSinkInlet[T]) = new InHandler {[0m
[0m[[0m[0mdebug[0m] [0m[0m    override def onPush(): Unit =[0m
[0m[[0m[0mdebug[0m] [0m[0m      push(subInlet.grab())[0m
[0m[[0m[0mdebug[0m] [0m[0m    override def onUpstreamFinish(): Unit =[0m
[0m[[0m[0mdebug[0m] [0m[0m      complete()[0m
[0m[[0m[0mdebug[0m] [0m[0m    override def onUpstreamFailure(ex: Throwable): Unit =[0m
[0m[[0m[0mdebug[0m] [0m[0m      fail(ex)[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def delegateToSubInlet[T](subInlet: GraphStageLogic#SubSinkInlet[T]) = new OutHandler {[0m
[0m[[0m[0mdebug[0m] [0m[0m    override def onPull(): Unit =[0m
[0m[[0m[0mdebug[0m] [0m[0m      subInlet.pull()[0m
[0m[[0m[0mdebug[0m] [0m[0m    override def onDownstreamFinish(): Unit =[0m
[0m[[0m[0mdebug[0m] [0m[0m      subInlet.cancel()[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def delegateToInlet(pull: () => Unit, cancel: () => Unit) = new OutHandler {[0m
[0m[[0m[0mdebug[0m] [0m[0m    override def onPull(): Unit =[0m
[0m[[0m[0mdebug[0m] [0m[0m      pull()[0m
[0m[[0m[0mdebug[0m] [0m[0m    override def onDownstreamFinish(): Unit =[0m
[0m[[0m[0mdebug[0m] [0m[0m      cancel()[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def actorMaterializer(mat: Materializer): ActorMaterializer = mat match {[0m
[0m[[0m[0mdebug[0m] [0m[0m    case am: ActorMaterializer => am[0m
[0m[[0m[0mdebug[0m] [0m[0m    case _ => throw new Error("ActorMaterializer required")[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m@InternalApi private[dynamodb] object Setup {[0m
[0m[[0m[0mdebug[0m] [0m[0m  def sink[T, M](factory: ActorMaterializer => Attributes => Sink[T, M]): Sink[T, Future[M]] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    Sink.fromGraph(new SetupSinkStage(factory))[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def flow[T, U, M](factory: ActorMaterializer => Attributes => Flow[T, U, M]): Flow[T, U, Future[M]] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    Flow.fromGraph(new SetupFlowStage(factory))[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def source[T, M](factory: ActorMaterializer => Attributes => Source[T, M]): Source[T, Future[M]] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    Source.fromGraph(new SetupSourceStage(factory))[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/dynamodb/src/main/scala/akka/stream/alpakka/dynamodb/impl/Paginator.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.dynamodb.impl[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.NotUsed[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.annotation.InternalApi[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.SourceShape[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.dynamodb.{AwsOp, AwsPagedOp}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.scaladsl.{Broadcast, Flow, GraphDSL, Merge, Source}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport com.amazonaws.{AmazonWebServiceResult, ResponseMetadata}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m/**[0m
[0m[[0m[0mdebug[0m] [0m[0m * INTERNAL API[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m@InternalApi[0m
[0m[[0m[0mdebug[0m] [0m[0mprivate[dynamodb] object Paginator {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def source(flow: Flow[AwsOp, AmazonWebServiceResult[ResponseMetadata], NotUsed],[0m
[0m[[0m[0mdebug[0m] [0m[0m             op: AwsPagedOp): Source[op.B, NotUsed] = {[0m
[0m[[0m[0mdebug[0m] [0m[0m    val next = Flow[0m
[0m[[0m[0mdebug[0m] [0m[0m      .fromFunction[op.B, Option[AwsPagedOp]](op.next(op.request, _))[0m
[0m[[0m[0mdebug[0m] [0m[0m      .takeWhile(_.isDefined)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .map(_.get)[0m
[0m[[0m[0mdebug[0m] [0m[0m    val cast = Flow[0m
[0m[[0m[0mdebug[0m] [0m[0m      .fromFunction[AmazonWebServiceResult[ResponseMetadata], op.B](_.asInstanceOf[op.B])[0m
[0m[[0m[0mdebug[0m] [0m[0m    Source.fromGraph(GraphDSL.create() { implicit b =>[0m
[0m[[0m[0mdebug[0m] [0m[0m      import GraphDSL.Implicits._[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m      val merge = b.add(Merge[AwsPagedOp](2))[0m
[0m[[0m[0mdebug[0m] [0m[0m      val bcast = b.add(Broadcast[op.B](2))[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m      Source.single(op) ~> merge ~> flow ~> cast ~> bcast[0m
[0m[[0m[0mdebug[0m] [0m[0m      bcast.out(0) ~> next ~> merge[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m      SourceShape(bcast.out(1))[0m
[0m[[0m[0mdebug[0m] [0m[0m    })[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/dynamodb/src/main/scala/akka/stream/alpakka/dynamodb/impl/DynamoClientImpl.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.dynamodb.impl[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.actor.ActorSystem[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.annotation.InternalApi[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.http.scaladsl.Http[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.http.scaladsl.model.MediaType.NotCompressible[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.http.scaladsl.model.{ContentType, MediaType}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.http.scaladsl.settings.ConnectionPoolSettings[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.Materializer[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.dynamodb.DynamoSettings[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.dynamodb.impl.AwsClient.{AwsConnect, AwsRequestMetadata}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport com.amazonaws.AmazonServiceException[0m
[0m[[0m[0mdebug[0m] [0m[0mimport com.amazonaws.http.HttpResponseHandler[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.concurrent.ExecutionContextExecutor[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m/**[0m
[0m[[0m[0mdebug[0m] [0m[0m * INTERNAL API[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m@InternalApi[0m
[0m[[0m[0mdebug[0m] [0m[0mprivate[dynamodb] class DynamoClientImpl([0m
[0m[[0m[0mdebug[0m] [0m[0m    val settings: DynamoSettings,[0m
[0m[[0m[0mdebug[0m] [0m[0m    val errorResponseHandler: HttpResponseHandler[AmazonServiceException][0m
[0m[[0m[0mdebug[0m] [0m[0m)(implicit protected val system: ActorSystem, implicit protected val materializer: Materializer)[0m
[0m[[0m[0mdebug[0m] [0m[0m    extends AwsClient[DynamoSettings] {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  override protected val service = "dynamodb"[0m
[0m[[0m[0mdebug[0m] [0m[0m  override protected val defaultContentType =[0m
[0m[[0m[0mdebug[0m] [0m[0m    ContentType.Binary(MediaType.customBinary("application", "x-amz-json-1.0", NotCompressible))[0m
[0m[[0m[0mdebug[0m] [0m[0m  override protected implicit val ec: ExecutionContextExecutor = system.dispatcher[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  override protected val connection: AwsConnect = {[0m
[0m[[0m[0mdebug[0m] [0m[0m    val poolSettings = ConnectionPoolSettings(system)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .withMaxConnections(settings.parallelism)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .withMaxOpenRequests(settings.maxOpenRequests.getOrElse(settings.parallelism))[0m
[0m[[0m[0mdebug[0m] [0m[0m    if (settings.tls)[0m
[0m[[0m[0mdebug[0m] [0m[0m      Http().cachedHostConnectionPoolHttps[AwsRequestMetadata](settings.host, settings = poolSettings)[0m
[0m[[0m[0mdebug[0m] [0m[0m    else[0m
[0m[[0m[0mdebug[0m] [0m[0m      Http().cachedHostConnectionPool[AwsRequestMetadata](settings.host, settings.port, settings = poolSettings)[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  override protected def url: String = if (settings.tls) s"https://${settings.host}/" else s"http://${settings.host}/"[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/dynamodb/src/main/scala/akka/stream/alpakka/dynamodb/impl/DynamoProtocol.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.dynamodb.impl[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.annotation.InternalApi[0m
[0m[[0m[0mdebug[0m] [0m[0mimport com.amazonaws.AmazonServiceException[0m
[0m[[0m[0mdebug[0m] [0m[0mimport com.amazonaws.http.HttpResponseHandler[0m
[0m[[0m[0mdebug[0m] [0m[0mimport com.amazonaws.protocol.json._[0m
[0m[[0m[0mdebug[0m] [0m[0mimport com.amazonaws.services.dynamodbv2.model._[0m
[0m[[0m[0mdebug[0m] [0m[0mimport com.amazonaws.services.dynamodbv2.model.transform._[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m/**[0m
[0m[[0m[0mdebug[0m] [0m[0m * INTERNAL API[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m@InternalApi[0m
[0m[[0m[0mdebug[0m] [0m[0mprivate[dynamodb] trait DynamoProtocol {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  val meta = new JsonOperationMetadata().withPayloadJson(true)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  val protocol: SdkJsonProtocolFactory = new SdkJsonProtocolFactory([0m
[0m[[0m[0mdebug[0m] [0m[0m    new JsonClientMetadata()[0m
[0m[[0m[0mdebug[0m] [0m[0m      .addAllErrorMetadata([0m
[0m[[0m[0mdebug[0m] [0m[0m        new JsonErrorShapeMetadata()[0m
[0m[[0m[0mdebug[0m] [0m[0m          .withErrorCode("ItemCollectionSizeLimitExceededException")[0m
[0m[[0m[0mdebug[0m] [0m[0m          .withModeledClass(classOf[ItemCollectionSizeLimitExceededException]),[0m
[0m[[0m[0mdebug[0m] [0m[0m        new JsonErrorShapeMetadata()[0m
[0m[[0m[0mdebug[0m] [0m[0m          .withErrorCode("ResourceInUseException")[0m
[0m[[0m[0mdebug[0m] [0m[0m          .withModeledClass(classOf[ResourceInUseException]),[0m
[0m[[0m[0mdebug[0m] [0m[0m        new JsonErrorShapeMetadata()[0m
[0m[[0m[0mdebug[0m] [0m[0m          .withErrorCode("ResourceNotFoundException")[0m
[0m[[0m[0mdebug[0m] [0m[0m          .withModeledClass(classOf[ResourceNotFoundException]),[0m
[0m[[0m[0mdebug[0m] [0m[0m        new JsonErrorShapeMetadata()[0m
[0m[[0m[0mdebug[0m] [0m[0m          .withErrorCode("ProvisionedThroughputExceededException")[0m
[0m[[0m[0mdebug[0m] [0m[0m          .withModeledClass(classOf[ProvisionedThroughputExceededException]),[0m
[0m[[0m[0mdebug[0m] [0m[0m        new JsonErrorShapeMetadata()[0m
[0m[[0m[0mdebug[0m] [0m[0m          .withErrorCode("ConditionalCheckFailedException")[0m
[0m[[0m[0mdebug[0m] [0m[0m          .withModeledClass(classOf[ConditionalCheckFailedException]),[0m
[0m[[0m[0mdebug[0m] [0m[0m        new JsonErrorShapeMetadata()[0m
[0m[[0m[0mdebug[0m] [0m[0m          .withErrorCode("InternalServerError")[0m
[0m[[0m[0mdebug[0m] [0m[0m          .withModeledClass(classOf[InternalServerErrorException]),[0m
[0m[[0m[0mdebug[0m] [0m[0m        new JsonErrorShapeMetadata()[0m
[0m[[0m[0mdebug[0m] [0m[0m          .withErrorCode("LimitExceededException")[0m
[0m[[0m[0mdebug[0m] [0m[0m          .withModeledClass(classOf[LimitExceededException])[0m
[0m[[0m[0mdebug[0m] [0m[0m      )[0m
[0m[[0m[0mdebug[0m] [0m[0m      .withBaseServiceExceptionClass(classOf[com.amazonaws.services.dynamodbv2.model.AmazonDynamoDBException])[0m
[0m[[0m[0mdebug[0m] [0m[0m  )[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  val errorResponseHandler: HttpResponseHandler[AmazonServiceException] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    protocol.createErrorResponseHandler(new JsonErrorResponseMetadata())[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  protected val batchGetItemM = new BatchGetItemRequestProtocolMarshaller(protocol)[0m
[0m[[0m[0mdebug[0m] [0m[0m  protected val batchWriteItemM = new BatchWriteItemRequestProtocolMarshaller(protocol)[0m
[0m[[0m[0mdebug[0m] [0m[0m  protected val createTableM = new CreateTableRequestProtocolMarshaller(protocol)[0m
[0m[[0m[0mdebug[0m] [0m[0m  protected val deleteItemM = new DeleteItemRequestProtocolMarshaller(protocol)[0m
[0m[[0m[0mdebug[0m] [0m[0m  protected val deleteTableM = new DeleteTableRequestProtocolMarshaller(protocol)[0m
[0m[[0m[0mdebug[0m] [0m[0m  protected val describeLimitsM = new DescribeLimitsRequestProtocolMarshaller(protocol)[0m
[0m[[0m[0mdebug[0m] [0m[0m  protected val describeTableM = new DescribeTableRequestProtocolMarshaller(protocol)[0m
[0m[[0m[0mdebug[0m] [0m[0m  protected val describeTimeToLiveM = new DescribeTimeToLiveRequestProtocolMarshaller(protocol)[0m
[0m[[0m[0mdebug[0m] [0m[0m  protected val getItemM = new GetItemRequestProtocolMarshaller(protocol)[0m
[0m[[0m[0mdebug[0m] [0m[0m  protected val listTablesM = new ListTablesRequestProtocolMarshaller(protocol)[0m
[0m[[0m[0mdebug[0m] [0m[0m  protected val putItemM = new PutItemRequestProtocolMarshaller(protocol)[0m
[0m[[0m[0mdebug[0m] [0m[0m  protected val queryM = new QueryRequestProtocolMarshaller(protocol)[0m
[0m[[0m[0mdebug[0m] [0m[0m  protected val scanM = new ScanRequestProtocolMarshaller(protocol)[0m
[0m[[0m[0mdebug[0m] [0m[0m  protected val transactGetItemsM = new TransactGetItemsRequestProtocolMarshaller(protocol)[0m
[0m[[0m[0mdebug[0m] [0m[0m  protected val transactWriteItemsM = new TransactWriteItemsRequestProtocolMarshaller(protocol)[0m
[0m[[0m[0mdebug[0m] [0m[0m  protected val updateItemM = new UpdateItemRequestProtocolMarshaller(protocol)[0m
[0m[[0m[0mdebug[0m] [0m[0m  protected val updateTableM = new UpdateTableRequestProtocolMarshaller(protocol)[0m
[0m[[0m[0mdebug[0m] [0m[0m  protected val updateTimeToLiveM = new UpdateTimeToLiveRequestProtocolMarshaller(protocol)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  protected val batchGetItemU = protocol.createResponseHandler(meta, new BatchGetItemResultJsonUnmarshaller)[0m
[0m[[0m[0mdebug[0m] [0m[0m  protected val batchWriteItemU = protocol.createResponseHandler(meta, new BatchWriteItemResultJsonUnmarshaller)[0m
[0m[[0m[0mdebug[0m] [0m[0m  protected val createTableU = protocol.createResponseHandler(meta, new CreateTableResultJsonUnmarshaller)[0m
[0m[[0m[0mdebug[0m] [0m[0m  protected val deleteItemU = protocol.createResponseHandler(meta, new DeleteItemResultJsonUnmarshaller)[0m
[0m[[0m[0mdebug[0m] [0m[0m  protected val deleteTableU = protocol.createResponseHandler(meta, new DeleteTableResultJsonUnmarshaller)[0m
[0m[[0m[0mdebug[0m] [0m[0m  protected val describeLimitsU = protocol.createResponseHandler(meta, new DescribeLimitsResultJsonUnmarshaller)[0m
[0m[[0m[0mdebug[0m] [0m[0m  protected val describeTableU = protocol.createResponseHandler(meta, new DescribeTableResultJsonUnmarshaller)[0m
[0m[[0m[0mdebug[0m] [0m[0m  protected val describeTimeToLiveU =[0m
[0m[[0m[0mdebug[0m] [0m[0m    protocol.createResponseHandler(meta, new DescribeTimeToLiveResultJsonUnmarshaller)[0m
[0m[[0m[0mdebug[0m] [0m[0m  protected val getItemU = protocol.createResponseHandler(meta, new GetItemResultJsonUnmarshaller)[0m
[0m[[0m[0mdebug[0m] [0m[0m  protected val listTablesU = protocol.createResponseHandler(meta, new ListTablesResultJsonUnmarshaller)[0m
[0m[[0m[0mdebug[0m] [0m[0m  protected val putItemU = protocol.createResponseHandler(meta, new PutItemResultJsonUnmarshaller)[0m
[0m[[0m[0mdebug[0m] [0m[0m  protected val queryU = protocol.createResponseHandler(meta, new QueryResultJsonUnmarshaller)[0m
[0m[[0m[0mdebug[0m] [0m[0m  protected val scanU = protocol.createResponseHandler(meta, new ScanResultJsonUnmarshaller)[0m
[0m[[0m[0mdebug[0m] [0m[0m  protected val transactGetItemsU = protocol.createResponseHandler(meta, new TransactGetItemsResultJsonUnmarshaller)[0m
[0m[[0m[0mdebug[0m] [0m[0m  protected val transactWriteItemsU = protocol.createResponseHandler(meta, new TransactWriteItemsResultJsonUnmarshaller)[0m
[0m[[0m[0mdebug[0m] [0m[0m  protected val updateItemU = protocol.createResponseHandler(meta, new UpdateItemResultJsonUnmarshaller)[0m
[0m[[0m[0mdebug[0m] [0m[0m  protected val updateTableU = protocol.createResponseHandler(meta, new UpdateTableResultJsonUnmarshaller)[0m
[0m[[0m[0mdebug[0m] [0m[0m  protected val updateTimeToLiveU = protocol.createResponseHandler(meta, new UpdateTimeToLiveResultJsonUnmarshaller)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
