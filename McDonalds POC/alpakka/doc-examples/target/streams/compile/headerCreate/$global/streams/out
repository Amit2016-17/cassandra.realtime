[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/doc-examples/src/main/scala/playground/filesystem/FileSystemMock.java[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage playground.filesystem;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport com.google.common.jimfs.Configuration;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport com.google.common.jimfs.Jimfs;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.io.IOException;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.nio.file.*;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.nio.file.attribute.BasicFileAttributes;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpublic class FileSystemMock {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    public final FileSystem fileSystem;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    private String loremIpsum =[0m
[0m[[0m[0mdebug[0m] [0m[0m        "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Praesent auctor imperdiet " +[0m
[0m[[0m[0mdebug[0m] [0m[0m        "velit, eu dapibus nisl dapibus vitae. Sed quam lacus, fringilla posuere ligula at, " +[0m
[0m[[0m[0mdebug[0m] [0m[0m        "aliquet laoreet nulla. Aliquam id fermentum justo. Aliquam et massa consequat, " +[0m
[0m[[0m[0mdebug[0m] [0m[0m        "pellentesque dolor nec, gravida libero. Phasellus elit eros, finibus eget " +[0m
[0m[[0m[0mdebug[0m] [0m[0m        "sollicitudin ac, consectetur sed ante. Etiam ornare lacus blandit nisi gravida " +[0m
[0m[[0m[0mdebug[0m] [0m[0m        "accumsan. Sed in lorem arcu. Vivamus et eleifend ligula. Maecenas ut commodo ante. " +[0m
[0m[[0m[0mdebug[0m] [0m[0m        "Suspendisse sit amet placerat arcu, porttitor sagittis velit. Quisque gravida mi a " +[0m
[0m[[0m[0mdebug[0m] [0m[0m        "porttitor ornare. Cras lorem nisl, sollicitudin vitae odio at, vehicula maximus " +[0m
[0m[[0m[0mdebug[0m] [0m[0m        "mauris. Sed ac purus ac turpis pellentesque cursus ac eget est. Pellentesque " +[0m
[0m[[0m[0mdebug[0m] [0m[0m        "habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas.";[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    public FileSystemMock(FileSystem fs) {[0m
[0m[[0m[0mdebug[0m] [0m[0m        fileSystem = fs;[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    public FileSystemMock() {[0m
[0m[[0m[0mdebug[0m] [0m[0m        this(Jimfs.newFileSystem(Configuration.unix()));[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    public void cleanFiles() {[0m
[0m[[0m[0mdebug[0m] [0m[0m        for (Path rootDir : getFileSystem().getRootDirectories()) {[0m
[0m[[0m[0mdebug[0m] [0m[0m            try {[0m
[0m[[0m[0mdebug[0m] [0m[0m                Files.walkFileTree(rootDir, new SimpleFileVisitor<Path>() {[0m
[0m[[0m[0mdebug[0m] [0m[0m                    @Override[0m
[0m[[0m[0mdebug[0m] [0m[0m                    public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {[0m
[0m[[0m[0mdebug[0m] [0m[0m                        Files.deleteIfExists(file);[0m
[0m[[0m[0mdebug[0m] [0m[0m                        return FileVisitResult.CONTINUE;[0m
[0m[[0m[0mdebug[0m] [0m[0m                    }[0m
[0m[[0m[0mdebug[0m] [0m[0m                });[0m
[0m[[0m[0mdebug[0m] [0m[0m            } catch (Throwable t) {[0m
[0m[[0m[0mdebug[0m] [0m[0m                t.printStackTrace();[0m
[0m[[0m[0mdebug[0m] [0m[0m            }[0m
[0m[[0m[0mdebug[0m] [0m[0m        }[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    public void generateFiles(int numFiles, int pageSize, String basePath) {[0m
[0m[[0m[0mdebug[0m] [0m[0m        String base = "";[0m
[0m[[0m[0mdebug[0m] [0m[0m        if (!basePath.isEmpty()) {[0m
[0m[[0m[0mdebug[0m] [0m[0m            if ('/' != basePath.charAt(0)) {[0m
[0m[[0m[0mdebug[0m] [0m[0m                base = "/" + basePath;[0m
[0m[[0m[0mdebug[0m] [0m[0m            } else {[0m
[0m[[0m[0mdebug[0m] [0m[0m                base = basePath;[0m
[0m[[0m[0mdebug[0m] [0m[0m            }[0m
[0m[[0m[0mdebug[0m] [0m[0m        }[0m
[0m[[0m[0mdebug[0m] [0m[0m        int i = 1;[0m
[0m[[0m[0mdebug[0m] [0m[0m        while (i <= numFiles) {[0m
[0m[[0m[0mdebug[0m] [0m[0m            int j = i / pageSize;[0m
[0m[[0m[0mdebug[0m] [0m[0m            String subDir = (j > 0) ? "/dir_" + j : "";[0m
[0m[[0m[0mdebug[0m] [0m[0m            putFileOnFtp(base + subDir, "sample_" + i);[0m
[0m[[0m[0mdebug[0m] [0m[0m            i++;[0m
[0m[[0m[0mdebug[0m] [0m[0m        }[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    public void putFileOnFtp(String path, String fileName) {[0m
[0m[[0m[0mdebug[0m] [0m[0m        putFileOnFtpWithContents(path, fileName, loremIpsum.getBytes());[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    public void putFileOnFtpWithContents(String path, String fileName, byte[] fileContents) {[0m
[0m[[0m[0mdebug[0m] [0m[0m        try {[0m
[0m[[0m[0mdebug[0m] [0m[0m            Path baseDir = getFileSystem().getPath(path);[0m
[0m[[0m[0mdebug[0m] [0m[0m            if (!Files.exists(baseDir)) {[0m
[0m[[0m[0mdebug[0m] [0m[0m                Files.createDirectories(baseDir);[0m
[0m[[0m[0mdebug[0m] [0m[0m            }[0m
[0m[[0m[0mdebug[0m] [0m[0m            Path filePath = baseDir.resolve(fileName);[0m
[0m[[0m[0mdebug[0m] [0m[0m            Files.write(filePath, fileContents);[0m
[0m[[0m[0mdebug[0m] [0m[0m        } catch (Throwable t) {[0m
[0m[[0m[0mdebug[0m] [0m[0m            throw new RuntimeException(t);[0m
[0m[[0m[0mdebug[0m] [0m[0m        }[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    FileSystem getFileSystem() {[0m
[0m[[0m[0mdebug[0m] [0m[0m        return fileSystem;[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    public String getLoremIpsum() {[0m
[0m[[0m[0mdebug[0m] [0m[0m        return loremIpsum;[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/doc-examples/src/main/scala/playground/filesystem/JimfsFactory.java[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage playground.filesystem;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.apache.ftpserver.ftplet.FileSystemFactory;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.apache.ftpserver.ftplet.FileSystemView;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.apache.ftpserver.ftplet.FtpException;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.apache.ftpserver.ftplet.User;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.slf4j.Logger;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.slf4j.LoggerFactory;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport playground.filesystem.impl.JimfsView;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.io.IOException;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.nio.file.FileSystem;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.nio.file.Files;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.nio.file.Path;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpublic class JimfsFactory implements FileSystemFactory {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    private final Logger LOG = LoggerFactory.getLogger(JimfsFactory.class);[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    private FileSystem fileSystem;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    private boolean createHome;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    private boolean caseInsensitive;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    public boolean isCreateHome() {[0m
[0m[[0m[0mdebug[0m] [0m[0m        return createHome;[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    public void setCreateHome(boolean createHome) {[0m
[0m[[0m[0mdebug[0m] [0m[0m        this.createHome = createHome;[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    public boolean isCaseInsensitive() {[0m
[0m[[0m[0mdebug[0m] [0m[0m        return caseInsensitive;[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    public void setCaseInsensitive(boolean caseInsensitive) {[0m
[0m[[0m[0mdebug[0m] [0m[0m        this.caseInsensitive = caseInsensitive;[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    public JimfsFactory(FileSystem fileSystem) {[0m
[0m[[0m[0mdebug[0m] [0m[0m        this.fileSystem = fileSystem;[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    @Override[0m
[0m[[0m[0mdebug[0m] [0m[0m    public FileSystemView createFileSystemView(User user) throws FtpException {[0m
[0m[[0m[0mdebug[0m] [0m[0m        synchronized (user) {[0m
[0m[[0m[0mdebug[0m] [0m[0m            // create home if does not exist[0m
[0m[[0m[0mdebug[0m] [0m[0m            if (createHome) {[0m
[0m[[0m[0mdebug[0m] [0m[0m                String homeDirStr = user.getHomeDirectory();[0m
[0m[[0m[0mdebug[0m] [0m[0m                Path homeDir = fileSystem.getPath(homeDirStr);[0m
[0m[[0m[0mdebug[0m] [0m[0m                if (Files.isRegularFile(homeDir)) {[0m
[0m[[0m[0mdebug[0m] [0m[0m                    LOG.warn("Not a directory :: " + homeDirStr);[0m
[0m[[0m[0mdebug[0m] [0m[0m                    throw new FtpException("Not a directory :: " + homeDirStr);[0m
[0m[[0m[0mdebug[0m] [0m[0m                }[0m
[0m[[0m[0mdebug[0m] [0m[0m                if (!Files.exists(homeDir)) {[0m
[0m[[0m[0mdebug[0m] [0m[0m                    try {[0m
[0m[[0m[0mdebug[0m] [0m[0m                        Files.createDirectories(homeDir);[0m
[0m[[0m[0mdebug[0m] [0m[0m                    } catch (IOException t) {[0m
[0m[[0m[0mdebug[0m] [0m[0m                        final String msg = "Cannot create user home :: " + homeDirStr;[0m
[0m[[0m[0mdebug[0m] [0m[0m                        LOG.warn(msg);[0m
[0m[[0m[0mdebug[0m] [0m[0m                        throw new FtpException(msg, t);[0m
[0m[[0m[0mdebug[0m] [0m[0m                    }[0m
[0m[[0m[0mdebug[0m] [0m[0m                }[0m
[0m[[0m[0mdebug[0m] [0m[0m            }[0m
[0m[[0m[0mdebug[0m] [0m[0m            return new JimfsView(fileSystem, user, caseInsensitive);[0m
[0m[[0m[0mdebug[0m] [0m[0m        }[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/doc-examples/src/main/scala/playground/filesystem/impl/JimfsView.java[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage playground.filesystem.impl;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.apache.ftpserver.ftplet.FileSystemView;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.apache.ftpserver.ftplet.FtpException;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.apache.ftpserver.ftplet.FtpFile;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.apache.ftpserver.ftplet.User;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.slf4j.Logger;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.slf4j.LoggerFactory;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.io.IOException;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.nio.file.DirectoryStream;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.nio.file.FileSystem;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.nio.file.Files;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.nio.file.Path;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.util.ArrayList;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.util.List;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.util.StringTokenizer;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m/**[0m
[0m[[0m[0mdebug[0m] [0m[0m * File system view based on the in-memory jimfs file system. The root in this[0m
[0m[[0m[0mdebug[0m] [0m[0m * class is the user virtual root (/).[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0mpublic class JimfsView implements FileSystemView {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    private final Logger LOG = LoggerFactory.getLogger(JimfsView.class);[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    // this will be the jimfs file system in runtime.[0m
[0m[[0m[0mdebug[0m] [0m[0m    private FileSystem fileSystem;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    // the root directory will always end with '/'.[0m
[0m[[0m[0mdebug[0m] [0m[0m    private String rootDir;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    // the first and the last character will always be '/'[0m
[0m[[0m[0mdebug[0m] [0m[0m    // It is always with respect to the root directory.[0m
[0m[[0m[0mdebug[0m] [0m[0m    private String currDir;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    private User user;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    private boolean caseInsensitive = false;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    public JimfsView(FileSystem fileSystem, User user, boolean caseInsensitive)[0m
[0m[[0m[0mdebug[0m] [0m[0m        throws FtpException {[0m
[0m[[0m[0mdebug[0m] [0m[0m        if (fileSystem == null) {[0m
[0m[[0m[0mdebug[0m] [0m[0m            throw new IllegalArgumentException("filesystem can not be null");[0m
[0m[[0m[0mdebug[0m] [0m[0m        }[0m
[0m[[0m[0mdebug[0m] [0m[0m        if (user == null) {[0m
[0m[[0m[0mdebug[0m] [0m[0m            throw new IllegalArgumentException("user can not be null");[0m
[0m[[0m[0mdebug[0m] [0m[0m        }[0m
[0m[[0m[0mdebug[0m] [0m[0m        if (user.getHomeDirectory() == null) {[0m
[0m[[0m[0mdebug[0m] [0m[0m            throw new IllegalArgumentException("user home directory can not be null");[0m
[0m[[0m[0mdebug[0m] [0m[0m        }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m        this.fileSystem = fileSystem;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m        this.caseInsensitive = caseInsensitive;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m        // add last '/' if necessary[0m
[0m[[0m[0mdebug[0m] [0m[0m        String rootDir = user.getHomeDirectory();[0m
[0m[[0m[0mdebug[0m] [0m[0m        rootDir = normalizeSeparateChar(rootDir);[0m
[0m[[0m[0mdebug[0m] [0m[0m        if (!rootDir.endsWith("/")) {[0m
[0m[[0m[0mdebug[0m] [0m[0m            rootDir += '/';[0m
[0m[[0m[0mdebug[0m] [0m[0m        }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m        LOG.debug("Jimfs filesystem view created by user \"{}\" with root \"{}\"", user.getName(), rootDir);[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m        this.rootDir = rootDir;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m        this.user = user;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m        currDir = "/";[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    /**[0m
[0m[[0m[0mdebug[0m] [0m[0m     * Get the user home directory. It would be the file system root[0m
[0m[[0m[0mdebug[0m] [0m[0m     * for the specific user.[0m
[0m[[0m[0mdebug[0m] [0m[0m     */[0m
[0m[[0m[0mdebug[0m] [0m[0m    public FtpFile getHomeDirectory() throws FtpException {[0m
[0m[[0m[0mdebug[0m] [0m[0m        return new JimfsFtpFile("/", fileSystem.getPath(rootDir), user);[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    /**[0m
[0m[[0m[0mdebug[0m] [0m[0m     * Get the current directory.[0m
[0m[[0m[0mdebug[0m] [0m[0m     */[0m
[0m[[0m[0mdebug[0m] [0m[0m    public FtpFile getWorkingDirectory() throws FtpException {[0m
[0m[[0m[0mdebug[0m] [0m[0m        FtpFile fileObj;[0m
[0m[[0m[0mdebug[0m] [0m[0m        if (currDir.equals("/")) {[0m
[0m[[0m[0mdebug[0m] [0m[0m            fileObj = getHomeDirectory();[0m
[0m[[0m[0mdebug[0m] [0m[0m        } else {[0m
[0m[[0m[0mdebug[0m] [0m[0m            Path path = fileSystem.getPath(rootDir, currDir.substring(1));[0m
[0m[[0m[0mdebug[0m] [0m[0m            fileObj = new JimfsFtpFile(currDir, path, user);[0m
[0m[[0m[0mdebug[0m] [0m[0m        }[0m
[0m[[0m[0mdebug[0m] [0m[0m        return fileObj;[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    /**[0m
[0m[[0m[0mdebug[0m] [0m[0m     * Get the file object.[0m
[0m[[0m[0mdebug[0m] [0m[0m     */[0m
[0m[[0m[0mdebug[0m] [0m[0m    public FtpFile getFile(String file) {[0m
[0m[[0m[0mdebug[0m] [0m[0m        String physicalName = getPhysicalName(file);[0m
[0m[[0m[0mdebug[0m] [0m[0m        Path filePath = fileSystem.getPath(physicalName);[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m        // strip the root directory and return[0m
[0m[[0m[0mdebug[0m] [0m[0m        String userFileName = physicalName.substring(rootDir.length() - 1);[0m
[0m[[0m[0mdebug[0m] [0m[0m        return new JimfsFtpFile(userFileName, filePath, user);[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    /**[0m
[0m[[0m[0mdebug[0m] [0m[0m     * Change directory.[0m
[0m[[0m[0mdebug[0m] [0m[0m     */[0m
[0m[[0m[0mdebug[0m] [0m[0m    public boolean changeWorkingDirectory(String dir) throws FtpException {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m        // not a directory - return false[0m
[0m[[0m[0mdebug[0m] [0m[0m        dir = getPhysicalName(dir);[0m
[0m[[0m[0mdebug[0m] [0m[0m        Path dirPath = fileSystem.getPath(dir);[0m
[0m[[0m[0mdebug[0m] [0m[0m        if (!Files.isDirectory(dirPath)) {[0m
[0m[[0m[0mdebug[0m] [0m[0m            return false;[0m
[0m[[0m[0mdebug[0m] [0m[0m        }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m        // strip user root and add last '/' if necessary[0m
[0m[[0m[0mdebug[0m] [0m[0m        dir = dir.substring(rootDir.length() - 1);[0m
[0m[[0m[0mdebug[0m] [0m[0m        if (dir.charAt(dir.length() - 1) != '/') {[0m
[0m[[0m[0mdebug[0m] [0m[0m            dir = dir + '/';[0m
[0m[[0m[0mdebug[0m] [0m[0m        }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m        currDir = dir;[0m
[0m[[0m[0mdebug[0m] [0m[0m        return true;[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    /**[0m
[0m[[0m[0mdebug[0m] [0m[0m     * Is the file content random accessible?[0m
[0m[[0m[0mdebug[0m] [0m[0m     */[0m
[0m[[0m[0mdebug[0m] [0m[0m    public boolean isRandomAccessible() {[0m
[0m[[0m[0mdebug[0m] [0m[0m        return true;[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    /**[0m
[0m[[0m[0mdebug[0m] [0m[0m     * Dispose the file system.[0m
[0m[[0m[0mdebug[0m] [0m[0m     */[0m
[0m[[0m[0mdebug[0m] [0m[0m    public void dispose() {[0m
[0m[[0m[0mdebug[0m] [0m[0m        // Nothing to do[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    private String normalizeSeparateChar(final String pathName) {[0m
[0m[[0m[0mdebug[0m] [0m[0m        String normalizePathName = pathName.replace(fileSystem.getSeparator(), "/");[0m
[0m[[0m[0mdebug[0m] [0m[0m        return normalizePathName.replace('\\', '/');[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    private String getPhysicalName(final String file) {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m        // get the starting directory[0m
[0m[[0m[0mdebug[0m] [0m[0m        String normalizedRootDir = normalizeSeparateChar(rootDir);[0m
[0m[[0m[0mdebug[0m] [0m[0m        if (normalizedRootDir.charAt(normalizedRootDir.length() - 1) != '/') {[0m
[0m[[0m[0mdebug[0m] [0m[0m            normalizedRootDir += '/';[0m
[0m[[0m[0mdebug[0m] [0m[0m        }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m        String normalizedFileName = normalizeSeparateChar(file);[0m
[0m[[0m[0mdebug[0m] [0m[0m        String resArg;[0m
[0m[[0m[0mdebug[0m] [0m[0m        String normalizedCurrDir = currDir;[0m
[0m[[0m[0mdebug[0m] [0m[0m        if (normalizedFileName.charAt(0) != '/') {[0m
[0m[[0m[0mdebug[0m] [0m[0m            if (normalizedCurrDir == null || normalizedCurrDir.length() == 0) {[0m
[0m[[0m[0mdebug[0m] [0m[0m                normalizedCurrDir = "/";[0m
[0m[[0m[0mdebug[0m] [0m[0m            }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m            normalizedCurrDir = normalizeSeparateChar(normalizedCurrDir);[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m            if (normalizedCurrDir.charAt(0) != '/') {[0m
[0m[[0m[0mdebug[0m] [0m[0m                normalizedCurrDir = '/' + normalizedCurrDir;[0m
[0m[[0m[0mdebug[0m] [0m[0m            }[0m
[0m[[0m[0mdebug[0m] [0m[0m            if (normalizedCurrDir.charAt(normalizedCurrDir.length() - 1) != '/') {[0m
[0m[[0m[0mdebug[0m] [0m[0m                normalizedCurrDir += '/';[0m
[0m[[0m[0mdebug[0m] [0m[0m            }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m            resArg = normalizedRootDir + normalizedCurrDir.substring(1);[0m
[0m[[0m[0mdebug[0m] [0m[0m        } else {[0m
[0m[[0m[0mdebug[0m] [0m[0m            resArg = normalizedRootDir;[0m
[0m[[0m[0mdebug[0m] [0m[0m        }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m        // strip last '/'[0m
[0m[[0m[0mdebug[0m] [0m[0m        if (resArg.charAt(resArg.length() - 1) == '/') {[0m
[0m[[0m[0mdebug[0m] [0m[0m            resArg = resArg.substring(0, resArg.length() - 1);[0m
[0m[[0m[0mdebug[0m] [0m[0m        }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m        // replace ., ~ and ..[0m
[0m[[0m[0mdebug[0m] [0m[0m        // in this loop resArg will never end with '/'[0m
[0m[[0m[0mdebug[0m] [0m[0m        StringTokenizer st = new StringTokenizer(normalizedFileName, "/");[0m
[0m[[0m[0mdebug[0m] [0m[0m        while (st.hasMoreTokens()) {[0m
[0m[[0m[0mdebug[0m] [0m[0m            String tok = st.nextToken();[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m            // . => current directory[0m
[0m[[0m[0mdebug[0m] [0m[0m            if (tok.equals(".")) {[0m
[0m[[0m[0mdebug[0m] [0m[0m                continue;[0m
[0m[[0m[0mdebug[0m] [0m[0m            }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m            // .. => parent directory (if not root)[0m
[0m[[0m[0mdebug[0m] [0m[0m            if (tok.equals("..")) {[0m
[0m[[0m[0mdebug[0m] [0m[0m                if (resArg.startsWith(normalizedRootDir)) {[0m
[0m[[0m[0mdebug[0m] [0m[0m                    int slashIndex = resArg.lastIndexOf("/");[0m
[0m[[0m[0mdebug[0m] [0m[0m                    if (slashIndex != -1) {[0m
[0m[[0m[0mdebug[0m] [0m[0m                        resArg = resArg.substring(0, slashIndex);[0m
[0m[[0m[0mdebug[0m] [0m[0m                    }[0m
[0m[[0m[0mdebug[0m] [0m[0m                }[0m
[0m[[0m[0mdebug[0m] [0m[0m                continue;[0m
[0m[[0m[0mdebug[0m] [0m[0m            }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m            // ~ => home directory (in this case is the root directory)[0m
[0m[[0m[0mdebug[0m] [0m[0m            if (tok.equals("~")) {[0m
[0m[[0m[0mdebug[0m] [0m[0m                resArg = normalizedRootDir.substring(0, normalizedRootDir.length() - 1);[0m
[0m[[0m[0mdebug[0m] [0m[0m                continue;[0m
[0m[[0m[0mdebug[0m] [0m[0m            }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m            if (caseInsensitive) {[0m
[0m[[0m[0mdebug[0m] [0m[0m                Path dir = fileSystem.getPath(resArg);[0m
[0m[[0m[0mdebug[0m] [0m[0m                DirectoryStream<Path> dirStream = null;[0m
[0m[[0m[0mdebug[0m] [0m[0m                try {[0m
[0m[[0m[0mdebug[0m] [0m[0m                    dirStream = Files.newDirectoryStream(dir, new NameEqualsPathFilter(tok, true));[0m
[0m[[0m[0mdebug[0m] [0m[0m                } catch (IOException t) {[0m
[0m[[0m[0mdebug[0m] [0m[0m                    // ignore[0m
[0m[[0m[0mdebug[0m] [0m[0m                }[0m
[0m[[0m[0mdebug[0m] [0m[0m                List<Path> matches = new ArrayList<>(0);[0m
[0m[[0m[0mdebug[0m] [0m[0m                if (dirStream != null) {[0m
[0m[[0m[0mdebug[0m] [0m[0m                    for (Path match : dirStream) {[0m
[0m[[0m[0mdebug[0m] [0m[0m                        matches.add(match);[0m
[0m[[0m[0mdebug[0m] [0m[0m                    }[0m
[0m[[0m[0mdebug[0m] [0m[0m                }[0m
[0m[[0m[0mdebug[0m] [0m[0m                if (matches.size() > 0) {[0m
[0m[[0m[0mdebug[0m] [0m[0m                    tok = matches.get(0).getFileName().toString();[0m
[0m[[0m[0mdebug[0m] [0m[0m                }[0m
[0m[[0m[0mdebug[0m] [0m[0m            }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m            resArg = resArg + '/' + tok;[0m
[0m[[0m[0mdebug[0m] [0m[0m        }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m        // add last slash if necessary[0m
[0m[[0m[0mdebug[0m] [0m[0m        if ((resArg.length()) + 1 == normalizedRootDir.length()) {[0m
[0m[[0m[0mdebug[0m] [0m[0m            resArg += '/';[0m
[0m[[0m[0mdebug[0m] [0m[0m        }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m        // final check[0m
[0m[[0m[0mdebug[0m] [0m[0m        if (!resArg.regionMatches(0, normalizedRootDir, 0, normalizedRootDir[0m
[0m[[0m[0mdebug[0m] [0m[0m                .length())) {[0m
[0m[[0m[0mdebug[0m] [0m[0m            resArg = normalizedRootDir;[0m
[0m[[0m[0mdebug[0m] [0m[0m        }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m        return resArg;[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/doc-examples/src/main/scala/playground/filesystem/impl/JimfsFtpFile.java[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage playground.filesystem.impl;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.apache.ftpserver.ftplet.FtpFile;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.apache.ftpserver.ftplet.User;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.apache.ftpserver.usermanager.impl.WriteRequest;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.slf4j.Logger;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.slf4j.LoggerFactory;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.io.*;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.nio.file.*;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.nio.file.attribute.FileTime;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.util.ArrayList;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.util.Collections;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.util.Comparator;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.util.List;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpublic class JimfsFtpFile implements FtpFile {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    private final Logger LOG = LoggerFactory.getLogger(JimfsFtpFile.class);[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    // the file name with respect to the user root (so it's the virtual filename).[0m
[0m[[0m[0mdebug[0m] [0m[0m    // The path separator character will be '/' and[0m
[0m[[0m[0mdebug[0m] [0m[0m    // it will always begin with '/'.[0m
[0m[[0m[0mdebug[0m] [0m[0m    private String fileName;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    // The `physical` path in the underlying file system (but happens that[0m
[0m[[0m[0mdebug[0m] [0m[0m    // in this case, the `physical` path will be also virtusl (jimfs), so crazy).[0m
[0m[[0m[0mdebug[0m] [0m[0m    private Path path;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    private User user;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    protected JimfsFtpFile(final String fileName, final Path path,[0m
[0m[[0m[0mdebug[0m] [0m[0m            final User user) {[0m
[0m[[0m[0mdebug[0m] [0m[0m        if (fileName == null) {[0m
[0m[[0m[0mdebug[0m] [0m[0m            throw new IllegalArgumentException("fileName can not be null");[0m
[0m[[0m[0mdebug[0m] [0m[0m        }[0m
[0m[[0m[0mdebug[0m] [0m[0m        if (path == null) {[0m
[0m[[0m[0mdebug[0m] [0m[0m            throw new IllegalArgumentException("path can not be null");[0m
[0m[[0m[0mdebug[0m] [0m[0m        }[0m
[0m[[0m[0mdebug[0m] [0m[0m        if (fileName.length() == 0) {[0m
[0m[[0m[0mdebug[0m] [0m[0m            throw new IllegalArgumentException("fileName can not be empty");[0m
[0m[[0m[0mdebug[0m] [0m[0m        } else if (fileName.charAt(0) != '/') {[0m
[0m[[0m[0mdebug[0m] [0m[0m            throw new IllegalArgumentException([0m
[0m[[0m[0mdebug[0m] [0m[0m                    "fileName must be an absolute path");[0m
[0m[[0m[0mdebug[0m] [0m[0m        }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m        this.fileName = fileName;[0m
[0m[[0m[0mdebug[0m] [0m[0m        this.path = path;[0m
[0m[[0m[0mdebug[0m] [0m[0m        this.user = user;[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    public String getAbsolutePath() {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m        // strip the last '/' if necessary[0m
[0m[[0m[0mdebug[0m] [0m[0m        String fullName = fileName;[0m
[0m[[0m[0mdebug[0m] [0m[0m        int filelen = fullName.length();[0m
[0m[[0m[0mdebug[0m] [0m[0m        if ((filelen != 1) && (fullName.charAt(filelen - 1) == '/')) {[0m
[0m[[0m[0mdebug[0m] [0m[0m            fullName = fullName.substring(0, filelen - 1);[0m
[0m[[0m[0mdebug[0m] [0m[0m        }[0m
[0m[[0m[0mdebug[0m] [0m[0m        return fullName;[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    public String getName() {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m        // root - the short name will be '/'[0m
[0m[[0m[0mdebug[0m] [0m[0m        if (fileName.equals("/")) {[0m
[0m[[0m[0mdebug[0m] [0m[0m            return "/";[0m
[0m[[0m[0mdebug[0m] [0m[0m        }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m        // strip the last '/'[0m
[0m[[0m[0mdebug[0m] [0m[0m        String shortName = fileName;[0m
[0m[[0m[0mdebug[0m] [0m[0m        int filelen = fileName.length();[0m
[0m[[0m[0mdebug[0m] [0m[0m        if (shortName.charAt(filelen - 1) == '/') {[0m
[0m[[0m[0mdebug[0m] [0m[0m            shortName = shortName.substring(0, filelen - 1);[0m
[0m[[0m[0mdebug[0m] [0m[0m        }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m        // return from the last '/'[0m
[0m[[0m[0mdebug[0m] [0m[0m        int slashIndex = shortName.lastIndexOf('/');[0m
[0m[[0m[0mdebug[0m] [0m[0m        if (slashIndex != -1) {[0m
[0m[[0m[0mdebug[0m] [0m[0m            shortName = shortName.substring(slashIndex + 1);[0m
[0m[[0m[0mdebug[0m] [0m[0m        }[0m
[0m[[0m[0mdebug[0m] [0m[0m        return shortName;[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    public boolean isHidden() {[0m
[0m[[0m[0mdebug[0m] [0m[0m        try {[0m
[0m[[0m[0mdebug[0m] [0m[0m            return Files.isHidden(path);[0m
[0m[[0m[0mdebug[0m] [0m[0m        } catch (IOException t) {[0m
[0m[[0m[0mdebug[0m] [0m[0m            LOG.error(t.getMessage());[0m
[0m[[0m[0mdebug[0m] [0m[0m        }[0m
[0m[[0m[0mdebug[0m] [0m[0m        return false;[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    public boolean isDirectory() {[0m
[0m[[0m[0mdebug[0m] [0m[0m        return Files.isDirectory(path);[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    public boolean isFile() {[0m
[0m[[0m[0mdebug[0m] [0m[0m        return Files.isRegularFile(path);[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    public boolean doesExist() {[0m
[0m[[0m[0mdebug[0m] [0m[0m        return Files.exists(path);[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    public long getSize() {[0m
[0m[[0m[0mdebug[0m] [0m[0m        try {[0m
[0m[[0m[0mdebug[0m] [0m[0m            return Files.size(path);[0m
[0m[[0m[0mdebug[0m] [0m[0m        } catch (IOException t) {[0m
[0m[[0m[0mdebug[0m] [0m[0m            LOG.error(t.getMessage());[0m
[0m[[0m[0mdebug[0m] [0m[0m        }[0m
[0m[[0m[0mdebug[0m] [0m[0m        return -1;[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    public String getOwnerName() {[0m
[0m[[0m[0mdebug[0m] [0m[0m        return "user";[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    public String getGroupName() {[0m
[0m[[0m[0mdebug[0m] [0m[0m        return "group";[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    public int getLinkCount() {[0m
[0m[[0m[0mdebug[0m] [0m[0m        return Files.isDirectory(path) ? 3 : 1;[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    public long getLastModified() {[0m
[0m[[0m[0mdebug[0m] [0m[0m        try {[0m
[0m[[0m[0mdebug[0m] [0m[0m            return Files.getLastModifiedTime(path).toMillis();[0m
[0m[[0m[0mdebug[0m] [0m[0m        } catch (IOException t) {[0m
[0m[[0m[0mdebug[0m] [0m[0m            LOG.error(t.getMessage());[0m
[0m[[0m[0mdebug[0m] [0m[0m        }[0m
[0m[[0m[0mdebug[0m] [0m[0m        return -1;[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    public boolean setLastModified(long time) {[0m
[0m[[0m[0mdebug[0m] [0m[0m        try {[0m
[0m[[0m[0mdebug[0m] [0m[0m            Files.setLastModifiedTime(path, FileTime.fromMillis(time));[0m
[0m[[0m[0mdebug[0m] [0m[0m            return true;[0m
[0m[[0m[0mdebug[0m] [0m[0m        } catch (IOException t) {[0m
[0m[[0m[0mdebug[0m] [0m[0m            LOG.error(t.getMessage());[0m
[0m[[0m[0mdebug[0m] [0m[0m        }[0m
[0m[[0m[0mdebug[0m] [0m[0m        return false;[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    public boolean isReadable() {[0m
[0m[[0m[0mdebug[0m] [0m[0m        return Files.isReadable(path);[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    public boolean isWritable() {[0m
[0m[[0m[0mdebug[0m] [0m[0m        LOG.debug("Checking authorization for " + getAbsolutePath());[0m
[0m[[0m[0mdebug[0m] [0m[0m        if (user.authorize(new WriteRequest(getAbsolutePath())) == null) {[0m
[0m[[0m[0mdebug[0m] [0m[0m            LOG.debug("Not authorized");[0m
[0m[[0m[0mdebug[0m] [0m[0m            return false;[0m
[0m[[0m[0mdebug[0m] [0m[0m        }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m        LOG.debug("Checking if file exists");[0m
[0m[[0m[0mdebug[0m] [0m[0m        if (Files.exists(path)) {[0m
[0m[[0m[0mdebug[0m] [0m[0m            LOG.debug("Checking can write: " + getAbsolutePath());[0m
[0m[[0m[0mdebug[0m] [0m[0m            return Files.isWritable(path);[0m
[0m[[0m[0mdebug[0m] [0m[0m        }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m        LOG.debug("Authorized");[0m
[0m[[0m[0mdebug[0m] [0m[0m        return true;[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    public boolean isRemovable() {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m        // root cannot be deleted[0m
[0m[[0m[0mdebug[0m] [0m[0m        if ("/".equals(fileName)) {[0m
[0m[[0m[0mdebug[0m] [0m[0m            return false;[0m
[0m[[0m[0mdebug[0m] [0m[0m        }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m        String fullName = getAbsolutePath();[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m        // we check FTPServer's write permission for this file.[0m
[0m[[0m[0mdebug[0m] [0m[0m        if (user.authorize(new WriteRequest(fullName)) == null) {[0m
[0m[[0m[0mdebug[0m] [0m[0m            return false;[0m
[0m[[0m[0mdebug[0m] [0m[0m        }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m        // In order to maintain consistency, when possible we delete the last '/' character in the String[0m
[0m[[0m[0mdebug[0m] [0m[0m        int indexOfSlash = fullName.lastIndexOf('/');[0m
[0m[[0m[0mdebug[0m] [0m[0m        String parentFullName;[0m
[0m[[0m[0mdebug[0m] [0m[0m        if (indexOfSlash == 0) {[0m
[0m[[0m[0mdebug[0m] [0m[0m            parentFullName = "/";[0m
[0m[[0m[0mdebug[0m] [0m[0m        } else {[0m
[0m[[0m[0mdebug[0m] [0m[0m            parentFullName = fullName.substring(0, indexOfSlash);[0m
[0m[[0m[0mdebug[0m] [0m[0m        }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m        JimfsFtpFile parentObject = new JimfsFtpFile(parentFullName,[0m
[0m[[0m[0mdebug[0m] [0m[0m                path.getParent(), user);[0m
[0m[[0m[0mdebug[0m] [0m[0m        return parentObject.isWritable();[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    public boolean delete() {[0m
[0m[[0m[0mdebug[0m] [0m[0m        boolean retVal = false;[0m
[0m[[0m[0mdebug[0m] [0m[0m        try {[0m
[0m[[0m[0mdebug[0m] [0m[0m            if (isRemovable()) {[0m
[0m[[0m[0mdebug[0m] [0m[0m                Files.delete(path);[0m
[0m[[0m[0mdebug[0m] [0m[0m                retVal = true;[0m
[0m[[0m[0mdebug[0m] [0m[0m            }[0m
[0m[[0m[0mdebug[0m] [0m[0m        } catch (IOException t) {[0m
[0m[[0m[0mdebug[0m] [0m[0m            LOG.error(t.getMessage());[0m
[0m[[0m[0mdebug[0m] [0m[0m        }[0m
[0m[[0m[0mdebug[0m] [0m[0m        return retVal;[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    public boolean move(final FtpFile dest) {[0m
[0m[[0m[0mdebug[0m] [0m[0m        boolean retVal = false;[0m
[0m[[0m[0mdebug[0m] [0m[0m        if (dest.isWritable() && isReadable()) {[0m
[0m[[0m[0mdebug[0m] [0m[0m            Path destPath = ((JimfsFtpFile) dest).path;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m            if (Files.exists(destPath)) {[0m
[0m[[0m[0mdebug[0m] [0m[0m                // renameTo behaves differently on different platforms[0m
[0m[[0m[0mdebug[0m] [0m[0m                // this check verifies that if the destination already exists,[0m
[0m[[0m[0mdebug[0m] [0m[0m                // we fail[0m
[0m[[0m[0mdebug[0m] [0m[0m                retVal = false;[0m
[0m[[0m[0mdebug[0m] [0m[0m            } else {[0m
[0m[[0m[0mdebug[0m] [0m[0m                try {[0m
[0m[[0m[0mdebug[0m] [0m[0m                    Files.move(path, destPath, StandardCopyOption.REPLACE_EXISTING);[0m
[0m[[0m[0mdebug[0m] [0m[0m                    retVal = true;[0m
[0m[[0m[0mdebug[0m] [0m[0m                } catch (IOException t) {[0m
[0m[[0m[0mdebug[0m] [0m[0m                    LOG.error(t.getMessage());[0m
[0m[[0m[0mdebug[0m] [0m[0m                }[0m
[0m[[0m[0mdebug[0m] [0m[0m            }[0m
[0m[[0m[0mdebug[0m] [0m[0m        }[0m
[0m[[0m[0mdebug[0m] [0m[0m        return retVal;[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    public boolean mkdir() {[0m
[0m[[0m[0mdebug[0m] [0m[0m        boolean retVal = false;[0m
[0m[[0m[0mdebug[0m] [0m[0m        try {[0m
[0m[[0m[0mdebug[0m] [0m[0m            if (isWritable()) {[0m
[0m[[0m[0mdebug[0m] [0m[0m                Files.createDirectory(path);[0m
[0m[[0m[0mdebug[0m] [0m[0m                retVal = true;[0m
[0m[[0m[0mdebug[0m] [0m[0m            }[0m
[0m[[0m[0mdebug[0m] [0m[0m        } catch (IOException t) {[0m
[0m[[0m[0mdebug[0m] [0m[0m            LOG.error(t.getMessage());[0m
[0m[[0m[0mdebug[0m] [0m[0m        }[0m
[0m[[0m[0mdebug[0m] [0m[0m        return retVal;[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    public Path getPhysicalFile() {[0m
[0m[[0m[0mdebug[0m] [0m[0m        return path;[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    public List<FtpFile> listFiles() {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m        // is a directory[0m
[0m[[0m[0mdebug[0m] [0m[0m        if (!Files.isDirectory(path)) {[0m
[0m[[0m[0mdebug[0m] [0m[0m            return null;[0m
[0m[[0m[0mdebug[0m] [0m[0m        }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m        // directory - return all the files[0m
[0m[[0m[0mdebug[0m] [0m[0m        DirectoryStream<Path> filesStream = null;[0m
[0m[[0m[0mdebug[0m] [0m[0m        try {[0m
[0m[[0m[0mdebug[0m] [0m[0m            filesStream = Files.newDirectoryStream(path);[0m
[0m[[0m[0mdebug[0m] [0m[0m        } catch(IOException t) {[0m
[0m[[0m[0mdebug[0m] [0m[0m            LOG.error(t.getMessage());[0m
[0m[[0m[0mdebug[0m] [0m[0m        }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m        if (filesStream == null) {[0m
[0m[[0m[0mdebug[0m] [0m[0m            return null;[0m
[0m[[0m[0mdebug[0m] [0m[0m        }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m        List<Path> files = new ArrayList<>();[0m
[0m[[0m[0mdebug[0m] [0m[0m        for (Path path : filesStream) {[0m
[0m[[0m[0mdebug[0m] [0m[0m            files.add(path);[0m
[0m[[0m[0mdebug[0m] [0m[0m        }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m        // make sure the files are returned in order[0m
[0m[[0m[0mdebug[0m] [0m[0m        Collections.sort(files, new Comparator<Path>() {[0m
[0m[[0m[0mdebug[0m] [0m[0m            public int compare(Path o1, Path o2) {[0m
[0m[[0m[0mdebug[0m] [0m[0m                return o1.getFileName().compareTo(o2.getFileName());[0m
[0m[[0m[0mdebug[0m] [0m[0m            }[0m
[0m[[0m[0mdebug[0m] [0m[0m        });[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m        // get the virtual name of the base directory[0m
[0m[[0m[0mdebug[0m] [0m[0m        final String virtualFileStr =[0m
[0m[[0m[0mdebug[0m] [0m[0m                getAbsolutePath().charAt(getAbsolutePath().length() - 1) != '/'[0m
[0m[[0m[0mdebug[0m] [0m[0m                        ? getAbsolutePath() + '/' : getAbsolutePath();[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m        // now return all the files under the directory[0m
[0m[[0m[0mdebug[0m] [0m[0m        List<FtpFile> virtualFiles = new ArrayList<>(files.size());[0m
[0m[[0m[0mdebug[0m] [0m[0m        for (Path file : files) {[0m
[0m[[0m[0mdebug[0m] [0m[0m            String fileName = virtualFileStr + file.getFileName();[0m
[0m[[0m[0mdebug[0m] [0m[0m            virtualFiles.add(new JimfsFtpFile(fileName, file, user));[0m
[0m[[0m[0mdebug[0m] [0m[0m        }[0m
[0m[[0m[0mdebug[0m] [0m[0m        return virtualFiles;[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    public OutputStream createOutputStream(long offset)[0m
[0m[[0m[0mdebug[0m] [0m[0m            throws IOException {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m        // permission check[0m
[0m[[0m[0mdebug[0m] [0m[0m        if (!isWritable()) {[0m
[0m[[0m[0mdebug[0m] [0m[0m            throw new IOException("No write permission : " + path.getFileName());[0m
[0m[[0m[0mdebug[0m] [0m[0m        }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m        // create output stream[0m
[0m[[0m[0mdebug[0m] [0m[0m        final RandomAccessFile raf = new RandomAccessFile(path.toFile(), "rw");[0m
[0m[[0m[0mdebug[0m] [0m[0m        raf.setLength(offset);[0m
[0m[[0m[0mdebug[0m] [0m[0m        raf.seek(offset);[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m        // The IBM jre needs to have both the stream and the random access file[0m
[0m[[0m[0mdebug[0m] [0m[0m        // objects closed to actually close the file[0m
[0m[[0m[0mdebug[0m] [0m[0m        return new FileOutputStream(raf.getFD()) {[0m
[0m[[0m[0mdebug[0m] [0m[0m            @Override[0m
[0m[[0m[0mdebug[0m] [0m[0m            public void close() throws IOException {[0m
[0m[[0m[0mdebug[0m] [0m[0m                super.close();[0m
[0m[[0m[0mdebug[0m] [0m[0m                raf.close();[0m
[0m[[0m[0mdebug[0m] [0m[0m            }[0m
[0m[[0m[0mdebug[0m] [0m[0m        };[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    public InputStream createInputStream(long offset)[0m
[0m[[0m[0mdebug[0m] [0m[0m            throws IOException {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m        // permission check[0m
[0m[[0m[0mdebug[0m] [0m[0m        if (!isReadable()) {[0m
[0m[[0m[0mdebug[0m] [0m[0m            throw new IOException("No read permission : " + path.getFileName());[0m
[0m[[0m[0mdebug[0m] [0m[0m        }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m        return Files.newInputStream(path, StandardOpenOption.READ);[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    @Override[0m
[0m[[0m[0mdebug[0m] [0m[0m    public boolean equals(Object obj) {[0m
[0m[[0m[0mdebug[0m] [0m[0m        if (obj instanceof JimfsFtpFile) {[0m
[0m[[0m[0mdebug[0m] [0m[0m            Path otherPath = ((JimfsFtpFile) obj).path.normalize();[0m
[0m[[0m[0mdebug[0m] [0m[0m            return this.path.normalize().equals(otherPath);[0m
[0m[[0m[0mdebug[0m] [0m[0m        }[0m
[0m[[0m[0mdebug[0m] [0m[0m        return false;[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    @Override[0m
[0m[[0m[0mdebug[0m] [0m[0m    public int hashCode() {[0m
[0m[[0m[0mdebug[0m] [0m[0m        return path.normalize().hashCode();[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/doc-examples/src/main/scala/playground/filesystem/impl/NameEqualsPathFilter.java[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage playground.filesystem.impl;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.io.IOException;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.nio.file.DirectoryStream;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.nio.file.Path;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpublic class NameEqualsPathFilter implements DirectoryStream.Filter<Path> {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private String nameToMatch;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private boolean caseInsensitive = false;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  public NameEqualsPathFilter(final String nameToMatch,[0m
[0m[[0m[0mdebug[0m] [0m[0m                              final boolean caseInsensitive) {[0m
[0m[[0m[0mdebug[0m] [0m[0m    this.nameToMatch = nameToMatch;[0m
[0m[[0m[0mdebug[0m] [0m[0m    this.caseInsensitive = caseInsensitive;[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  @Override[0m
[0m[[0m[0mdebug[0m] [0m[0m  public boolean accept(Path entry) throws IOException {[0m
[0m[[0m[0mdebug[0m] [0m[0m    if (caseInsensitive) {[0m
[0m[[0m[0mdebug[0m] [0m[0m     return entry.getFileName().toString().equalsIgnoreCase(nameToMatch);[0m
[0m[[0m[0mdebug[0m] [0m[0m    } else {[0m
[0m[[0m[0mdebug[0m] [0m[0m      return entry.getFileName().toString().equals(nameToMatch);[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/doc-examples/src/main/java/elastic/KafkaToElasticInJava.java[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage elastic;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m// #imports[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.Done;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.NotUsed;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.actor.ActorSystem;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.actor.Terminated;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.kafka.CommitterSettings;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.kafka.ConsumerSettings;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.kafka.ProducerSettings;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.kafka.Subscriptions;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.kafka.javadsl.Committer;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.kafka.javadsl.Consumer;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.kafka.javadsl.Producer;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.ActorMaterializer;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.Materializer;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.elasticsearch.ElasticsearchSourceSettings;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.elasticsearch.ElasticsearchWriteSettings;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.elasticsearch.WriteMessage;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.elasticsearch.javadsl.ElasticsearchFlow;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.elasticsearch.javadsl.ElasticsearchSource;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.javadsl.Keep;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.javadsl.Sink;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.javadsl.Source;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport com.fasterxml.jackson.annotation.JsonCreator;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport com.fasterxml.jackson.annotation.JsonProperty;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport com.fasterxml.jackson.databind.ObjectMapper;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport com.fasterxml.jackson.databind.ObjectReader;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport com.fasterxml.jackson.databind.ObjectWriter;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.apache.http.HttpHost;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.apache.kafka.clients.consumer.ConsumerConfig;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.apache.kafka.clients.producer.ProducerRecord;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.apache.kafka.common.serialization.IntegerDeserializer;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.apache.kafka.common.serialization.IntegerSerializer;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.apache.kafka.common.serialization.StringDeserializer;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.apache.kafka.common.serialization.StringSerializer;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.elasticsearch.client.RestClient;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.slf4j.Logger;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.slf4j.LoggerFactory;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.testcontainers.containers.KafkaContainer;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.testcontainers.elasticsearch.ElasticsearchContainer;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.io.IOException;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.time.Duration;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.util.Arrays;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.util.List;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.util.concurrent.CompletionStage;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.util.concurrent.TimeUnit;[0m
[0m[[0m[0mdebug[0m] [0m[0m// #imports[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpublic class KafkaToElasticInJava {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private static final Logger log = LoggerFactory.getLogger(KafkaToElasticInJava.class);[0m
[0m[[0m[0mdebug[0m] [0m[0m  private final String elasticsearchAddress;[0m
[0m[[0m[0mdebug[0m] [0m[0m  private final String kafkaBootstrapServers;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private final String topic = "movies-to-elasticsearch";[0m
[0m[[0m[0mdebug[0m] [0m[0m  private final String groupId = "docs-group";[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private final String indexName = "movies";[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  public KafkaToElasticInJava(String elasticsearchAddress, String kafkaBootstrapServers) {[0m
[0m[[0m[0mdebug[0m] [0m[0m    this.elasticsearchAddress = elasticsearchAddress;[0m
[0m[[0m[0mdebug[0m] [0m[0m    this.kafkaBootstrapServers = kafkaBootstrapServers;[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  public[0m
[0m[[0m[0mdebug[0m] [0m[0m  // #es-setup[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  // Type in Elasticsearch (2)[0m
[0m[[0m[0mdebug[0m] [0m[0m  static class Movie {[0m
[0m[[0m[0mdebug[0m] [0m[0m    public final int id;[0m
[0m[[0m[0mdebug[0m] [0m[0m    public final String title;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    @JsonCreator[0m
[0m[[0m[0mdebug[0m] [0m[0m    public Movie(@JsonProperty("id") int id, @JsonProperty("title") String title) {[0m
[0m[[0m[0mdebug[0m] [0m[0m      this.id = id;[0m
[0m[[0m[0mdebug[0m] [0m[0m      this.title = title;[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    @Override[0m
[0m[[0m[0mdebug[0m] [0m[0m    public String toString() {[0m
[0m[[0m[0mdebug[0m] [0m[0m      return "Movie(" + id + ", title=" + title + ")";[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  // Jackson conversion setup (3)[0m
[0m[[0m[0mdebug[0m] [0m[0m  final ObjectMapper mapper = new ObjectMapper().registerModule(new JavaTimeModule());[0m
[0m[[0m[0mdebug[0m] [0m[0m  final ObjectWriter movieWriter = mapper.writerFor(Movie.class);[0m
[0m[[0m[0mdebug[0m] [0m[0m  final ObjectReader movieReader = mapper.readerFor(Movie.class);[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  // #es-setup[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private ActorSystem actorSystem;[0m
[0m[[0m[0mdebug[0m] [0m[0m  private Materializer materializer;[0m
[0m[[0m[0mdebug[0m] [0m[0m  private RestClient elasticsearchClient;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private Consumer.DrainingControl<Done> readFromKafkaToEleasticsearch() {[0m
[0m[[0m[0mdebug[0m] [0m[0m    // #kafka-setup[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    // configure Kafka consumer (1)[0m
[0m[[0m[0mdebug[0m] [0m[0m    ConsumerSettings<Integer, String> kafkaConsumerSettings =[0m
[0m[[0m[0mdebug[0m] [0m[0m        ConsumerSettings.create(actorSystem, new IntegerDeserializer(), new StringDeserializer())[0m
[0m[[0m[0mdebug[0m] [0m[0m            .withBootstrapServers(kafkaBootstrapServers)[0m
[0m[[0m[0mdebug[0m] [0m[0m            .withGroupId(groupId)[0m
[0m[[0m[0mdebug[0m] [0m[0m            .withProperty(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, "earliest")[0m
[0m[[0m[0mdebug[0m] [0m[0m            .withStopTimeout(Duration.ofSeconds(5));[0m
[0m[[0m[0mdebug[0m] [0m[0m    // #kafka-setup[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    // #flow[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    Consumer.DrainingControl<Done> control =[0m
[0m[[0m[0mdebug[0m] [0m[0m        Consumer.committableSource(kafkaConsumerSettings, Subscriptions.topics(topic)) // (5)[0m
[0m[[0m[0mdebug[0m] [0m[0m            .asSourceWithContext(cm -> cm.committableOffset()) // (6)[0m
[0m[[0m[0mdebug[0m] [0m[0m            .map(cm -> cm.record())[0m
[0m[[0m[0mdebug[0m] [0m[0m            .map([0m
[0m[[0m[0mdebug[0m] [0m[0m                consumerRecord -> { // (7)[0m
[0m[[0m[0mdebug[0m] [0m[0m                  Movie movie = movieReader.readValue(consumerRecord.value());[0m
[0m[[0m[0mdebug[0m] [0m[0m                  return WriteMessage.createUpsertMessage(String.valueOf(movie.id), movie);[0m
[0m[[0m[0mdebug[0m] [0m[0m                })[0m
[0m[[0m[0mdebug[0m] [0m[0m            .via([0m
[0m[[0m[0mdebug[0m] [0m[0m                ElasticsearchFlow.createWithContext([0m
[0m[[0m[0mdebug[0m] [0m[0m                    indexName,[0m
[0m[[0m[0mdebug[0m] [0m[0m                    "_doc",[0m
[0m[[0m[0mdebug[0m] [0m[0m                    ElasticsearchWriteSettings.create(),[0m
[0m[[0m[0mdebug[0m] [0m[0m                    elasticsearchClient,[0m
[0m[[0m[0mdebug[0m] [0m[0m                    mapper)) // (8)[0m
[0m[[0m[0mdebug[0m] [0m[0m            .map([0m
[0m[[0m[0mdebug[0m] [0m[0m                writeResult -> { // (9)[0m
[0m[[0m[0mdebug[0m] [0m[0m                  writeResult[0m
[0m[[0m[0mdebug[0m] [0m[0m                      .getError()[0m
[0m[[0m[0mdebug[0m] [0m[0m                      .ifPresent([0m
[0m[[0m[0mdebug[0m] [0m[0m                          errorJson -> {[0m
[0m[[0m[0mdebug[0m] [0m[0m                            throw new RuntimeException([0m
[0m[[0m[0mdebug[0m] [0m[0m                                "Elasticsearch update failed "[0m
[0m[[0m[0mdebug[0m] [0m[0m                                    + writeResult.getErrorReason().orElse(errorJson));[0m
[0m[[0m[0mdebug[0m] [0m[0m                          });[0m
[0m[[0m[0mdebug[0m] [0m[0m                  return NotUsed.notUsed();[0m
[0m[[0m[0mdebug[0m] [0m[0m                })[0m
[0m[[0m[0mdebug[0m] [0m[0m            .asSource() // (10)[0m
[0m[[0m[0mdebug[0m] [0m[0m            .map(pair -> pair.second())[0m
[0m[[0m[0mdebug[0m] [0m[0m            .toMat(Committer.sink(CommitterSettings.create(actorSystem)), Keep.both()) // (11)[0m
[0m[[0m[0mdebug[0m] [0m[0m            .mapMaterializedValue(Consumer::createDrainingControl) // (12)[0m
[0m[[0m[0mdebug[0m] [0m[0m            .run(materializer);[0m
[0m[[0m[0mdebug[0m] [0m[0m    // #flow[0m
[0m[[0m[0mdebug[0m] [0m[0m    return control;[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private CompletionStage<Terminated> run() throws Exception {[0m
[0m[[0m[0mdebug[0m] [0m[0m    actorSystem = ActorSystem.create();[0m
[0m[[0m[0mdebug[0m] [0m[0m    materializer = ActorMaterializer.create(actorSystem);[0m
[0m[[0m[0mdebug[0m] [0m[0m    // #es-setup[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    // Elasticsearch client setup (4)[0m
[0m[[0m[0mdebug[0m] [0m[0m    elasticsearchClient = RestClient.builder(HttpHost.create(elasticsearchAddress)).build();[0m
[0m[[0m[0mdebug[0m] [0m[0m    // #es-setup[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    List<Movie> movies = Arrays.asList(new Movie(23, "Psycho"), new Movie(423, "Citizen Kane"));[0m
[0m[[0m[0mdebug[0m] [0m[0m    CompletionStage<Done> writing = writeToKafka(movies);[0m
[0m[[0m[0mdebug[0m] [0m[0m    writing.toCompletableFuture().get(10, TimeUnit.SECONDS);[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    Consumer.DrainingControl<Done> control = readFromKafkaToEleasticsearch();[0m
[0m[[0m[0mdebug[0m] [0m[0m    TimeUnit.SECONDS.sleep(5);[0m
[0m[[0m[0mdebug[0m] [0m[0m    CompletionStage<Done> copyingFinished = control.drainAndShutdown(actorSystem.dispatcher());[0m
[0m[[0m[0mdebug[0m] [0m[0m    copyingFinished.toCompletableFuture().get(10, TimeUnit.SECONDS);[0m
[0m[[0m[0mdebug[0m] [0m[0m    CompletionStage<List<Movie>> reading = readFromElasticsearch(elasticsearchClient);[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    return reading.thenCompose([0m
[0m[[0m[0mdebug[0m] [0m[0m        ms -> {[0m
[0m[[0m[0mdebug[0m] [0m[0m          ms.forEach(m -> System.out.println("read " + m));[0m
[0m[[0m[0mdebug[0m] [0m[0m          try {[0m
[0m[[0m[0mdebug[0m] [0m[0m            elasticsearchClient.close();[0m
[0m[[0m[0mdebug[0m] [0m[0m          } catch (IOException e) {[0m
[0m[[0m[0mdebug[0m] [0m[0m            log.error(e.toString(), e);[0m
[0m[[0m[0mdebug[0m] [0m[0m          }[0m
[0m[[0m[0mdebug[0m] [0m[0m          actorSystem.terminate();[0m
[0m[[0m[0mdebug[0m] [0m[0m          return actorSystem.getWhenTerminated();[0m
[0m[[0m[0mdebug[0m] [0m[0m        });[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private CompletionStage<Done> writeToKafka(List<Movie> movies) {[0m
[0m[[0m[0mdebug[0m] [0m[0m    ProducerSettings<Integer, String> kafkaProducerSettings =[0m
[0m[[0m[0mdebug[0m] [0m[0m        ProducerSettings.create(actorSystem, new IntegerSerializer(), new StringSerializer())[0m
[0m[[0m[0mdebug[0m] [0m[0m            .withBootstrapServers(kafkaBootstrapServers);[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    CompletionStage<Done> producing =[0m
[0m[[0m[0mdebug[0m] [0m[0m        Source.from(movies)[0m
[0m[[0m[0mdebug[0m] [0m[0m            .map([0m
[0m[[0m[0mdebug[0m] [0m[0m                movie -> {[0m
[0m[[0m[0mdebug[0m] [0m[0m                  log.debug("producing {}", movie);[0m
[0m[[0m[0mdebug[0m] [0m[0m                  String json = movieWriter.writeValueAsString(movie);[0m
[0m[[0m[0mdebug[0m] [0m[0m                  return new ProducerRecord<>(topic, movie.id, json);[0m
[0m[[0m[0mdebug[0m] [0m[0m                })[0m
[0m[[0m[0mdebug[0m] [0m[0m            .runWith(Producer.plainSink(kafkaProducerSettings), materializer);[0m
[0m[[0m[0mdebug[0m] [0m[0m    producing.thenAccept(s -> log.info("Producing finished"));[0m
[0m[[0m[0mdebug[0m] [0m[0m    return producing;[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private CompletionStage<List<Movie>> readFromElasticsearch(RestClient elasticsearchClient) {[0m
[0m[[0m[0mdebug[0m] [0m[0m    CompletionStage<List<Movie>> reading =[0m
[0m[[0m[0mdebug[0m] [0m[0m        ElasticsearchSource.typed([0m
[0m[[0m[0mdebug[0m] [0m[0m                indexName,[0m
[0m[[0m[0mdebug[0m] [0m[0m                "_doc",[0m
[0m[[0m[0mdebug[0m] [0m[0m                "{\"match_all\": {}}",[0m
[0m[[0m[0mdebug[0m] [0m[0m                ElasticsearchSourceSettings.create(),[0m
[0m[[0m[0mdebug[0m] [0m[0m                elasticsearchClient,[0m
[0m[[0m[0mdebug[0m] [0m[0m                Movie.class)[0m
[0m[[0m[0mdebug[0m] [0m[0m            .map(readResult -> readResult.source())[0m
[0m[[0m[0mdebug[0m] [0m[0m            .runWith(Sink.seq(), materializer);[0m
[0m[[0m[0mdebug[0m] [0m[0m    reading.thenAccept([0m
[0m[[0m[0mdebug[0m] [0m[0m        non -> {[0m
[0m[[0m[0mdebug[0m] [0m[0m          log.info("Reading finished");[0m
[0m[[0m[0mdebug[0m] [0m[0m        });[0m
[0m[[0m[0mdebug[0m] [0m[0m    return reading;[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  public static void main(String[] args) throws Exception {[0m
[0m[[0m[0mdebug[0m] [0m[0m    ElasticsearchContainer elasticsearchContainer =[0m
[0m[[0m[0mdebug[0m] [0m[0m        new ElasticsearchContainer("docker.elastic.co/elasticsearch/elasticsearch-oss:6.4.3");[0m
[0m[[0m[0mdebug[0m] [0m[0m    elasticsearchContainer.start();[0m
[0m[[0m[0mdebug[0m] [0m[0m    String elasticsearchAddress = elasticsearchContainer.getHttpHostAddress();[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    KafkaContainer kafka = new KafkaContainer("5.1.2"); // contains Kafka 2.1.x[0m
[0m[[0m[0mdebug[0m] [0m[0m    kafka.start();[0m
[0m[[0m[0mdebug[0m] [0m[0m    String kafkaBootstrapServers = kafka.getBootstrapServers();[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    CompletionStage<Terminated> run =[0m
[0m[[0m[0mdebug[0m] [0m[0m        new KafkaToElasticInJava(elasticsearchAddress, kafkaBootstrapServers).run();[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    run.thenAccept([0m
[0m[[0m[0mdebug[0m] [0m[0m        res -> {[0m
[0m[[0m[0mdebug[0m] [0m[0m          kafka.stop();[0m
[0m[[0m[0mdebug[0m] [0m[0m          elasticsearchContainer.stop();[0m
[0m[[0m[0mdebug[0m] [0m[0m        });[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/doc-examples/src/main/java/elastic/FetchUsingSlickAndStreamIntoElasticInJava.java[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage elastic;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m// #sample[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.Done;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.actor.ActorSystem;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.ActorMaterializer;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.Materializer;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.elasticsearch.ElasticsearchWriteSettings;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.elasticsearch.WriteMessage;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.elasticsearch.javadsl.ElasticsearchSink;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.apache.http.HttpHost;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.elasticsearch.client.RestClient;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.slick.javadsl.Slick;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.slick.javadsl.SlickRow;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.slick.javadsl.SlickSession;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport com.fasterxml.jackson.annotation.JsonCreator;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport com.fasterxml.jackson.annotation.JsonProperty;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport com.fasterxml.jackson.databind.ObjectMapper;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.io.IOException;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.util.concurrent.CompletionStage;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m// #sample[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.codelibs.elasticsearch.runner.ElasticsearchClusterRunner;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport playground.ElasticSearchEmbedded;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport playground.elastic.ElasticsearchMock;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpublic class FetchUsingSlickAndStreamIntoElasticInJava {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  public static void main(String[] args) {[0m
[0m[[0m[0mdebug[0m] [0m[0m    FetchUsingSlickAndStreamIntoElasticInJava me = new FetchUsingSlickAndStreamIntoElasticInJava();[0m
[0m[[0m[0mdebug[0m] [0m[0m    me.run();[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  public[0m
[0m[[0m[0mdebug[0m] [0m[0m  // #sample[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  static class Movie { // (3)[0m
[0m[[0m[0mdebug[0m] [0m[0m    public final int id;[0m
[0m[[0m[0mdebug[0m] [0m[0m    public final String title;[0m
[0m[[0m[0mdebug[0m] [0m[0m    public final String genre;[0m
[0m[[0m[0mdebug[0m] [0m[0m    public final double gross;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    @JsonCreator[0m
[0m[[0m[0mdebug[0m] [0m[0m    public Movie([0m
[0m[[0m[0mdebug[0m] [0m[0m        @JsonProperty("id") int id,[0m
[0m[[0m[0mdebug[0m] [0m[0m        @JsonProperty("title") String title,[0m
[0m[[0m[0mdebug[0m] [0m[0m        @JsonProperty("genre") String genre,[0m
[0m[[0m[0mdebug[0m] [0m[0m        @JsonProperty("gross") double gross) {[0m
[0m[[0m[0mdebug[0m] [0m[0m      this.id = id;[0m
[0m[[0m[0mdebug[0m] [0m[0m      this.title = title;[0m
[0m[[0m[0mdebug[0m] [0m[0m      this.genre = genre;[0m
[0m[[0m[0mdebug[0m] [0m[0m      this.gross = gross;[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  // #sample[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  void run() {[0m
[0m[[0m[0mdebug[0m] [0m[0m    ElasticsearchClusterRunner runner = ElasticSearchEmbedded.startElasticInstance();[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    // #sample[0m
[0m[[0m[0mdebug[0m] [0m[0m    ActorSystem system = ActorSystem.create();[0m
[0m[[0m[0mdebug[0m] [0m[0m    Materializer materializer = ActorMaterializer.create(system);[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    SlickSession session = SlickSession.forConfig("slick-h2-mem"); // (1)[0m
[0m[[0m[0mdebug[0m] [0m[0m    system.registerOnTermination(session::close);[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    // #sample[0m
[0m[[0m[0mdebug[0m] [0m[0m    ElasticsearchMock.populateDataForTable(session, materializer);[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    // #sample[0m
[0m[[0m[0mdebug[0m] [0m[0m    RestClient elasticSearchClient =[0m
[0m[[0m[0mdebug[0m] [0m[0m        RestClient.builder(new HttpHost("localhost", 9201)).build(); // (4)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    final ObjectMapper objectToJsonMapper = new ObjectMapper(); // (5)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    final CompletionStage<Done> done =[0m
[0m[[0m[0mdebug[0m] [0m[0m        Slick.source( // (6)[0m
[0m[[0m[0mdebug[0m] [0m[0m                session,[0m
[0m[[0m[0mdebug[0m] [0m[0m                "SELECT * FROM MOVIE",[0m
[0m[[0m[0mdebug[0m] [0m[0m                (SlickRow row) ->[0m
[0m[[0m[0mdebug[0m] [0m[0m                    new Movie(row.nextInt(), row.nextString(), row.nextString(), row.nextDouble()))[0m
[0m[[0m[0mdebug[0m] [0m[0m            .map(movie -> WriteMessage.createIndexMessage(String.valueOf(movie.id), movie)) // (8)[0m
[0m[[0m[0mdebug[0m] [0m[0m            .runWith([0m
[0m[[0m[0mdebug[0m] [0m[0m                ElasticsearchSink.create( // (9)[0m
[0m[[0m[0mdebug[0m] [0m[0m                    "movie",[0m
[0m[[0m[0mdebug[0m] [0m[0m                    "boxoffice",[0m
[0m[[0m[0mdebug[0m] [0m[0m                    ElasticsearchWriteSettings.Default(),[0m
[0m[[0m[0mdebug[0m] [0m[0m                    elasticSearchClient,[0m
[0m[[0m[0mdebug[0m] [0m[0m                    objectToJsonMapper),[0m
[0m[[0m[0mdebug[0m] [0m[0m                materializer);[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    done.thenRunAsync([0m
[0m[[0m[0mdebug[0m] [0m[0m            () -> {[0m
[0m[[0m[0mdebug[0m] [0m[0m              try {[0m
[0m[[0m[0mdebug[0m] [0m[0m                elasticSearchClient.close(); // (10)[0m
[0m[[0m[0mdebug[0m] [0m[0m              } catch (IOException ignored) {[0m
[0m[[0m[0mdebug[0m] [0m[0m                ignored.printStackTrace();[0m
[0m[[0m[0mdebug[0m] [0m[0m              }[0m
[0m[[0m[0mdebug[0m] [0m[0m            },[0m
[0m[[0m[0mdebug[0m] [0m[0m            system.dispatcher())[0m
[0m[[0m[0mdebug[0m] [0m[0m        // #sample[0m
[0m[[0m[0mdebug[0m] [0m[0m        .thenRunAsync([0m
[0m[[0m[0mdebug[0m] [0m[0m            () -> {[0m
[0m[[0m[0mdebug[0m] [0m[0m              try {[0m
[0m[[0m[0mdebug[0m] [0m[0m                runner.close();[0m
[0m[[0m[0mdebug[0m] [0m[0m              } catch (IOException ignored) {[0m
[0m[[0m[0mdebug[0m] [0m[0m                ignored.printStackTrace();[0m
[0m[[0m[0mdebug[0m] [0m[0m              }[0m
[0m[[0m[0mdebug[0m] [0m[0m              runner.clean();[0m
[0m[[0m[0mdebug[0m] [0m[0m              system.terminate();[0m
[0m[[0m[0mdebug[0m] [0m[0m            });[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/doc-examples/src/main/java/ftpsamples/FtpToFileExample.java[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage ftpsamples;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m// #sample[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.japi.Pair;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.IOResult;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.ftp.FtpSettings;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.ftp.javadsl.Ftp;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.javadsl.FileIO;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.javadsl.Sink;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.apache.ftpserver.FtpServer;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.apache.mina.util.AvailablePortFinder;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport playground.ActorSystemAvailable;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport playground.FtpServerEmbedded;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport playground.filesystem.FileSystemMock;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.net.InetAddress;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.net.UnknownHostException;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.nio.file.Path;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.nio.file.Paths;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.util.List;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.util.concurrent.CompletionStage;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.util.stream.Collectors;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m// #sample[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpublic class FtpToFileExample extends ActorSystemAvailable {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private void run() throws UnknownHostException {[0m
[0m[[0m[0mdebug[0m] [0m[0m    final FileSystemMock ftpFileSystem = new FileSystemMock();[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    final int port = AvailablePortFinder.getNextAvailable(21000);[0m
[0m[[0m[0mdebug[0m] [0m[0m    final FtpServer ftpServer = FtpServerEmbedded.start(ftpFileSystem.fileSystem, port);[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    ftpFileSystem.generateFiles(30, 10, "/home/anonymous");[0m
[0m[[0m[0mdebug[0m] [0m[0m    ftpFileSystem.putFileOnFtp("/home/anonymous", "hello.txt");[0m
[0m[[0m[0mdebug[0m] [0m[0m    ftpFileSystem.putFileOnFtp("/home/anonymous", "hello2.txt");[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    // #sample[0m
[0m[[0m[0mdebug[0m] [0m[0m    final FtpSettings ftpSettings =[0m
[0m[[0m[0mdebug[0m] [0m[0m        FtpSettings.create(InetAddress.getByName("localhost")).withPort(port);[0m
[0m[[0m[0mdebug[0m] [0m[0m    final Integer parallelism = 5;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    // #sample[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    final Path targetDir = Paths.get("target/");[0m
[0m[[0m[0mdebug[0m] [0m[0m    final CompletionStage<List<Pair<String, IOResult>>> fetchedFiles =[0m
[0m[[0m[0mdebug[0m] [0m[0m        // #sample[0m
[0m[[0m[0mdebug[0m] [0m[0m        Ftp.ls("/", ftpSettings) // : FtpFile (1)[0m
[0m[[0m[0mdebug[0m] [0m[0m            .filter(ftpFile -> ftpFile.isFile()) // : FtpFile (2)[0m
[0m[[0m[0mdebug[0m] [0m[0m            .mapAsyncUnordered([0m
[0m[[0m[0mdebug[0m] [0m[0m                parallelism,[0m
[0m[[0m[0mdebug[0m] [0m[0m                ftpFile -> { // (3)[0m
[0m[[0m[0mdebug[0m] [0m[0m                  final Path localPath = targetDir.resolve("." + ftpFile.path());[0m
[0m[[0m[0mdebug[0m] [0m[0m                  final CompletionStage<IOResult> fetchFile =[0m
[0m[[0m[0mdebug[0m] [0m[0m                      Ftp.fromPath(ftpFile.path(), ftpSettings)[0m
[0m[[0m[0mdebug[0m] [0m[0m                          .runWith(FileIO.toPath(localPath), actorMaterializer()); // (4)[0m
[0m[[0m[0mdebug[0m] [0m[0m                  return fetchFile.thenApply([0m
[0m[[0m[0mdebug[0m] [0m[0m                      ioResult -> // (5)[0m
[0m[[0m[0mdebug[0m] [0m[0m                      Pair.create(ftpFile.path(), ioResult));[0m
[0m[[0m[0mdebug[0m] [0m[0m                }) // : (String, IOResult)[0m
[0m[[0m[0mdebug[0m] [0m[0m            .runWith(Sink.seq(), actorMaterializer()); // (6)[0m
[0m[[0m[0mdebug[0m] [0m[0m    // #sample[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    fetchedFiles[0m
[0m[[0m[0mdebug[0m] [0m[0m        .thenApply([0m
[0m[[0m[0mdebug[0m] [0m[0m            files ->[0m
[0m[[0m[0mdebug[0m] [0m[0m                files.stream()[0m
[0m[[0m[0mdebug[0m] [0m[0m                    .filter(pathResult -> !pathResult.second().wasSuccessful())[0m
[0m[[0m[0mdebug[0m] [0m[0m                    .collect(Collectors.toList()))[0m
[0m[[0m[0mdebug[0m] [0m[0m        .whenComplete([0m
[0m[[0m[0mdebug[0m] [0m[0m            (res, ex) -> {[0m
[0m[[0m[0mdebug[0m] [0m[0m              if (res != null) {[0m
[0m[[0m[0mdebug[0m] [0m[0m                if (res.isEmpty()) {[0m
[0m[[0m[0mdebug[0m] [0m[0m                  System.out.println("all files fetched");[0m
[0m[[0m[0mdebug[0m] [0m[0m                } else {[0m
[0m[[0m[0mdebug[0m] [0m[0m                  System.out.println("errors occured: " + res.toString());[0m
[0m[[0m[0mdebug[0m] [0m[0m                }[0m
[0m[[0m[0mdebug[0m] [0m[0m              } else {[0m
[0m[[0m[0mdebug[0m] [0m[0m                System.out.println("the stream failed");[0m
[0m[[0m[0mdebug[0m] [0m[0m              }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m              actorSystem().terminate();[0m
[0m[[0m[0mdebug[0m] [0m[0m              actorSystem().getWhenTerminated().thenAccept(t -> ftpServer.stop());[0m
[0m[[0m[0mdebug[0m] [0m[0m            });[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  public static void main(String[] args) throws UnknownHostException {[0m
[0m[[0m[0mdebug[0m] [0m[0m    new FtpToFileExample().run();[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/doc-examples/src/main/java/csvsamples/FetchHttpEvery30SecondsAndConvertCsvToJsonToKafkaInJava.java[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage csvsamples;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m// #sample[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.Done;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.actor.ActorSystem;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.actor.Cancellable;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.http.javadsl.Http;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.http.javadsl.model.HttpRequest;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.http.javadsl.model.HttpResponse;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.http.javadsl.model.MediaRanges;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.http.javadsl.model.StatusCodes;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.http.javadsl.model.headers.Accept;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.japi.Pair;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.kafka.ConsumerSettings;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.kafka.ProducerSettings;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.kafka.Subscriptions;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.kafka.javadsl.Consumer;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.kafka.javadsl.Producer;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.ActorMaterializer;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.Materializer;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.csv.javadsl.CsvParsing;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.csv.javadsl.CsvToMap;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.javadsl.Keep;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.javadsl.Sink;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.javadsl.Source;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.util.ByteString;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport com.fasterxml.jackson.core.JsonFactory;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport com.fasterxml.jackson.core.JsonGenerator;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.apache.kafka.clients.consumer.ConsumerConfig;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.apache.kafka.clients.consumer.ConsumerRecord;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.apache.kafka.clients.producer.ProducerRecord;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.apache.kafka.common.serialization.StringDeserializer;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.apache.kafka.common.serialization.StringSerializer;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.io.IOException;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.io.StringWriter;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.time.Duration;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.util.Collections;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.util.HashMap;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.util.Map;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.util.concurrent.CompletionStage;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.util.concurrent.Executor;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.util.concurrent.Executors;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m// #sample[0m
[0m[[0m[0mdebug[0m] [0m[0mimport playground.KafkaEmbedded;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpublic class FetchHttpEvery30SecondsAndConvertCsvToJsonToKafkaInJava {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  public static void main(String[] args) throws Exception {[0m
[0m[[0m[0mdebug[0m] [0m[0m    FetchHttpEvery30SecondsAndConvertCsvToJsonToKafkaInJava me =[0m
[0m[[0m[0mdebug[0m] [0m[0m        new FetchHttpEvery30SecondsAndConvertCsvToJsonToKafkaInJava();[0m
[0m[[0m[0mdebug[0m] [0m[0m    me.run();[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  // #helper[0m
[0m[[0m[0mdebug[0m] [0m[0m  final HttpRequest httpRequest =[0m
[0m[[0m[0mdebug[0m] [0m[0m      HttpRequest.create([0m
[0m[[0m[0mdebug[0m] [0m[0m              "https://www.nasdaq.com/screening/companies-by-name.aspx?exchange=NASDAQ&render=download")[0m
[0m[[0m[0mdebug[0m] [0m[0m          .withHeaders(Collections.singletonList(Accept.create(MediaRanges.ALL_TEXT)));[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private Source<ByteString, ?> extractEntityData(HttpResponse httpResponse) {[0m
[0m[[0m[0mdebug[0m] [0m[0m    if (httpResponse.status() == StatusCodes.OK) {[0m
[0m[[0m[0mdebug[0m] [0m[0m      return httpResponse.entity().getDataBytes();[0m
[0m[[0m[0mdebug[0m] [0m[0m    } else {[0m
[0m[[0m[0mdebug[0m] [0m[0m      return Source.failed(new RuntimeException("illegal response " + httpResponse));[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private Map<String, String> cleanseCsvData(Map<String, ByteString> map) {[0m
[0m[[0m[0mdebug[0m] [0m[0m    Map<String, String> out = new HashMap<>(map.size());[0m
[0m[[0m[0mdebug[0m] [0m[0m    map.forEach([0m
[0m[[0m[0mdebug[0m] [0m[0m        (key, value) -> {[0m
[0m[[0m[0mdebug[0m] [0m[0m          if (!key.isEmpty()) out.put(key, value.utf8String());[0m
[0m[[0m[0mdebug[0m] [0m[0m        });[0m
[0m[[0m[0mdebug[0m] [0m[0m    return out;[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private final JsonFactory jsonFactory = new JsonFactory();[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private String toJson(Map<String, String> map) throws Exception {[0m
[0m[[0m[0mdebug[0m] [0m[0m    StringWriter sw = new StringWriter();[0m
[0m[[0m[0mdebug[0m] [0m[0m    JsonGenerator generator = jsonFactory.createGenerator(sw);[0m
[0m[[0m[0mdebug[0m] [0m[0m    generator.writeStartObject();[0m
[0m[[0m[0mdebug[0m] [0m[0m    map.forEach([0m
[0m[[0m[0mdebug[0m] [0m[0m        (key, value) -> {[0m
[0m[[0m[0mdebug[0m] [0m[0m          try {[0m
[0m[[0m[0mdebug[0m] [0m[0m            generator.writeStringField(key, value);[0m
[0m[[0m[0mdebug[0m] [0m[0m          } catch (IOException e) {[0m
[0m[[0m[0mdebug[0m] [0m[0m            throw new RuntimeException(e);[0m
[0m[[0m[0mdebug[0m] [0m[0m          }[0m
[0m[[0m[0mdebug[0m] [0m[0m        });[0m
[0m[[0m[0mdebug[0m] [0m[0m    generator.writeEndObject();[0m
[0m[[0m[0mdebug[0m] [0m[0m    generator.close();[0m
[0m[[0m[0mdebug[0m] [0m[0m    return sw.toString();[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m  // #helper[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private void run() throws Exception {[0m
[0m[[0m[0mdebug[0m] [0m[0m    ActorSystem system = ActorSystem.create();[0m
[0m[[0m[0mdebug[0m] [0m[0m    Materializer materializer = ActorMaterializer.create(system);[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    int kafkaPort = 19000;[0m
[0m[[0m[0mdebug[0m] [0m[0m    KafkaEmbedded.start(kafkaPort);[0m
[0m[[0m[0mdebug[0m] [0m[0m    ProducerSettings<String, String> kafkaProducerSettings =[0m
[0m[[0m[0mdebug[0m] [0m[0m        ProducerSettings.create(system, new StringSerializer(), new StringSerializer())[0m
[0m[[0m[0mdebug[0m] [0m[0m            .withBootstrapServers(String.format("localhost:%d", kafkaPort));[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    Http http = Http.get(system);[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    Pair<Cancellable, CompletionStage<Done>> stagePair =[0m
[0m[[0m[0mdebug[0m] [0m[0m        // #sample[0m
[0m[[0m[0mdebug[0m] [0m[0m        Source.tick([0m
[0m[[0m[0mdebug[0m] [0m[0m                Duration.ofSeconds(1),[0m
[0m[[0m[0mdebug[0m] [0m[0m                Duration.ofSeconds(30),[0m
[0m[[0m[0mdebug[0m] [0m[0m                httpRequest) // : HttpRequest             (1)[0m
[0m[[0m[0mdebug[0m] [0m[0m            .mapAsync(1, http::singleRequest) // : HttpResponse            (2)[0m
[0m[[0m[0mdebug[0m] [0m[0m            .flatMapConcat(this::extractEntityData) // : ByteString              (3)[0m
[0m[[0m[0mdebug[0m] [0m[0m            .via(CsvParsing.lineScanner()) // : List<ByteString>        (4)[0m
[0m[[0m[0mdebug[0m] [0m[0m            .via(CsvToMap.toMap()) // : Map<String, ByteString> (5)[0m
[0m[[0m[0mdebug[0m] [0m[0m            .map(this::cleanseCsvData) // : Map<String, String>     (6)[0m
[0m[[0m[0mdebug[0m] [0m[0m            .map(this::toJson) // : String                  (7)[0m
[0m[[0m[0mdebug[0m] [0m[0m            .map([0m
[0m[[0m[0mdebug[0m] [0m[0m                elem ->[0m
[0m[[0m[0mdebug[0m] [0m[0m                    new ProducerRecord<String, String>([0m
[0m[[0m[0mdebug[0m] [0m[0m                        "topic1", elem) // : Kafka ProducerRecord    (8)[0m
[0m[[0m[0mdebug[0m] [0m[0m                )[0m
[0m[[0m[0mdebug[0m] [0m[0m            .toMat(Producer.plainSink(kafkaProducerSettings), Keep.both())[0m
[0m[[0m[0mdebug[0m] [0m[0m            .run(materializer);[0m
[0m[[0m[0mdebug[0m] [0m[0m    // #sample[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    ConsumerSettings<String, String> kafkaConsumerSettings =[0m
[0m[[0m[0mdebug[0m] [0m[0m        ConsumerSettings.create(system, new StringDeserializer(), new StringDeserializer())[0m
[0m[[0m[0mdebug[0m] [0m[0m            .withBootstrapServers(String.format("localhost:%d", kafkaPort))[0m
[0m[[0m[0mdebug[0m] [0m[0m            .withGroupId("topic1")[0m
[0m[[0m[0mdebug[0m] [0m[0m            .withProperty(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, "earliest");[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    Consumer.DrainingControl<Done> control =[0m
[0m[[0m[0mdebug[0m] [0m[0m        Consumer.atMostOnceSource(kafkaConsumerSettings, Subscriptions.topics("topic1"))[0m
[0m[[0m[0mdebug[0m] [0m[0m            .map(ConsumerRecord::value)[0m
[0m[[0m[0mdebug[0m] [0m[0m            .toMat(Sink.foreach(System.out::println), Keep.both())[0m
[0m[[0m[0mdebug[0m] [0m[0m            .mapMaterializedValue(Consumer::createDrainingControl)[0m
[0m[[0m[0mdebug[0m] [0m[0m            .run(materializer);[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    Cancellable tick = stagePair.first();[0m
[0m[[0m[0mdebug[0m] [0m[0m    CompletionStage<Done> streamCompletion = stagePair.second();[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    Thread.sleep(20 * 1000);[0m
[0m[[0m[0mdebug[0m] [0m[0m    tick.cancel();[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    Executor ec = Executors.newSingleThreadExecutor();[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    streamCompletion[0m
[0m[[0m[0mdebug[0m] [0m[0m        .thenApplyAsync(done -> control.drainAndShutdown(ec))[0m
[0m[[0m[0mdebug[0m] [0m[0m        .thenAccept([0m
[0m[[0m[0mdebug[0m] [0m[0m            done -> {[0m
[0m[[0m[0mdebug[0m] [0m[0m              KafkaEmbedded.stop();[0m
[0m[[0m[0mdebug[0m] [0m[0m              system.terminate();[0m
[0m[[0m[0mdebug[0m] [0m[0m            });[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/doc-examples/src/main/java/jms/javasamples/JmsToWebSocket.java[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage jms.javasamples;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m// #sample[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.Done;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.actor.ActorSystem;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.http.javadsl.Http;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.http.javadsl.model.StatusCodes;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.http.javadsl.model.ws.Message;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.http.javadsl.model.ws.TextMessage;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.http.javadsl.model.ws.WebSocketRequest;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.http.javadsl.model.ws.WebSocketUpgradeResponse;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.japi.Pair;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.ActorMaterializer;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.Materializer;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.jms.JmsConsumerSettings;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.jms.JmsProducerSettings;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.jms.javadsl.JmsConsumer;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.jms.javadsl.JmsConsumerControl;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.jms.javadsl.JmsProducer;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.javadsl.Flow;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.javadsl.Keep;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.javadsl.Sink;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.javadsl.Source;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport playground.ActiveMqBroker;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport playground.WebServer;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.concurrent.ExecutionContext;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport javax.jms.ConnectionFactory;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.util.Arrays;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.util.List;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.util.concurrent.CompletableFuture;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.util.concurrent.CompletionStage;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m// #sample[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpublic class JmsToWebSocket {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  public static void main(String[] args) throws Exception {[0m
[0m[[0m[0mdebug[0m] [0m[0m    JmsToWebSocket me = new JmsToWebSocket();[0m
[0m[[0m[0mdebug[0m] [0m[0m    me.run();[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private final ActorSystem system = ActorSystem.create();[0m
[0m[[0m[0mdebug[0m] [0m[0m  private final Materializer materializer = ActorMaterializer.create(system);[0m
[0m[[0m[0mdebug[0m] [0m[0m  private final ExecutionContext ec = system.dispatcher();[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private void enqueue(ConnectionFactory connectionFactory, String... msgs) {[0m
[0m[[0m[0mdebug[0m] [0m[0m    Sink<String, ?> jmsSink =[0m
[0m[[0m[0mdebug[0m] [0m[0m        JmsProducer.textSink([0m
[0m[[0m[0mdebug[0m] [0m[0m            JmsProducerSettings.create(system, connectionFactory).withQueue("test"));[0m
[0m[[0m[0mdebug[0m] [0m[0m    Source.from(Arrays.asList(msgs)).runWith(jmsSink, materializer);[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private void run() throws Exception {[0m
[0m[[0m[0mdebug[0m] [0m[0m    ActiveMqBroker activeMqBroker = new ActiveMqBroker();[0m
[0m[[0m[0mdebug[0m] [0m[0m    activeMqBroker.start();[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    WebServer webserver = new WebServer();[0m
[0m[[0m[0mdebug[0m] [0m[0m    webserver.start("localhost", 8080);[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    ConnectionFactory connectionFactory = activeMqBroker.createConnectionFactory();[0m
[0m[[0m[0mdebug[0m] [0m[0m    enqueue(connectionFactory, "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k");[0m
[0m[[0m[0mdebug[0m] [0m[0m    // #sample[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    final Http http = Http.get(system);[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    Source<String, JmsConsumerControl> jmsSource = // (1)[0m
[0m[[0m[0mdebug[0m] [0m[0m        JmsConsumer.textSource([0m
[0m[[0m[0mdebug[0m] [0m[0m            JmsConsumerSettings.create(system, connectionFactory)[0m
[0m[[0m[0mdebug[0m] [0m[0m                .withBufferSize(10)[0m
[0m[[0m[0mdebug[0m] [0m[0m                .withQueue("test"));[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    Flow<Message, Message, CompletionStage<WebSocketUpgradeResponse>> webSocketFlow = // (2)[0m
[0m[[0m[0mdebug[0m] [0m[0m        http.webSocketClientFlow(WebSocketRequest.create("ws://localhost:8080/webSocket/ping"));[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    int parallelism = 4;[0m
[0m[[0m[0mdebug[0m] [0m[0m    Pair<Pair<JmsConsumerControl, CompletionStage<WebSocketUpgradeResponse>>, CompletionStage<Done>>[0m
[0m[[0m[0mdebug[0m] [0m[0m        pair =[0m
[0m[[0m[0mdebug[0m] [0m[0m            jmsSource // : String[0m
[0m[[0m[0mdebug[0m] [0m[0m                .map([0m
[0m[[0m[0mdebug[0m] [0m[0m                    s -> {[0m
[0m[[0m[0mdebug[0m] [0m[0m                      Message msg = TextMessage.create(s);[0m
[0m[[0m[0mdebug[0m] [0m[0m                      return msg;[0m
[0m[[0m[0mdebug[0m] [0m[0m                    }) // : Message           (3)[0m
[0m[[0m[0mdebug[0m] [0m[0m                .viaMat(webSocketFlow, Keep.both()) // : Message           (4)[0m
[0m[[0m[0mdebug[0m] [0m[0m                .mapAsync(parallelism, this::wsMessageToString) // : String            (5)[0m
[0m[[0m[0mdebug[0m] [0m[0m                .map(s -> "client received: " + s) // : String            (6)[0m
[0m[[0m[0mdebug[0m] [0m[0m                .toMat(Sink.foreach(System.out::println), Keep.both()) //                    (7)[0m
[0m[[0m[0mdebug[0m] [0m[0m                .run(materializer);[0m
[0m[[0m[0mdebug[0m] [0m[0m    // #sample[0m
[0m[[0m[0mdebug[0m] [0m[0m    JmsConsumerControl runningSource = pair.first().first();[0m
[0m[[0m[0mdebug[0m] [0m[0m    CompletionStage<WebSocketUpgradeResponse> wsUpgradeResponse = pair.first().second();[0m
[0m[[0m[0mdebug[0m] [0m[0m    CompletionStage<Done> streamCompletion = pair.second();[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    wsUpgradeResponse[0m
[0m[[0m[0mdebug[0m] [0m[0m        .thenApply([0m
[0m[[0m[0mdebug[0m] [0m[0m            upgrade -> {[0m
[0m[[0m[0mdebug[0m] [0m[0m              if (upgrade.response().status() == StatusCodes.SWITCHING_PROTOCOLS) {[0m
[0m[[0m[0mdebug[0m] [0m[0m                return "WebSocket established";[0m
[0m[[0m[0mdebug[0m] [0m[0m              } else {[0m
[0m[[0m[0mdebug[0m] [0m[0m                throw new RuntimeException("Connection failed: " + upgrade.response().status());[0m
[0m[[0m[0mdebug[0m] [0m[0m              }[0m
[0m[[0m[0mdebug[0m] [0m[0m            })[0m
[0m[[0m[0mdebug[0m] [0m[0m        .thenAccept(System.out::println);[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    Thread.sleep(2 * 1000);[0m
[0m[[0m[0mdebug[0m] [0m[0m    runningSource.shutdown();[0m
[0m[[0m[0mdebug[0m] [0m[0m    streamCompletion.thenAccept(res -> system.terminate());[0m
[0m[[0m[0mdebug[0m] [0m[0m    system[0m
[0m[[0m[0mdebug[0m] [0m[0m        .getWhenTerminated()[0m
[0m[[0m[0mdebug[0m] [0m[0m        .thenAccept([0m
[0m[[0m[0mdebug[0m] [0m[0m            t -> {[0m
[0m[[0m[0mdebug[0m] [0m[0m              webserver.stop();[0m
[0m[[0m[0mdebug[0m] [0m[0m              activeMqBroker.stop(ec);[0m
[0m[[0m[0mdebug[0m] [0m[0m            });[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  // #sample[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /** Convert potentially chunked WebSocket Message to a string. */[0m
[0m[[0m[0mdebug[0m] [0m[0m  private CompletionStage<String> wsMessageToString(Message msg) {[0m
[0m[[0m[0mdebug[0m] [0m[0m    if (msg.isText()) {[0m
[0m[[0m[0mdebug[0m] [0m[0m      TextMessage tMsg = msg.asTextMessage();[0m
[0m[[0m[0mdebug[0m] [0m[0m      if (tMsg.isStrict()) {[0m
[0m[[0m[0mdebug[0m] [0m[0m        return CompletableFuture.completedFuture(tMsg.getStrictText());[0m
[0m[[0m[0mdebug[0m] [0m[0m      } else {[0m
[0m[[0m[0mdebug[0m] [0m[0m        CompletionStage<List<String>> strings =[0m
[0m[[0m[0mdebug[0m] [0m[0m            tMsg.getStreamedText().runWith(Sink.seq(), materializer);[0m
[0m[[0m[0mdebug[0m] [0m[0m        return strings.thenApply(list -> String.join("", list));[0m
[0m[[0m[0mdebug[0m] [0m[0m      }[0m
[0m[[0m[0mdebug[0m] [0m[0m    } else {[0m
[0m[[0m[0mdebug[0m] [0m[0m      return CompletableFuture.completedFuture(msg.toString());[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m  // #sample[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/doc-examples/src/main/java/jms/javasamples/JmsToHttpGet.java[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage jms.javasamples;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m// #sample[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.Done;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.actor.ActorSystem;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.http.javadsl.Http;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.http.javadsl.model.HttpRequest;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.japi.Pair;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.ActorMaterializer;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.Materializer;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.jms.JmsConsumerSettings;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.jms.JmsProducerSettings;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.jms.javadsl.JmsConsumer;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.jms.javadsl.JmsConsumerControl;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.jms.javadsl.JmsProducer;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.javadsl.Keep;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.javadsl.Sink;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.javadsl.Source;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.util.ByteString;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport playground.ActiveMqBroker;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport playground.WebServer;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.concurrent.ExecutionContext;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport javax.jms.ConnectionFactory;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.util.Arrays;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.util.concurrent.CompletionStage;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m// #sample[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpublic class JmsToHttpGet {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  public static void main(String[] args) throws Exception {[0m
[0m[[0m[0mdebug[0m] [0m[0m    JmsToHttpGet me = new JmsToHttpGet();[0m
[0m[[0m[0mdebug[0m] [0m[0m    me.run();[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private final ActorSystem system = ActorSystem.create();[0m
[0m[[0m[0mdebug[0m] [0m[0m  private final Materializer materializer = ActorMaterializer.create(system);[0m
[0m[[0m[0mdebug[0m] [0m[0m  private final ExecutionContext ec = system.dispatcher();[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private void enqueue(ConnectionFactory connectionFactory, String... msgs) {[0m
[0m[[0m[0mdebug[0m] [0m[0m    Sink<String, ?> jmsSink =[0m
[0m[[0m[0mdebug[0m] [0m[0m        JmsProducer.textSink([0m
[0m[[0m[0mdebug[0m] [0m[0m            JmsProducerSettings.create(system, connectionFactory).withQueue("test"));[0m
[0m[[0m[0mdebug[0m] [0m[0m    Source.from(Arrays.asList(msgs)).runWith(jmsSink, materializer);[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private void run() throws Exception {[0m
[0m[[0m[0mdebug[0m] [0m[0m    ActiveMqBroker activeMqBroker = new ActiveMqBroker();[0m
[0m[[0m[0mdebug[0m] [0m[0m    activeMqBroker.start();[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    WebServer webserver = new WebServer();[0m
[0m[[0m[0mdebug[0m] [0m[0m    webserver.start("localhost", 8080);[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    ConnectionFactory connectionFactory = activeMqBroker.createConnectionFactory();[0m
[0m[[0m[0mdebug[0m] [0m[0m    enqueue(connectionFactory, "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k");[0m
[0m[[0m[0mdebug[0m] [0m[0m    // #sample[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    final Http http = Http.get(system);[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    Source<String, JmsConsumerControl> jmsSource = // (1)[0m
[0m[[0m[0mdebug[0m] [0m[0m        JmsConsumer.textSource([0m
[0m[[0m[0mdebug[0m] [0m[0m            JmsConsumerSettings.create(system, connectionFactory).withQueue("test"));[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    int parallelism = 4;[0m
[0m[[0m[0mdebug[0m] [0m[0m    Pair<JmsConsumerControl, CompletionStage<Done>> pair =[0m
[0m[[0m[0mdebug[0m] [0m[0m        jmsSource // : String[0m
[0m[[0m[0mdebug[0m] [0m[0m            .map(ByteString::fromString) // : ByteString   (2)[0m
[0m[[0m[0mdebug[0m] [0m[0m            .map([0m
[0m[[0m[0mdebug[0m] [0m[0m                bs ->[0m
[0m[[0m[0mdebug[0m] [0m[0m                    HttpRequest.create("http://localhost:8080/hello")[0m
[0m[[0m[0mdebug[0m] [0m[0m                        .withEntity(bs)) // : HttpRequest  (3)[0m
[0m[[0m[0mdebug[0m] [0m[0m            .mapAsyncUnordered(parallelism, http::singleRequest) // : HttpResponse (4)[0m
[0m[[0m[0mdebug[0m] [0m[0m            .toMat(Sink.foreach(System.out::println), Keep.both()) //               (5)[0m
[0m[[0m[0mdebug[0m] [0m[0m            .run(materializer);[0m
[0m[[0m[0mdebug[0m] [0m[0m    // #sample[0m
[0m[[0m[0mdebug[0m] [0m[0m    Thread.sleep(5 * 1000);[0m
[0m[[0m[0mdebug[0m] [0m[0m    JmsConsumerControl runningSource = pair.first();[0m
[0m[[0m[0mdebug[0m] [0m[0m    CompletionStage<Done> streamCompletion = pair.second();[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    runningSource.shutdown();[0m
[0m[[0m[0mdebug[0m] [0m[0m    streamCompletion.thenAccept(res -> system.terminate());[0m
[0m[[0m[0mdebug[0m] [0m[0m    system[0m
[0m[[0m[0mdebug[0m] [0m[0m        .getWhenTerminated()[0m
[0m[[0m[0mdebug[0m] [0m[0m        .thenAccept([0m
[0m[[0m[0mdebug[0m] [0m[0m            t -> {[0m
[0m[[0m[0mdebug[0m] [0m[0m              webserver.stop();[0m
[0m[[0m[0mdebug[0m] [0m[0m              activeMqBroker.stop(ec);[0m
[0m[[0m[0mdebug[0m] [0m[0m            });[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/doc-examples/src/main/java/jms/javasamples/JmsToOneFilePerMessage.java[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage jms.javasamples;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m// #sample[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.Done;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.actor.ActorSystem;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.japi.Pair;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.ActorMaterializer;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.KillSwitch;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.Materializer;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.jms.JmsConsumerSettings;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.jms.JmsProducerSettings;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.jms.javadsl.JmsConsumer;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.jms.javadsl.JmsConsumerControl;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.jms.javadsl.JmsProducer;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.javadsl.FileIO;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.javadsl.Keep;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.javadsl.Sink;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.javadsl.Source;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.util.ByteString;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.nio.file.Paths;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.util.Arrays;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.util.concurrent.CompletionStage;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m// #sample[0m
[0m[[0m[0mdebug[0m] [0m[0mimport playground.ActiveMqBroker;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.concurrent.ExecutionContext;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport javax.jms.ConnectionFactory;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpublic class JmsToOneFilePerMessage {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  public static void main(String[] args) throws Exception {[0m
[0m[[0m[0mdebug[0m] [0m[0m    JmsToOneFilePerMessage me = new JmsToOneFilePerMessage();[0m
[0m[[0m[0mdebug[0m] [0m[0m    me.run();[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private final ActorSystem system = ActorSystem.create();[0m
[0m[[0m[0mdebug[0m] [0m[0m  private final Materializer materializer = ActorMaterializer.create(system);[0m
[0m[[0m[0mdebug[0m] [0m[0m  private final ExecutionContext ec = system.dispatcher();[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private void enqueue(ConnectionFactory connectionFactory, String... msgs) {[0m
[0m[[0m[0mdebug[0m] [0m[0m    Sink<String, ?> jmsSink =[0m
[0m[[0m[0mdebug[0m] [0m[0m        JmsProducer.textSink([0m
[0m[[0m[0mdebug[0m] [0m[0m            JmsProducerSettings.create(system, connectionFactory).withQueue("test"));[0m
[0m[[0m[0mdebug[0m] [0m[0m    Source.from(Arrays.asList(msgs)).runWith(jmsSink, materializer);[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private void run() throws Exception {[0m
[0m[[0m[0mdebug[0m] [0m[0m    ActiveMqBroker activeMqBroker = new ActiveMqBroker();[0m
[0m[[0m[0mdebug[0m] [0m[0m    activeMqBroker.start();[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    ConnectionFactory connectionFactory = activeMqBroker.createConnectionFactory();[0m
[0m[[0m[0mdebug[0m] [0m[0m    enqueue(connectionFactory, "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k");[0m
[0m[[0m[0mdebug[0m] [0m[0m    // #sample[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    Source<String, JmsConsumerControl> jmsConsumer = // (1)[0m
[0m[[0m[0mdebug[0m] [0m[0m        JmsConsumer.textSource([0m
[0m[[0m[0mdebug[0m] [0m[0m            JmsConsumerSettings.create(system, connectionFactory).withQueue("test"));[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    int parallelism = 5;[0m
[0m[[0m[0mdebug[0m] [0m[0m    Pair<JmsConsumerControl, CompletionStage<Done>> pair =[0m
[0m[[0m[0mdebug[0m] [0m[0m        jmsConsumer // : String[0m
[0m[[0m[0mdebug[0m] [0m[0m            .map(ByteString::fromString) // : ByteString             (2)[0m
[0m[[0m[0mdebug[0m] [0m[0m            .zipWithIndex() // : Pair<ByteString, Long> (3)[0m
[0m[[0m[0mdebug[0m] [0m[0m            .mapAsyncUnordered([0m
[0m[[0m[0mdebug[0m] [0m[0m                parallelism,[0m
[0m[[0m[0mdebug[0m] [0m[0m                (in) -> {[0m
[0m[[0m[0mdebug[0m] [0m[0m                  ByteString byteString = in.first();[0m
[0m[[0m[0mdebug[0m] [0m[0m                  Long number = in.second();[0m
[0m[[0m[0mdebug[0m] [0m[0m                  return Source // (4)[0m
[0m[[0m[0mdebug[0m] [0m[0m                      .single(byteString)[0m
[0m[[0m[0mdebug[0m] [0m[0m                      .runWith([0m
[0m[[0m[0mdebug[0m] [0m[0m                          FileIO.toPath(Paths.get("target/out-" + number + ".txt")), materializer);[0m
[0m[[0m[0mdebug[0m] [0m[0m                }) // : IoResult[0m
[0m[[0m[0mdebug[0m] [0m[0m            .toMat(Sink.ignore(), Keep.both())[0m
[0m[[0m[0mdebug[0m] [0m[0m            .run(materializer);[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    // #sample[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    KillSwitch runningSource = pair.first();[0m
[0m[[0m[0mdebug[0m] [0m[0m    CompletionStage<Done> streamCompletion = pair.second();[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    Thread.sleep(2 * 1000);[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    runningSource.shutdown();[0m
[0m[[0m[0mdebug[0m] [0m[0m    streamCompletion.thenAccept(res -> system.terminate());[0m
[0m[[0m[0mdebug[0m] [0m[0m    system.getWhenTerminated().thenAccept(t -> activeMqBroker.stop(ec));[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/doc-examples/src/main/java/jms/javasamples/JmsToFile.java[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage jms.javasamples;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m// #sample[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.actor.ActorSystem;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.japi.Pair;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.ActorMaterializer;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.IOResult;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.Materializer;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.jms.JmsConsumerSettings;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.jms.JmsProducerSettings;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.jms.javadsl.JmsConsumer;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.jms.javadsl.JmsConsumerControl;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.jms.javadsl.JmsProducer;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.javadsl.FileIO;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.javadsl.Keep;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.javadsl.Sink;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.javadsl.Source;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.util.ByteString;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.nio.file.Paths;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.util.concurrent.CompletionStage;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m// #sample[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport playground.ActiveMqBroker;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.concurrent.ExecutionContext;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport javax.jms.ConnectionFactory;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.util.Arrays;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpublic class JmsToFile {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  public static void main(String[] args) throws Exception {[0m
[0m[[0m[0mdebug[0m] [0m[0m    JmsToFile me = new JmsToFile();[0m
[0m[[0m[0mdebug[0m] [0m[0m    me.run();[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private final ActorSystem system = ActorSystem.create();[0m
[0m[[0m[0mdebug[0m] [0m[0m  private final Materializer materializer = ActorMaterializer.create(system);[0m
[0m[[0m[0mdebug[0m] [0m[0m  private final ExecutionContext ec = system.dispatcher();[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private void enqueue(ConnectionFactory connectionFactory, String... msgs) {[0m
[0m[[0m[0mdebug[0m] [0m[0m    Sink<String, ?> jmsSink =[0m
[0m[[0m[0mdebug[0m] [0m[0m        JmsProducer.textSink([0m
[0m[[0m[0mdebug[0m] [0m[0m            JmsProducerSettings.create(system, connectionFactory).withQueue("test"));[0m
[0m[[0m[0mdebug[0m] [0m[0m    Source.from(Arrays.asList(msgs)).runWith(jmsSink, materializer);[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private void run() throws Exception {[0m
[0m[[0m[0mdebug[0m] [0m[0m    ActiveMqBroker activeMqBroker = new ActiveMqBroker();[0m
[0m[[0m[0mdebug[0m] [0m[0m    activeMqBroker.start();[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    ConnectionFactory connectionFactory = activeMqBroker.createConnectionFactory();[0m
[0m[[0m[0mdebug[0m] [0m[0m    enqueue(connectionFactory, "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k");[0m
[0m[[0m[0mdebug[0m] [0m[0m    // #sample[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    Source<String, JmsConsumerControl> jmsSource = // (1)[0m
[0m[[0m[0mdebug[0m] [0m[0m        JmsConsumer.textSource([0m
[0m[[0m[0mdebug[0m] [0m[0m            JmsConsumerSettings.create(system, connectionFactory).withQueue("test"));[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    Sink<ByteString, CompletionStage<IOResult>> fileSink =[0m
[0m[[0m[0mdebug[0m] [0m[0m        FileIO.toPath(Paths.get("target/out.txt")); // (2)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    Pair<JmsConsumerControl, CompletionStage<IOResult>> pair =[0m
[0m[[0m[0mdebug[0m] [0m[0m        jmsSource // : String[0m
[0m[[0m[0mdebug[0m] [0m[0m            .map(ByteString::fromString) // : ByteString    (3)[0m
[0m[[0m[0mdebug[0m] [0m[0m            .toMat(fileSink, Keep.both())[0m
[0m[[0m[0mdebug[0m] [0m[0m            .run(materializer);[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    // #sample[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    JmsConsumerControl runningSource = pair.first();[0m
[0m[[0m[0mdebug[0m] [0m[0m    CompletionStage<IOResult> streamCompletion = pair.second();[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    runningSource.shutdown();[0m
[0m[[0m[0mdebug[0m] [0m[0m    streamCompletion.thenAccept(res -> system.terminate());[0m
[0m[[0m[0mdebug[0m] [0m[0m    system.getWhenTerminated().thenAccept(t -> activeMqBroker.stop(ec));[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/doc-examples/src/main/java/mqtt/javasamples/MqttGroupedWithin.java[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage mqtt.javasamples;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.Done;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.actor.ActorSystem;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.japi.Creator;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.japi.Pair;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.*;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.mqtt.*;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.mqtt.javadsl.MqttSink;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.mqtt.javadsl.MqttSource;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.javadsl.*;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.util.ByteString;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport com.fasterxml.jackson.annotation.JsonCreator;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport com.fasterxml.jackson.annotation.JsonProperty;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport com.fasterxml.jackson.core.JsonFactory;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport com.fasterxml.jackson.core.JsonGenerator;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport com.fasterxml.jackson.databind.ObjectMapper;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport com.fasterxml.jackson.databind.ObjectReader;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport com.fasterxml.jackson.databind.ObjectWriter;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.eclipse.paho.client.mqttv3.persist.MemoryPersistence;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.io.IOException;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.io.StringWriter;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.time.Duration;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.time.Instant;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.util.Arrays;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.util.List;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.util.concurrent.CompletableFuture;[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.util.concurrent.CompletionStage;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpublic class MqttGroupedWithin {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  public static void main(String[] args) throws Exception {[0m
[0m[[0m[0mdebug[0m] [0m[0m    MqttGroupedWithin me = new MqttGroupedWithin();[0m
[0m[[0m[0mdebug[0m] [0m[0m    me.run();[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  final ActorSystem system = ActorSystem.create("integration");[0m
[0m[[0m[0mdebug[0m] [0m[0m  final Materializer materializer = ActorMaterializer.create(system);[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  // #json-mechanics[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /** Data elements sent via MQTT broker. */[0m
[0m[[0m[0mdebug[0m] [0m[0m  public static final class Measurement {[0m
[0m[[0m[0mdebug[0m] [0m[0m    public final Instant timestamp;[0m
[0m[[0m[0mdebug[0m] [0m[0m    public final long level;[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    @JsonCreator[0m
[0m[[0m[0mdebug[0m] [0m[0m    public Measurement([0m
[0m[[0m[0mdebug[0m] [0m[0m        @JsonProperty("timestamp") Instant timestamp, @JsonProperty("level") long level) {[0m
[0m[[0m[0mdebug[0m] [0m[0m      this.timestamp = timestamp;[0m
[0m[[0m[0mdebug[0m] [0m[0m      this.level = level;[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private final JsonFactory jsonFactory = new JsonFactory();[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  final ObjectMapper mapper = new ObjectMapper().registerModule(new JavaTimeModule());[0m
[0m[[0m[0mdebug[0m] [0m[0m  final ObjectReader measurementReader = mapper.readerFor(Measurement.class);[0m
[0m[[0m[0mdebug[0m] [0m[0m  final ObjectWriter measurementWriter = mapper.writerFor(Measurement.class);[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private String asJsonArray(String fieldName, List<Object> list) throws IOException {[0m
[0m[[0m[0mdebug[0m] [0m[0m    StringWriter sw = new StringWriter();[0m
[0m[[0m[0mdebug[0m] [0m[0m    JsonGenerator generator = jsonFactory.createGenerator(sw);[0m
[0m[[0m[0mdebug[0m] [0m[0m    generator.writeStartObject();[0m
[0m[[0m[0mdebug[0m] [0m[0m    generator.writeFieldName(fieldName);[0m
[0m[[0m[0mdebug[0m] [0m[0m    measurementWriter.writeValues(generator).init(true).writeAll(list);[0m
[0m[[0m[0mdebug[0m] [0m[0m    generator.close();[0m
[0m[[0m[0mdebug[0m] [0m[0m    return sw.toString();[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m  // #json-mechanics[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  // #restarting[0m
[0m[[0m[0mdebug[0m] [0m[0m  /** Wrap a source with restart logic and exposes an equivalent materialized value. */[0m
[0m[[0m[0mdebug[0m] [0m[0m  <M> Source<M, CompletionStage<Done>> wrapWithAsRestartSource([0m
[0m[[0m[0mdebug[0m] [0m[0m      Creator<Source<M, CompletionStage<Done>>> source) {[0m
[0m[[0m[0mdebug[0m] [0m[0m    // makes use of the fact that these sources materialize a CompletionStage<Done>[0m
[0m[[0m[0mdebug[0m] [0m[0m    CompletableFuture<Done> fut = new CompletableFuture<>();[0m
[0m[[0m[0mdebug[0m] [0m[0m    return RestartSource.withBackoff([0m
[0m[[0m[0mdebug[0m] [0m[0m            Duration.ofMillis(100),[0m
[0m[[0m[0mdebug[0m] [0m[0m            Duration.ofSeconds(3),[0m
[0m[[0m[0mdebug[0m] [0m[0m            0.2d, // randomFactor[0m
[0m[[0m[0mdebug[0m] [0m[0m            5, // maxRestarts,[0m
[0m[[0m[0mdebug[0m] [0m[0m            () ->[0m
[0m[[0m[0mdebug[0m] [0m[0m                source[0m
[0m[[0m[0mdebug[0m] [0m[0m                    .create()[0m
[0m[[0m[0mdebug[0m] [0m[0m                    .mapMaterializedValue([0m
[0m[[0m[0mdebug[0m] [0m[0m                        mat ->[0m
[0m[[0m[0mdebug[0m] [0m[0m                            mat.handle([0m
[0m[[0m[0mdebug[0m] [0m[0m                                (done, exception) -> {[0m
[0m[[0m[0mdebug[0m] [0m[0m                                  if (done != null) {[0m
[0m[[0m[0mdebug[0m] [0m[0m                                    fut.complete(done);[0m
[0m[[0m[0mdebug[0m] [0m[0m                                  } else {[0m
[0m[[0m[0mdebug[0m] [0m[0m                                    fut.completeExceptionally(exception);[0m
[0m[[0m[0mdebug[0m] [0m[0m                                  }[0m
[0m[[0m[0mdebug[0m] [0m[0m                                  return fut.toCompletableFuture();[0m
[0m[[0m[0mdebug[0m] [0m[0m                                })))[0m
[0m[[0m[0mdebug[0m] [0m[0m        .mapMaterializedValue(ignore -> fut.toCompletableFuture());[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m  // #restarting[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  void run() throws Exception {[0m
[0m[[0m[0mdebug[0m] [0m[0m    // #flow[0m
[0m[[0m[0mdebug[0m] [0m[0m    final MqttConnectionSettings connectionSettings =[0m
[0m[[0m[0mdebug[0m] [0m[0m        MqttConnectionSettings.create([0m
[0m[[0m[0mdebug[0m] [0m[0m            "tcp://localhost:1883", // (1)[0m
[0m[[0m[0mdebug[0m] [0m[0m            "coffee-client",[0m
[0m[[0m[0mdebug[0m] [0m[0m            new MemoryPersistence());[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    final String topic = "coffee/level";[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    MqttSubscriptions subscriptions = MqttSubscriptions.create(topic, MqttQoS.atLeastOnce()); // (2)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    Source<MqttMessage, CompletionStage<Done>> restartingMqttSource =[0m
[0m[[0m[0mdebug[0m] [0m[0m        wrapWithAsRestartSource( // (3)[0m
[0m[[0m[0mdebug[0m] [0m[0m            () ->[0m
[0m[[0m[0mdebug[0m] [0m[0m                MqttSource.atMostOnce([0m
[0m[[0m[0mdebug[0m] [0m[0m                    connectionSettings.withClientId("coffee-control"), subscriptions, 8));[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    Pair<Pair<CompletionStage<Done>, UniqueKillSwitch>, CompletionStage<Done>> completions =[0m
[0m[[0m[0mdebug[0m] [0m[0m        restartingMqttSource[0m
[0m[[0m[0mdebug[0m] [0m[0m            .viaMat(KillSwitches.single(), Keep.both()) // (4)[0m
[0m[[0m[0mdebug[0m] [0m[0m            .map(m -> m.payload().utf8String()) // (5)[0m
[0m[[0m[0mdebug[0m] [0m[0m            .map(measurementReader::readValue) // (6)[0m
[0m[[0m[0mdebug[0m] [0m[0m            .groupedWithin(50, Duration.ofSeconds(5)) // (7)[0m
[0m[[0m[0mdebug[0m] [0m[0m            .map(list -> asJsonArray("measurements", list)) // (8)[0m
[0m[[0m[0mdebug[0m] [0m[0m            .toMat(Sink.foreach(System.out::println), Keep.both())[0m
[0m[[0m[0mdebug[0m] [0m[0m            .run(materializer);[0m
[0m[[0m[0mdebug[0m] [0m[0m    // #flow[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    // start producing messages to MQTT[0m
[0m[[0m[0mdebug[0m] [0m[0m    CompletionStage<Done> subscriptionInitialized = completions.first().first();[0m
[0m[[0m[0mdebug[0m] [0m[0m    CompletionStage<UniqueKillSwitch> producer =[0m
[0m[[0m[0mdebug[0m] [0m[0m        subscriptionInitialized.thenApply([0m
[0m[[0m[0mdebug[0m] [0m[0m            d -> produceMessages(measurementWriter, connectionSettings, topic));[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    KillSwitch listener = completions.first().second();[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    CompletionStage<Done> streamCompletion = completions.second();[0m
[0m[[0m[0mdebug[0m] [0m[0m    streamCompletion[0m
[0m[[0m[0mdebug[0m] [0m[0m        .handle([0m
[0m[[0m[0mdebug[0m] [0m[0m            (done, exception) -> {[0m
[0m[[0m[0mdebug[0m] [0m[0m              if (exception != null) {[0m
[0m[[0m[0mdebug[0m] [0m[0m                exception.printStackTrace();[0m
[0m[[0m[0mdebug[0m] [0m[0m                return null;[0m
[0m[[0m[0mdebug[0m] [0m[0m              } else {[0m
[0m[[0m[0mdebug[0m] [0m[0m                return done;[0m
[0m[[0m[0mdebug[0m] [0m[0m              }[0m
[0m[[0m[0mdebug[0m] [0m[0m            })[0m
[0m[[0m[0mdebug[0m] [0m[0m        .thenRun(() -> system.terminate());[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    Thread.sleep(10 * 1000);[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    producer.thenAccept((ks) -> ks.shutdown());[0m
[0m[[0m[0mdebug[0m] [0m[0m    listener.shutdown();[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /** Simulate messages from MQTT by writing to topic registered in MQTT broker. */[0m
[0m[[0m[0mdebug[0m] [0m[0m  private UniqueKillSwitch produceMessages([0m
[0m[[0m[0mdebug[0m] [0m[0m      ObjectWriter measurementWriter, MqttConnectionSettings connectionSettings, String topic) {[0m
[0m[[0m[0mdebug[0m] [0m[0m    List<Measurement> input =[0m
[0m[[0m[0mdebug[0m] [0m[0m        Arrays.asList([0m
[0m[[0m[0mdebug[0m] [0m[0m            new Measurement(Instant.now(), 40),[0m
[0m[[0m[0mdebug[0m] [0m[0m            new Measurement(Instant.now(), 60),[0m
[0m[[0m[0mdebug[0m] [0m[0m            new Measurement(Instant.now(), 80),[0m
[0m[[0m[0mdebug[0m] [0m[0m            new Measurement(Instant.now(), 100),[0m
[0m[[0m[0mdebug[0m] [0m[0m            new Measurement(Instant.now(), 120));[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    MqttConnectionSettings sinkSettings = connectionSettings.withClientId("coffee-supervisor");[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    final Sink<MqttMessage, CompletionStage<Done>> mqttSink =[0m
[0m[[0m[0mdebug[0m] [0m[0m        MqttSink.create(sinkSettings, MqttQoS.atLeastOnce());[0m
[0m[[0m[0mdebug[0m] [0m[0m    UniqueKillSwitch killSwitch =[0m
[0m[[0m[0mdebug[0m] [0m[0m        Source.cycle(() -> input.iterator())[0m
[0m[[0m[0mdebug[0m] [0m[0m            .throttle(4, Duration.ofSeconds(1))[0m
[0m[[0m[0mdebug[0m] [0m[0m            .map(m -> measurementWriter.writeValueAsString(m))[0m
[0m[[0m[0mdebug[0m] [0m[0m            .map(s -> MqttMessage.create(topic, ByteString.fromString(s)))[0m
[0m[[0m[0mdebug[0m] [0m[0m            .viaMat(KillSwitches.single(), Keep.right())[0m
[0m[[0m[0mdebug[0m] [0m[0m            .toMat(mqttSink, Keep.left())[0m
[0m[[0m[0mdebug[0m] [0m[0m            .run(materializer);[0m
[0m[[0m[0mdebug[0m] [0m[0m    return killSwitch;[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/doc-examples/src/main/scala/playground/WebServer.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage playground[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.actor.{ActorSystem, Terminated}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.event.Logging[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.http.scaladsl.model.ws.{BinaryMessage, Message, TextMessage}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.http.scaladsl.model.{ContentTypes, HttpEntity}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.http.scaladsl.server.{HttpApp, Route}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.http.scaladsl.settings.ServerSettings[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.scaladsl.{Flow, GraphDSL, Sink, Source}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.{ActorMaterializer, FlowShape}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.{Done, NotUsed}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.concurrent.duration.DurationInt[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.concurrent.{ExecutionContext, Future, Promise}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.util.Success[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mclass WebServer extends HttpApp {[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit val theSystem = ActorSystem(Logging.simpleName(this).replaceAll("\\$", ""))[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit val materializer = ActorMaterializer()[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit val executionContext = theSystem.dispatcher[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private val shutdownPromise = Promise[Done][0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /** Override to do something more interesting on Web socket messages[0m
[0m[[0m[0mdebug[0m] [0m[0m   * http://doc.akka.io/docs/akka-http/current/scala/http/websocket-support.html#routing-support[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def websocket: Flow[Message, Message, Any] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    Flow[Message].mapConcat {[0m
[0m[[0m[0mdebug[0m] [0m[0m      case tm: TextMessage =>[0m
[0m[[0m[0mdebug[0m] [0m[0m        println(s"Web server received web socket message: $tm")[0m
[0m[[0m[0mdebug[0m] [0m[0m        TextMessage([0m
[0m[[0m[0mdebug[0m] [0m[0m          Source[0m
[0m[[0m[0mdebug[0m] [0m[0m            .single("Hello ")[0m
[0m[[0m[0mdebug[0m] [0m[0m            .concat(tm.textStream)[0m
[0m[[0m[0mdebug[0m] [0m[0m            .concat(Source.single("!"))[0m
[0m[[0m[0mdebug[0m] [0m[0m        ) :: Nil[0m
[0m[[0m[0mdebug[0m] [0m[0m      case bm: BinaryMessage =>[0m
[0m[[0m[0mdebug[0m] [0m[0m        // ignore binary messages but drain content to avoid the stream being clogged[0m
[0m[[0m[0mdebug[0m] [0m[0m        bm.dataStream.runWith(Sink.ignore)[0m
[0m[[0m[0mdebug[0m] [0m[0m        Nil[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Sends out messages on the websocket.[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def outgoing: Flow[Message, Message, NotUsed] = {[0m
[0m[[0m[0mdebug[0m] [0m[0m    val routingGraph: Flow[Message, Message, NotUsed] = Flow.fromGraph(GraphDSL.create() { implicit b =>[0m
[0m[[0m[0mdebug[0m] [0m[0m      val in = b.add(Sink.ignore)[0m
[0m[[0m[0mdebug[0m] [0m[0m      val out = b.add(Source.tick(2.seconds, 10.seconds, TextMessage("Tick")))[0m
[0m[[0m[0mdebug[0m] [0m[0m      FlowShape(in.in, out.out)[0m
[0m[[0m[0mdebug[0m] [0m[0m    })[0m
[0m[[0m[0mdebug[0m] [0m[0m    Flow[Message].via(routingGraph)[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * @see http://doc.akka.io/docs/akka-http/current/scala/http/routing-dsl/overview.html[0m
[0m[[0m[0mdebug[0m] [0m[0m   *      http://doc.akka.io/docs/akka-http/current/scala/http/routing-dsl/directives/alphabetically.html[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  override def routes: Route =[0m
[0m[[0m[0mdebug[0m] [0m[0m    pathSingleSlash {[0m
[0m[[0m[0mdebug[0m] [0m[0m      complete {[0m
[0m[[0m[0mdebug[0m] [0m[0m        println("Web server received GET /")[0m
[0m[[0m[0mdebug[0m] [0m[0m        HttpEntity(ContentTypes.`text/html(UTF-8)`, "<html><body>Welcome to the playground!</body></html>")[0m
[0m[[0m[0mdebug[0m] [0m[0m      }[0m
[0m[[0m[0mdebug[0m] [0m[0m    } ~[0m
[0m[[0m[0mdebug[0m] [0m[0m    path("hello") {[0m
[0m[[0m[0mdebug[0m] [0m[0m      get { ctx =>[0m
[0m[[0m[0mdebug[0m] [0m[0m        ctx.complete {[0m
[0m[[0m[0mdebug[0m] [0m[0m          println(s"Web server received ${ctx.request}")[0m
[0m[[0m[0mdebug[0m] [0m[0m          HttpEntity(ContentTypes.`application/json`, """{ msg: "Hi!" }""")[0m
[0m[[0m[0mdebug[0m] [0m[0m        }[0m
[0m[[0m[0mdebug[0m] [0m[0m      }[0m
[0m[[0m[0mdebug[0m] [0m[0m    } ~[0m
[0m[[0m[0mdebug[0m] [0m[0m    pathPrefix("webSocket") {[0m
[0m[[0m[0mdebug[0m] [0m[0m      path("ping") {[0m
[0m[[0m[0mdebug[0m] [0m[0m        // connect e.g. with Http().webSocketClientFlow(WebSocketRequest("ws://localhost:8080/webSocket/ping"))[0m
[0m[[0m[0mdebug[0m] [0m[0m        println("Web server received webSocket/ping connect")[0m
[0m[[0m[0mdebug[0m] [0m[0m        handleWebSocketMessages(websocket)[0m
[0m[[0m[0mdebug[0m] [0m[0m      } // ~[0m
[0m[[0m[0mdebug[0m] [0m[0m//        path("outgoing") {[0m
[0m[[0m[0mdebug[0m] [0m[0m//          handleWebSocketMessages(outgoing)[0m
[0m[[0m[0mdebug[0m] [0m[0m//        }[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  override protected def postHttpBindingFailure(cause: Throwable): Unit =[0m
[0m[[0m[0mdebug[0m] [0m[0m    println(s"The server could not be started due to $cause")[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def start(host: String = "localhost", port: Int = 8080): Future[Done] = {[0m
[0m[[0m[0mdebug[0m] [0m[0m    val settings = ServerSettings(theSystem.settings.config)[0m
[0m[[0m[0mdebug[0m] [0m[0m    Future {[0m
[0m[[0m[0mdebug[0m] [0m[0m      startServer(host, port, settings, theSystem)[0m
[0m[[0m[0mdebug[0m] [0m[0m    }.map(_ => Done)[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  override protected def waitForShutdownSignal(system: ActorSystem)(implicit ec: ExecutionContext): Future[Done] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    shutdownPromise.future[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def stop(): Future[Terminated] = {[0m
[0m[[0m[0mdebug[0m] [0m[0m    shutdownPromise.tryComplete(Success(Done))[0m
[0m[[0m[0mdebug[0m] [0m[0m    theSystem.terminate()[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mobject WebServer extends WebServer[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/doc-examples/src/main/scala/playground/ElasticSearchEmbedded.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage playground[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.codelibs.elasticsearch.runner.ElasticsearchClusterRunner[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mobject ElasticSearchEmbedded {[0m
[0m[[0m[0mdebug[0m] [0m[0m  private val runner = new ElasticsearchClusterRunner()[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def startElasticInstance() = {[0m
[0m[[0m[0mdebug[0m] [0m[0m    runner.build([0m
[0m[[0m[0mdebug[0m] [0m[0m      ElasticsearchClusterRunner[0m
[0m[[0m[0mdebug[0m] [0m[0m        .newConfigs()[0m
[0m[[0m[0mdebug[0m] [0m[0m        .baseHttpPort(9200)[0m
[0m[[0m[0mdebug[0m] [0m[0m        .baseTransportPort(9300)[0m
[0m[[0m[0mdebug[0m] [0m[0m        .numOfNode(1)[0m
[0m[[0m[0mdebug[0m] [0m[0m        .disableESLogger()[0m
[0m[[0m[0mdebug[0m] [0m[0m    )[0m
[0m[[0m[0mdebug[0m] [0m[0m    runner.ensureYellow()[0m
[0m[[0m[0mdebug[0m] [0m[0m    runner[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/doc-examples/src/main/scala/playground/elastic/ElasticsearchMock.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage playground.elastic[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.Materializer[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.slick.javadsl.SlickSession[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.slick.scaladsl.Slick[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.scaladsl.{Sink, Source}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.concurrent.Await[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.concurrent.duration._[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.language.postfixOps[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mobject ElasticsearchMock {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def populateDataForTable()(implicit session: SlickSession, materializer: Materializer) = {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    import session.profile.api._[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    //Drop table if already exists[0m
[0m[[0m[0mdebug[0m] [0m[0m    val dropTableFut =[0m
[0m[[0m[0mdebug[0m] [0m[0m      sqlu"""drop table if exists MOVIE"""[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    //Create movie table[0m
[0m[[0m[0mdebug[0m] [0m[0m    val createTableFut =[0m
[0m[[0m[0mdebug[0m] [0m[0m      sqlu"""create table MOVIE (ID INT PRIMARY KEY, TITLE varchar, GENRE varchar, GROSS numeric(10,2))"""[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    Await.result(session.db.run(dropTableFut), 10 seconds)[0m
[0m[[0m[0mdebug[0m] [0m[0m    Await.result(session.db.run(createTableFut), 10 seconds)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    //A class just for organizing the data before using it in the insert clause.  Could have been insertFut with a Tuple too[0m
[0m[[0m[0mdebug[0m] [0m[0m    case class MovieInsert(id: Int, title: String, genre: String, gross: Double)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    val movies = List([0m
[0m[[0m[0mdebug[0m] [0m[0m      MovieInsert(1, "Rogue One", "Adventure", 3.032),[0m
[0m[[0m[0mdebug[0m] [0m[0m      MovieInsert(2, "Beauty and the Beast", "Musical", 2.795),[0m
[0m[[0m[0mdebug[0m] [0m[0m      MovieInsert(3, "Wonder Woman", "Action", 2.744),[0m
[0m[[0m[0mdebug[0m] [0m[0m      MovieInsert(4, "Guardians of the Galaxy", "Action", 2.568),[0m
[0m[[0m[0mdebug[0m] [0m[0m      MovieInsert(5, "Moana", "Musical", 2.493),[0m
[0m[[0m[0mdebug[0m] [0m[0m      MovieInsert(6, "Spider-Man", "Action", 1.784)[0m
[0m[[0m[0mdebug[0m] [0m[0m    )[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    Source(movies)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .via([0m
[0m[[0m[0mdebug[0m] [0m[0m        Slick.flow([0m
[0m[[0m[0mdebug[0m] [0m[0m          movie => sqlu"INSERT INTO MOVIE VALUES (${movie.id}, ${movie.title}, ${movie.genre}, ${movie.gross})"[0m
[0m[[0m[0mdebug[0m] [0m[0m        )[0m
[0m[[0m[0mdebug[0m] [0m[0m      )[0m
[0m[[0m[0mdebug[0m] [0m[0m      .runWith(Sink.foreach(println))[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/doc-examples/src/main/scala/playground/KafkaEmbedded.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage playground[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport net.manub.embeddedkafka.{EmbeddedKafka, EmbeddedKafkaConfig}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mobject KafkaEmbedded {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def start(): Unit =[0m
[0m[[0m[0mdebug[0m] [0m[0m    start(19000)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def start(kafkaPort: Int): Unit =[0m
[0m[[0m[0mdebug[0m] [0m[0m    EmbeddedKafka.start()(EmbeddedKafkaConfig(kafkaPort))[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def stop() =[0m
[0m[[0m[0mdebug[0m] [0m[0m    EmbeddedKafka.stop()[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/doc-examples/src/main/scala/playground/ActorSystemAvailable.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage playground[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.actor.ActorSystem[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.{ActorMaterializer, Materializer}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.concurrent.duration.{DurationInt, FiniteDuration}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.concurrent.{Await, ExecutionContext}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mclass ActorSystemAvailable {[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit val actorSystem: ActorSystem = ActorSystem()[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit val actorMaterializer: Materializer = ActorMaterializer()[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit val executionContext: ExecutionContext = actorSystem.dispatcher[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def wait(duration: FiniteDuration): Unit = Thread.sleep(duration.toMillis)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def terminateActorSystem(): Unit =[0m
[0m[[0m[0mdebug[0m] [0m[0m    Await.result(actorSystem.terminate(), 1.seconds)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/doc-examples/src/main/scala/playground/SftpServerEmbedded.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage playground[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.io.File[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.nio.charset.Charset[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.nio.file.{FileSystem, Files, Path, Paths}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.security.PublicKey[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.util[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.apache.sshd.common.file.virtualfs.VirtualFileSystemFactory[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.apache.sshd.common.keyprovider.FileKeyPairProvider[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.apache.sshd.server.SshServer[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.apache.sshd.server.auth.password.PasswordAuthenticator[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.apache.sshd.server.auth.pubkey.PublickeyAuthenticator[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.apache.sshd.server.scp.ScpCommandFactory[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.apache.sshd.server.session.ServerSession[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.apache.sshd.server.subsystem.sftp.SftpSubsystemFactory[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mobject SftpServerEmbedded {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  val FtpRootDir = "/tmp/home"[0m
[0m[[0m[0mdebug[0m] [0m[0m  val hostname = "localhost"[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  val resourcePath = "./doc-examples/src/main/resources"[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  val clientPrivateKeyPassphrase: Array[Byte] = "secret".getBytes(Charset.forName("UTF-8"))[0m
[0m[[0m[0mdebug[0m] [0m[0m  var clientPrivateKeyFile: String = new File(s"$resourcePath/id_rsa").getAbsolutePath[0m
[0m[[0m[0mdebug[0m] [0m[0m  val keyPairProviderFile: String = new File(s"$resourcePath/hostkey.pem").getAbsolutePath[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private var sshd: SshServer = _[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def start(fileSystem: FileSystem, port: Int): Unit = {[0m
[0m[[0m[0mdebug[0m] [0m[0m    sshd = SshServer.setUpDefaultServer()[0m
[0m[[0m[0mdebug[0m] [0m[0m    sshd.setHost(hostname)[0m
[0m[[0m[0mdebug[0m] [0m[0m    sshd.setPort(port)[0m
[0m[[0m[0mdebug[0m] [0m[0m    sshd.setKeyPairProvider(new FileKeyPairProvider(Paths.get(keyPairProviderFile)))[0m
[0m[[0m[0mdebug[0m] [0m[0m    sshd.setSubsystemFactories(util.Arrays.asList(new SftpSubsystemFactory))[0m
[0m[[0m[0mdebug[0m] [0m[0m    sshd.setCommandFactory(new ScpCommandFactory())[0m
[0m[[0m[0mdebug[0m] [0m[0m    val passwordAuthenticator = new PasswordAuthenticator() {[0m
[0m[[0m[0mdebug[0m] [0m[0m      override def authenticate(username: String, password: String, session: ServerSession): Boolean =[0m
[0m[[0m[0mdebug[0m] [0m[0m        username != null && username == password[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m    sshd.setPasswordAuthenticator(passwordAuthenticator)[0m
[0m[[0m[0mdebug[0m] [0m[0m    val publicKeyAuthenticator = new PublickeyAuthenticator() {[0m
[0m[[0m[0mdebug[0m] [0m[0m      override def authenticate(username: String, key: PublicKey, session: ServerSession): Boolean = true[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m    sshd.setPublickeyAuthenticator(publicKeyAuthenticator)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    val home: Path = fileSystem.getPath(FtpRootDir)[0m
[0m[[0m[0mdebug[0m] [0m[0m    sshd.setFileSystemFactory(new VirtualFileSystemFactory(home))[0m
[0m[[0m[0mdebug[0m] [0m[0m    sshd.start()[0m
[0m[[0m[0mdebug[0m] [0m[0m    if (!Files.exists(home)) Files.createDirectories(home)[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def stopServer(): Unit =[0m
[0m[[0m[0mdebug[0m] [0m[0m    try {[0m
[0m[[0m[0mdebug[0m] [0m[0m      sshd.stop(true)[0m
[0m[[0m[0mdebug[0m] [0m[0m    } catch {[0m
[0m[[0m[0mdebug[0m] [0m[0m      case t: Throwable =>[0m
[0m[[0m[0mdebug[0m] [0m[0m        throw new RuntimeException(t)[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/doc-examples/src/main/scala/playground/FtpServerEmbedded.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage playground[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.io.File[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.nio.file.FileSystem[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.apache.ftpserver.{ConnectionConfigFactory, FtpServer, FtpServerFactory}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.apache.ftpserver.listener.ListenerFactory[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.apache.ftpserver.usermanager.PropertiesUserManagerFactory[0m
[0m[[0m[0mdebug[0m] [0m[0mimport playground.filesystem.JimfsFactory[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mobject FtpServerEmbedded {[0m
[0m[[0m[0mdebug[0m] [0m[0m  val DEFAULT_LISTENER = "default"[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def start(fs: FileSystem, port: Int): FtpServer = {[0m
[0m[[0m[0mdebug[0m] [0m[0m    val factory = new ListenerFactory()[0m
[0m[[0m[0mdebug[0m] [0m[0m    factory.setServerAddress("localhost")[0m
[0m[[0m[0mdebug[0m] [0m[0m    factory.setPort(port)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    val usersFile = new File("ftpusers.properties")[0m
[0m[[0m[0mdebug[0m] [0m[0m    val pumf = new PropertiesUserManagerFactory[0m
[0m[[0m[0mdebug[0m] [0m[0m    pumf.setFile(usersFile)[0m
[0m[[0m[0mdebug[0m] [0m[0m    val userMgr = pumf.createUserManager[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    val serverFactory = new FtpServerFactory()[0m
[0m[[0m[0mdebug[0m] [0m[0m    serverFactory.setUserManager(userMgr)[0m
[0m[[0m[0mdebug[0m] [0m[0m    serverFactory.setFileSystem(new JimfsFactory(fs))[0m
[0m[[0m[0mdebug[0m] [0m[0m    serverFactory.setConnectionConfig(new ConnectionConfigFactory().createConnectionConfig)[0m
[0m[[0m[0mdebug[0m] [0m[0m    serverFactory.addListener(DEFAULT_LISTENER, factory.createListener)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    val ftpServer = serverFactory.createServer()[0m
[0m[[0m[0mdebug[0m] [0m[0m    ftpServer.start()[0m
[0m[[0m[0mdebug[0m] [0m[0m    ftpServer[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/doc-examples/src/main/scala/playground/ActiveMqBroker.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage playground[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport javax.jms.ConnectionFactory[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.Done[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.apache.activemq.ActiveMQConnectionFactory[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.apache.activemq.broker.BrokerService[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.concurrent.{ExecutionContext, Future}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m/**[0m
[0m[[0m[0mdebug[0m] [0m[0m * To start an ActiveMQ broker be sure to include these dependencies:[0m
[0m[[0m[0mdebug[0m] [0m[0m *[0m
[0m[[0m[0mdebug[0m] [0m[0m *  "javax.jms" % "jms" % "1.1",[0m
[0m[[0m[0mdebug[0m] [0m[0m *  "org.apache.activemq" % "activemq-all" % "5.14.4"[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0mclass ActiveMqBroker {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  var brokerService: Option[BrokerService] = None[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def start(): BrokerService = {[0m
[0m[[0m[0mdebug[0m] [0m[0m    val broker = new BrokerService()[0m
[0m[[0m[0mdebug[0m] [0m[0m    broker.setBrokerName("localhost")[0m
[0m[[0m[0mdebug[0m] [0m[0m    broker.setUseJmx(false)[0m
[0m[[0m[0mdebug[0m] [0m[0m    broker.start()[0m
[0m[[0m[0mdebug[0m] [0m[0m    brokerService = Some(broker)[0m
[0m[[0m[0mdebug[0m] [0m[0m    broker[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def stop()(implicit ec: ExecutionContext): Future[Done] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    brokerService.fold(Future.successful(Done)) { broker =>[0m
[0m[[0m[0mdebug[0m] [0m[0m      Future {[0m
[0m[[0m[0mdebug[0m] [0m[0m        broker.stop()[0m
[0m[[0m[0mdebug[0m] [0m[0m        scala.concurrent.blocking {[0m
[0m[[0m[0mdebug[0m] [0m[0m          broker.waitUntilStopped()[0m
[0m[[0m[0mdebug[0m] [0m[0m        }[0m
[0m[[0m[0mdebug[0m] [0m[0m        Done[0m
[0m[[0m[0mdebug[0m] [0m[0m      }[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def createConnectionFactory: ConnectionFactory = new ActiveMQConnectionFactory("vm://localhost?create=false")[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mobject ActiveMqBroker extends ActiveMqBroker[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/doc-examples/src/main/scala/elastic/FetchUsingSlickAndStreamIntoElastic.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage elastic[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m// #sample[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.Done[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.elasticsearch.WriteMessage._[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.elasticsearch.scaladsl.ElasticsearchSink[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.apache.http.HttpHost[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.elasticsearch.client.RestClient[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.slick.javadsl.SlickSession[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.slick.scaladsl.Slick[0m
[0m[[0m[0mdebug[0m] [0m[0mimport spray.json.DefaultJsonProtocol._[0m
[0m[[0m[0mdebug[0m] [0m[0mimport spray.json.JsonFormat[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.concurrent.Future[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.concurrent.duration._[0m
[0m[[0m[0mdebug[0m] [0m[0m// #sample[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport playground.elastic.ElasticsearchMock[0m
[0m[[0m[0mdebug[0m] [0m[0mimport playground.{ActorSystemAvailable, ElasticSearchEmbedded}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mobject FetchUsingSlickAndStreamIntoElastic extends ActorSystemAvailable with App {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  val runner = ElasticSearchEmbedded.startElasticInstance()[0m
[0m[[0m[0mdebug[0m] [0m[0m  // format: off[0m
[0m[[0m[0mdebug[0m] [0m[0m  // #sample[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit val session = SlickSession.forConfig("slick-h2-mem")                         // (1)[0m
[0m[[0m[0mdebug[0m] [0m[0m  actorSystem.registerOnTermination(session.close())[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  import session.profile.api._[0m
[0m[[0m[0mdebug[0m] [0m[0m  // #sample[0m
[0m[[0m[0mdebug[0m] [0m[0m  // format: on[0m
[0m[[0m[0mdebug[0m] [0m[0m  ElasticsearchMock.populateDataForTable()[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  // format: off[0m
[0m[[0m[0mdebug[0m] [0m[0m  // #sample[0m
[0m[[0m[0mdebug[0m] [0m[0m  class Movies(tag: Tag) extends Table[(Int, String, String, Double)](tag, "MOVIE") {   // (2)[0m
[0m[[0m[0mdebug[0m] [0m[0m    def id = column[Int]("ID")[0m
[0m[[0m[0mdebug[0m] [0m[0m    def title = column[String]("TITLE")[0m
[0m[[0m[0mdebug[0m] [0m[0m    def genre = column[String]("GENRE")[0m
[0m[[0m[0mdebug[0m] [0m[0m    def gross = column[Double]("GROSS")[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    override def * = (id, title, genre, gross)[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  case class Movie(id: Int, title: String, genre: String, gross: Double)                // (3)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit val elasticSearchClient: RestClient =[0m
[0m[[0m[0mdebug[0m] [0m[0m    RestClient.builder(new HttpHost("localhost", 9201)).build()                         // (4)[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit val format: JsonFormat[Movie] = jsonFormat4(Movie)                           // (5)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  val done: Future[Done] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    Slick[0m
[0m[[0m[0mdebug[0m] [0m[0m      .source(TableQuery[Movies].result)                                                // (6)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .map {                                                                            // (7)[0m
[0m[[0m[0mdebug[0m] [0m[0m        case (id, genre, title, gross) => Movie(id, genre, title, gross)[0m
[0m[[0m[0mdebug[0m] [0m[0m      }[0m
[0m[[0m[0mdebug[0m] [0m[0m      .map(movie => createIndexMessage(movie.id.toString, movie))                       // (8)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .runWith(ElasticsearchSink.create[Movie]("movie", "_doc"))                        // (9)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  done.onComplete {[0m
[0m[[0m[0mdebug[0m] [0m[0m    case _ =>[0m
[0m[[0m[0mdebug[0m] [0m[0m      elasticSearchClient.close()                                                       // (10)[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m  // #sample[0m
[0m[[0m[0mdebug[0m] [0m[0m  // format: on[0m
[0m[[0m[0mdebug[0m] [0m[0m  done.onComplete {[0m
[0m[[0m[0mdebug[0m] [0m[0m    case _ =>[0m
[0m[[0m[0mdebug[0m] [0m[0m      runner.close()[0m
[0m[[0m[0mdebug[0m] [0m[0m      runner.clean()[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m  wait(10.seconds)[0m
[0m[[0m[0mdebug[0m] [0m[0m  terminateActorSystem()[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/doc-examples/src/main/scala/elastic/KafkaToElastic.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage elastic[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m// #imports[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.actor.ActorSystem[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.kafka._[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.kafka.scaladsl.{Committer, Consumer, Producer}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.elasticsearch.WriteMessage[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.elasticsearch.scaladsl.{ElasticsearchFlow, ElasticsearchSource}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.scaladsl.{Keep, Sink, Source}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.{ActorMaterializer, Materializer}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.{Done, NotUsed}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.apache.http.HttpHost[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.apache.kafka.clients.consumer.ConsumerConfig[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.apache.kafka.clients.producer.ProducerRecord[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.apache.kafka.common.serialization._[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.elasticsearch.client.RestClient[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.slf4j.LoggerFactory[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.testcontainers.containers.KafkaContainer[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.testcontainers.elasticsearch.ElasticsearchContainer[0m
[0m[[0m[0mdebug[0m] [0m[0mimport spray.json.DefaultJsonProtocol._[0m
[0m[[0m[0mdebug[0m] [0m[0mimport spray.json._[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.collection.immutable[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.concurrent.duration._[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.concurrent.{Await, ExecutionContext, Future}[0m
[0m[[0m[0mdebug[0m] [0m[0m// #imports[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mobject KafkaToElastic extends App {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  final val log = LoggerFactory.getLogger(getClass)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  // Testcontainers: start Elasticsearch in Docker[0m
[0m[[0m[0mdebug[0m] [0m[0m  val elasticsearchContainer = new ElasticsearchContainer("docker.elastic.co/elasticsearch/elasticsearch-oss:6.4.3")[0m
[0m[[0m[0mdebug[0m] [0m[0m  elasticsearchContainer.start()[0m
[0m[[0m[0mdebug[0m] [0m[0m  val elasticsearchAddress = elasticsearchContainer.getHttpHostAddress[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  // Testcontainers: start Kafka in Docker[0m
[0m[[0m[0mdebug[0m] [0m[0m  // [[https://hub.docker.com/r/confluentinc/cp-kafka/tags Available Docker images]][0m
[0m[[0m[0mdebug[0m] [0m[0m  // [[https://docs.confluent.io/current/installation/versions-interoperability.html Kafka versions in Confluent Platform]][0m
[0m[[0m[0mdebug[0m] [0m[0m  val kafka = new KafkaContainer("5.1.2") // contains Kafka 2.1.x[0m
[0m[[0m[0mdebug[0m] [0m[0m  kafka.start()[0m
[0m[[0m[0mdebug[0m] [0m[0m  val kafkaBootstrapServers = kafka.getBootstrapServers[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit val actorSystem: ActorSystem = ActorSystem()[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit val actorMaterializer: Materializer = ActorMaterializer()[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit val executionContext: ExecutionContext = actorSystem.dispatcher[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  val topic = "movies-to-elasticsearch"[0m
[0m[[0m[0mdebug[0m] [0m[0m  private val groupId = "docs-group"[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  // #es-setup[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  // Type in Elasticsearch (2)[0m
[0m[[0m[0mdebug[0m] [0m[0m  case class Movie(id: Int, title: String)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  // Spray JSON conversion setup (3)[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit val movieFormat: JsonFormat[Movie] = jsonFormat2(Movie)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  // Elasticsearch client setup (4)[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit val elasticsearchClient: RestClient =[0m
[0m[[0m[0mdebug[0m] [0m[0m    RestClient[0m
[0m[[0m[0mdebug[0m] [0m[0m      .builder(HttpHost.create(elasticsearchAddress))[0m
[0m[[0m[0mdebug[0m] [0m[0m      .build()[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  val indexName = "movies"[0m
[0m[[0m[0mdebug[0m] [0m[0m  // #es-setup[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private def writeToKafka(movies: immutable.Iterable[Movie]) = {[0m
[0m[[0m[0mdebug[0m] [0m[0m    val kafkaProducerSettings = ProducerSettings(actorSystem, new IntegerSerializer, new StringSerializer)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .withBootstrapServers(kafkaBootstrapServers)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    val producing: Future[Done] = Source(movies)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .map { movie =>[0m
[0m[[0m[0mdebug[0m] [0m[0m        log.debug("producing {}", movie)[0m
[0m[[0m[0mdebug[0m] [0m[0m        new ProducerRecord(topic, Int.box(movie.id), movie.toJson.compactPrint)[0m
[0m[[0m[0mdebug[0m] [0m[0m      }[0m
[0m[[0m[0mdebug[0m] [0m[0m      .runWith(Producer.plainSink(kafkaProducerSettings))[0m
[0m[[0m[0mdebug[0m] [0m[0m    producing.foreach(_ => log.info("Producing finished"))[0m
[0m[[0m[0mdebug[0m] [0m[0m    producing[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private def readFromKafkaWriteToElasticsearch() = {[0m
[0m[[0m[0mdebug[0m] [0m[0m    // #kafka-setup[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    // configure Kafka consumer (1)[0m
[0m[[0m[0mdebug[0m] [0m[0m    val kafkaConsumerSettings = ConsumerSettings(actorSystem, new IntegerDeserializer, new StringDeserializer)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .withBootstrapServers(kafkaBootstrapServers)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .withGroupId(groupId)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .withProperty(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, "earliest")[0m
[0m[[0m[0mdebug[0m] [0m[0m      .withStopTimeout(5.seconds)[0m
[0m[[0m[0mdebug[0m] [0m[0m    // #kafka-setup[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    // #flow[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    val control: Consumer.DrainingControl[Done] = Consumer[0m
[0m[[0m[0mdebug[0m] [0m[0m      .committableSource(kafkaConsumerSettings, Subscriptions.topics(topic)) // (5)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .asSourceWithContext(_.committableOffset) // (6)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .map(_.record)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .map { consumerRecord => // (7)[0m
[0m[[0m[0mdebug[0m] [0m[0m        val movie = consumerRecord.value().parseJson.convertTo[Movie][0m
[0m[[0m[0mdebug[0m] [0m[0m        WriteMessage.createUpsertMessage(movie.id.toString, movie)[0m
[0m[[0m[0mdebug[0m] [0m[0m      }[0m
[0m[[0m[0mdebug[0m] [0m[0m      .via(ElasticsearchFlow.createWithContext(indexName, "_doc")) // (8)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .map { writeResult => // (9)[0m
[0m[[0m[0mdebug[0m] [0m[0m        writeResult.error.foreach { errorJson =>[0m
[0m[[0m[0mdebug[0m] [0m[0m          throw new RuntimeException(s"Elasticsearch update failed ${writeResult.errorReason.getOrElse(errorJson)}")[0m
[0m[[0m[0mdebug[0m] [0m[0m        }[0m
[0m[[0m[0mdebug[0m] [0m[0m        NotUsed[0m
[0m[[0m[0mdebug[0m] [0m[0m      }[0m
[0m[[0m[0mdebug[0m] [0m[0m      .asSource // (10)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .map {[0m
[0m[[0m[0mdebug[0m] [0m[0m        case (_, committableOffset) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m          committableOffset[0m
[0m[[0m[0mdebug[0m] [0m[0m      }[0m
[0m[[0m[0mdebug[0m] [0m[0m      .toMat(Committer.sink(CommitterSettings(actorSystem)))(Keep.both) // (11)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .mapMaterializedValue(Consumer.DrainingControl.apply) // (12)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .run()[0m
[0m[[0m[0mdebug[0m] [0m[0m    // #flow[0m
[0m[[0m[0mdebug[0m] [0m[0m    control[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private def readFromElasticsearch(): Future[immutable.Seq[Movie]] = {[0m
[0m[[0m[0mdebug[0m] [0m[0m    val reading = ElasticsearchSource[0m
[0m[[0m[0mdebug[0m] [0m[0m      .typed[Movie](indexName, "_doc", """{"match_all": {}}""")[0m
[0m[[0m[0mdebug[0m] [0m[0m      .map(_.source)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .runWith(Sink.seq)[0m
[0m[[0m[0mdebug[0m] [0m[0m    reading.foreach(_ => log.info("Reading finished"))[0m
[0m[[0m[0mdebug[0m] [0m[0m    reading[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  val movies = List(Movie(23, "Psycho"), Movie(423, "Citizen Kane"), Movie(523, "jsbilgi"))[0m
[0m[[0m[0mdebug[0m] [0m[0m  val writing: Future[Done] = writeToKafka(movies)[0m
[0m[[0m[0mdebug[0m] [0m[0m  Await.result(writing, 10.seconds)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  val control = readFromKafkaWriteToElasticsearch()[0m
[0m[[0m[0mdebug[0m] [0m[0m  // Let the read/write stream run a bit[0m
[0m[[0m[0mdebug[0m] [0m[0m  Thread.sleep(5.seconds.toMillis)[0m
[0m[[0m[0mdebug[0m] [0m[0m  val copyingFinished = control.drainAndShutdown()[0m
[0m[[0m[0mdebug[0m] [0m[0m  Await.result(copyingFinished, 10.seconds)[0m
[0m[[0m[0mdebug[0m] [0m[0m  val reading = readFromElasticsearch()[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  for {[0m
[0m[[0m[0mdebug[0m] [0m[0m    read <- reading[0m
[0m[[0m[0mdebug[0m] [0m[0m  } {[0m
[0m[[0m[0mdebug[0m] [0m[0m    read.foreach(m => println(s"read $m"))[0m
[0m[[0m[0mdebug[0m] [0m[0m    kafka.stop()[0m
[0m[[0m[0mdebug[0m] [0m[0m    elasticsearchClient.close()[0m
[0m[[0m[0mdebug[0m] [0m[0m    elasticsearchContainer.stop()[0m
[0m[[0m[0mdebug[0m] [0m[0m    actorSystem.terminate()[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/doc-examples/src/main/scala/ftpsamples/RotateLogsToFtp.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage ftpsamples[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.net.InetAddress[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.nio.file.{Files, Path}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.file.scaladsl.{Directory, LogRotatorSink}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.ftp.scaladsl.Sftp[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.ftp.{FtpCredentials, SftpIdentity, SftpSettings}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.scaladsl.{Compression, Flow, Keep, Source}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.util.ByteString[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.apache.mina.util.AvailablePortFinder[0m
[0m[[0m[0mdebug[0m] [0m[0mimport playground.filesystem.FileSystemMock[0m
[0m[[0m[0mdebug[0m] [0m[0mimport playground.{ActorSystemAvailable, SftpServerEmbedded}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mobject RotateLogsToFtp extends ActorSystemAvailable with App {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private val ftpFileSystem = new FileSystemMock().fileSystem[0m
[0m[[0m[0mdebug[0m] [0m[0m  private val privateKeyPassphrase = SftpServerEmbedded.clientPrivateKeyPassphrase[0m
[0m[[0m[0mdebug[0m] [0m[0m  private val pathToIdentityFile = SftpServerEmbedded.clientPrivateKeyFile[0m
[0m[[0m[0mdebug[0m] [0m[0m  private val username = "username"[0m
[0m[[0m[0mdebug[0m] [0m[0m  private val password = username[0m
[0m[[0m[0mdebug[0m] [0m[0m  private val hostname = "localhost"[0m
[0m[[0m[0mdebug[0m] [0m[0m  val port = AvailablePortFinder.getNextAvailable(21000)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  val home: Path = ftpFileSystem.getPath(SftpServerEmbedded.FtpRootDir).resolve("tmp")[0m
[0m[[0m[0mdebug[0m] [0m[0m  if (!Files.exists(home)) Files.createDirectories(home)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  SftpServerEmbedded.start(ftpFileSystem, port)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  // #sample[0m
[0m[[0m[0mdebug[0m] [0m[0m  val data = ('a' to 'd') // (1)[0m
[0m[[0m[0mdebug[0m] [0m[0m    .flatMap(letter => Seq.fill(10)(ByteString(letter.toString * 10000)))[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  // (2)[0m
[0m[[0m[0mdebug[0m] [0m[0m  val rotator = () => {[0m
[0m[[0m[0mdebug[0m] [0m[0m    var last: Char = ' '[0m
[0m[[0m[0mdebug[0m] [0m[0m    (bs: ByteString) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m      {[0m
[0m[[0m[0mdebug[0m] [0m[0m        bs.head.toChar match {[0m
[0m[[0m[0mdebug[0m] [0m[0m          case char if char != last =>[0m
[0m[[0m[0mdebug[0m] [0m[0m            last = char[0m
[0m[[0m[0mdebug[0m] [0m[0m            Some(s"log-$char.z")[0m
[0m[[0m[0mdebug[0m] [0m[0m          case _ => None[0m
[0m[[0m[0mdebug[0m] [0m[0m        }[0m
[0m[[0m[0mdebug[0m] [0m[0m      }[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  // (3)[0m
[0m[[0m[0mdebug[0m] [0m[0m  val identity = SftpIdentity.createFileSftpIdentity(pathToIdentityFile, privateKeyPassphrase)[0m
[0m[[0m[0mdebug[0m] [0m[0m  val credentials = FtpCredentials.create(username, password)[0m
[0m[[0m[0mdebug[0m] [0m[0m  val settings = SftpSettings(InetAddress.getByName(hostname))[0m
[0m[[0m[0mdebug[0m] [0m[0m    .withPort(port)[0m
[0m[[0m[0mdebug[0m] [0m[0m    .withSftpIdentity(identity)[0m
[0m[[0m[0mdebug[0m] [0m[0m    .withStrictHostKeyChecking(false)[0m
[0m[[0m[0mdebug[0m] [0m[0m    .withCredentials(credentials)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  val sink = (path: String) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m    Flow[ByteString][0m
[0m[[0m[0mdebug[0m] [0m[0m      .via(Compression.gzip) // (4)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .toMat(Sftp.toPath(s"tmp/$path", settings))(Keep.right)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  val completion = Source(data).runWith(LogRotatorSink.withSinkFactory(rotator, sink))[0m
[0m[[0m[0mdebug[0m] [0m[0m  // #sample[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  completion[0m
[0m[[0m[0mdebug[0m] [0m[0m    .flatMap { _ =>[0m
[0m[[0m[0mdebug[0m] [0m[0m      Directory[0m
[0m[[0m[0mdebug[0m] [0m[0m        .ls(home)[0m
[0m[[0m[0mdebug[0m] [0m[0m        .runForeach(f => println(f))[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m    .recover {[0m
[0m[[0m[0mdebug[0m] [0m[0m      case f =>[0m
[0m[[0m[0mdebug[0m] [0m[0m        f.printStackTrace()[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m    .onComplete { _ =>[0m
[0m[[0m[0mdebug[0m] [0m[0m      SftpServerEmbedded.stopServer()[0m
[0m[[0m[0mdebug[0m] [0m[0m      terminateActorSystem()[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/doc-examples/src/main/scala/ftpsamples/FtpToFile.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage ftpsamples[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m// #sample[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.net.InetAddress[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.nio.file.Paths[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.IOResult[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.ftp.FtpSettings[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.ftp.scaladsl.Ftp[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.scaladsl.{FileIO, Sink}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.apache.mina.util.AvailablePortFinder[0m
[0m[[0m[0mdebug[0m] [0m[0mimport playground.filesystem.FileSystemMock[0m
[0m[[0m[0mdebug[0m] [0m[0mimport playground.{ActorSystemAvailable, FtpServerEmbedded}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.collection.immutable[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.concurrent.Future[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.util.{Failure, Success}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m// #sample[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mobject FtpToFile extends ActorSystemAvailable with App {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  val ftpFileSystem = new FileSystemMock()[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  val port = AvailablePortFinder.getNextAvailable(21000)[0m
[0m[[0m[0mdebug[0m] [0m[0m  val ftpServer = FtpServerEmbedded.start(ftpFileSystem.fileSystem, port)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  ftpFileSystem.generateFiles(30, 10, "/home/anonymous")[0m
[0m[[0m[0mdebug[0m] [0m[0m  ftpFileSystem.putFileOnFtp("/home/anonymous", "hello.txt")[0m
[0m[[0m[0mdebug[0m] [0m[0m  ftpFileSystem.putFileOnFtp("/home/anonymous", "hello2.txt")[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  // #sample[0m
[0m[[0m[0mdebug[0m] [0m[0m  val ftpSettings = FtpSettings(InetAddress.getByName("localhost")).withPort(port)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  // #sample[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  val targetDir = Paths.get("target/")[0m
[0m[[0m[0mdebug[0m] [0m[0m  val fetchedFiles: Future[immutable.Seq[(String, IOResult)]] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    // format: off[0m
[0m[[0m[0mdebug[0m] [0m[0m    // #sample[0m
[0m[[0m[0mdebug[0m] [0m[0m    Ftp[0m
[0m[[0m[0mdebug[0m] [0m[0m      .ls("/", ftpSettings)                                    //: FtpFile (1)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .filter(ftpFile => ftpFile.isFile)                       //: FtpFile (2)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .mapAsyncUnordered(parallelism = 5) { ftpFile =>         // (3)[0m
[0m[[0m[0mdebug[0m] [0m[0m        val localPath = targetDir.resolve("." + ftpFile.path)[0m
[0m[[0m[0mdebug[0m] [0m[0m        val fetchFile: Future[IOResult] = Ftp[0m
[0m[[0m[0mdebug[0m] [0m[0m          .fromPath(ftpFile.path, ftpSettings)                [0m
[0m[[0m[0mdebug[0m] [0m[0m          .runWith(FileIO.toPath(localPath))                   // (4)[0m
[0m[[0m[0mdebug[0m] [0m[0m        fetchFile.map { ioResult =>                            // (5)[0m
[0m[[0m[0mdebug[0m] [0m[0m          (ftpFile.path, ioResult)[0m
[0m[[0m[0mdebug[0m] [0m[0m        }[0m
[0m[[0m[0mdebug[0m] [0m[0m      }                                                        //: (String, IOResult)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .runWith(Sink.seq)                                       // (6)[0m
[0m[[0m[0mdebug[0m] [0m[0m    // #sample[0m
[0m[[0m[0mdebug[0m] [0m[0m  // format: on[0m
[0m[[0m[0mdebug[0m] [0m[0m  fetchedFiles[0m
[0m[[0m[0mdebug[0m] [0m[0m    .map { files =>[0m
[0m[[0m[0mdebug[0m] [0m[0m      files.filter { case (_, r) => !r.wasSuccessful }[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m    .onComplete { res =>[0m
[0m[[0m[0mdebug[0m] [0m[0m      res match {[0m
[0m[[0m[0mdebug[0m] [0m[0m        case Success(errors) if errors.isEmpty =>[0m
[0m[[0m[0mdebug[0m] [0m[0m          println("all files fetched.")[0m
[0m[[0m[0mdebug[0m] [0m[0m        case Success(errors) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m          println(s"errors occured: ${errors.mkString("\n")}")[0m
[0m[[0m[0mdebug[0m] [0m[0m        case Failure(exception) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m          println("the stream failed")[0m
[0m[[0m[0mdebug[0m] [0m[0m      }[0m
[0m[[0m[0mdebug[0m] [0m[0m      actorSystem.terminate().onComplete { _ =>[0m
[0m[[0m[0mdebug[0m] [0m[0m        ftpServer.stop()[0m
[0m[[0m[0mdebug[0m] [0m[0m      }[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/doc-examples/src/main/scala/csvsamples/FetchHttpEvery30SecondsAndConvertCsvToJsonToKafka.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage csvsamples[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m// #sample[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.http.scaladsl._[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.http.scaladsl.model.StatusCodes._[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.http.scaladsl.model.headers.Accept[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.http.scaladsl.model.{HttpRequest, HttpResponse, MediaRanges}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.kafka.scaladsl.{Consumer, Producer}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.kafka.{ConsumerSettings, ProducerSettings, Subscriptions}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.csv.scaladsl.{CsvParsing, CsvToMap}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.scaladsl.{Keep, Sink, Source}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.util.ByteString[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.apache.kafka.clients.consumer.ConsumerConfig[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.apache.kafka.clients.producer.ProducerRecord[0m
[0m[[0m[0mdebug[0m] [0m[0mimport org.apache.kafka.common.serialization.{StringDeserializer, StringSerializer}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport playground.{ActorSystemAvailable, KafkaEmbedded}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport spray.json.{DefaultJsonProtocol, JsValue, JsonWriter}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.concurrent.duration.DurationInt[0m
[0m[[0m[0mdebug[0m] [0m[0m// #sample[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mobject FetchHttpEvery30SecondsAndConvertCsvToJsonToKafka[0m
[0m[[0m[0mdebug[0m] [0m[0m    extends ActorSystemAvailable[0m
[0m[[0m[0mdebug[0m] [0m[0m    with App[0m
[0m[[0m[0mdebug[0m] [0m[0m    with DefaultJsonProtocol {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  // format: off[0m
[0m[[0m[0mdebug[0m] [0m[0m  // #helper[0m
[0m[[0m[0mdebug[0m] [0m[0m  // val httpRequest = HttpRequest(uri = "https://www.nasdaq.com/screening/companies-by-name.aspx?exchange=NYSE&render=download")[0m
[0m[[0m[0mdebug[0m] [0m[0m   val httpRequest = HttpRequest(uri = "https://sample-videos.com/csv/Sample-Spreadsheet-10-rows.csv?render=download")[0m
[0m[[0m[0mdebug[0m] [0m[0m    .withHeaders(Accept(MediaRanges.`text/*`))[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def extractEntityData(response: HttpResponse): Source[ByteString, _] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    response match {[0m
[0m[[0m[0mdebug[0m] [0m[0m      case HttpResponse(OK, _, entity, _) => entity.dataBytes[0m
[0m[[0m[0mdebug[0m] [0m[0m      case notOkResponse =>[0m
[0m[[0m[0mdebug[0m] [0m[0m        Source.failed(new RuntimeException(s"illegal response $notOkResponse"))[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def cleanseCsvData(csvData: Map[String, ByteString]): Map[String, String] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    csvData[0m
[0m[[0m[0mdebug[0m] [0m[0m      .filterNot { case (key, _) => key.isEmpty }[0m
[0m[[0m[0mdebug[0m] [0m[0m      .mapValues(_.utf8String)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def toJson(map: Map[String, String])([0m
[0m[[0m[0mdebug[0m] [0m[0m      implicit jsWriter: JsonWriter[Map[String, String]]): JsValue = jsWriter.write(map)[0m
[0m[[0m[0mdebug[0m] [0m[0m  // #helper[0m
[0m[[0m[0mdebug[0m] [0m[0m  // format: on[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  val kafkaPort = 9092 //19000[0m
[0m[[0m[0mdebug[0m] [0m[0m  // KafkaEmbedded.start(kafkaPort)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  val kafkaProducerSettings = ProducerSettings(actorSystem, new StringSerializer, new StringSerializer)[0m
[0m[[0m[0mdebug[0m] [0m[0m    .withBootstrapServers(s"localhost:$kafkaPort")[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  val (ticks, future) =[0m
[0m[[0m[0mdebug[0m] [0m[0m    // format: off[0m
[0m[[0m[0mdebug[0m] [0m[0m    // #sample[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    Source                                                         // stream element type[0m
[0m[[0m[0mdebug[0m] [0m[0m      .tick(1.seconds, 30.seconds, httpRequest)                    //: HttpRequest             (1)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .mapAsync(1)(Http().singleRequest(_))                        //: HttpResponse            (2)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .flatMapConcat(extractEntityData)                            //: ByteString              (3)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .via(CsvParsing.lineScanner())                               //: List[ByteString]        (4)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .via(CsvToMap.toMap())                                       //: Map[String, ByteString] (5)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .map(cleanseCsvData)                                         //: Map[String, String]     (6)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .map(toJson)                                                 //: JsValue                 (7)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .map(_.compactPrint)                                         //: String (JSON formatted)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .map { elem =>[0m
[0m[[0m[0mdebug[0m] [0m[0m        new ProducerRecord[String, String]("topic1", elem)         //: Kafka ProducerRecord    (8)[0m
[0m[[0m[0mdebug[0m] [0m[0m      }[0m
[0m[[0m[0mdebug[0m] [0m[0m      .toMat(Producer.plainSink(kafkaProducerSettings))(Keep.both)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .run()[0m
[0m[[0m[0mdebug[0m] [0m[0m      // #sample[0m
[0m[[0m[0mdebug[0m] [0m[0m      // format: on[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  val kafkaConsumerSettings = ConsumerSettings(actorSystem, new StringDeserializer, new StringDeserializer)[0m
[0m[[0m[0mdebug[0m] [0m[0m    .withBootstrapServers(s"localhost:$kafkaPort")[0m
[0m[[0m[0mdebug[0m] [0m[0m    .withGroupId("topic1")[0m
[0m[[0m[0mdebug[0m] [0m[0m    .withProperty(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, "earliest")[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  val control = Consumer[0m
[0m[[0m[0mdebug[0m] [0m[0m    .atMostOnceSource(kafkaConsumerSettings, Subscriptions.topics("topic1"))[0m
[0m[[0m[0mdebug[0m] [0m[0m    .map(_.value)[0m
[0m[[0m[0mdebug[0m] [0m[0m    .toMat(Sink.foreach(println))(Keep.both)[0m
[0m[[0m[0mdebug[0m] [0m[0m    .mapMaterializedValue(Consumer.DrainingControl.apply)[0m
[0m[[0m[0mdebug[0m] [0m[0m    .run()[0m
[0m[[0m[0mdebug[0m] [0m[0m  println("Hi 2")[0m
[0m[[0m[0mdebug[0m] [0m[0m  wait(1.minutes)[0m
[0m[[0m[0mdebug[0m] [0m[0m  ticks.cancel()[0m
[0m[[0m[0mdebug[0m] [0m[0m  println("Hi 3")[0m
[0m[[0m[0mdebug[0m] [0m[0m  for {[0m
[0m[[0m[0mdebug[0m] [0m[0m    _ <- future[0m
[0m[[0m[0mdebug[0m] [0m[0m    _ <- control.drainAndShutdown()[0m
[0m[[0m[0mdebug[0m] [0m[0m  } {[0m
[0m[[0m[0mdebug[0m] [0m[0m    println("Hi 4")[0m
[0m[[0m[0mdebug[0m] [0m[0m    // KafkaEmbedded.stop()[0m
[0m[[0m[0mdebug[0m] [0m[0m    terminateActorSystem()[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/doc-examples/src/main/scala/jms/JmsSampleBase.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage jms[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.Done[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.jms.JmsProducerSettings[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.jms.scaladsl.JmsProducer[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.scaladsl.{Sink, Source}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport javax.jms.ConnectionFactory[0m
[0m[[0m[0mdebug[0m] [0m[0mimport playground.ActorSystemAvailable[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.concurrent.Future[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mclass JmsSampleBase extends ActorSystemAvailable {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def enqueue(connectionFactory: ConnectionFactory)(msgs: String*): Unit = {[0m
[0m[[0m[0mdebug[0m] [0m[0m    val jmsSink: Sink[String, Future[Done]] =[0m
[0m[[0m[0mdebug[0m] [0m[0m      JmsProducer.textSink([0m
[0m[[0m[0mdebug[0m] [0m[0m        JmsProducerSettings(actorSystem, connectionFactory).withQueue("test")[0m
[0m[[0m[0mdebug[0m] [0m[0m      )[0m
[0m[[0m[0mdebug[0m] [0m[0m    Source(msgs.toList).runWith(jmsSink)[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/doc-examples/src/main/scala/jms/JmsToOneFilePerMessage.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage jms[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m// #sample[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.nio.file.Paths[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.jms.JmsConsumerSettings[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.jms.scaladsl.{JmsConsumer, JmsConsumerControl}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.scaladsl.{FileIO, Keep, Sink, Source}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.util.ByteString[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.concurrent.duration.DurationInt[0m
[0m[[0m[0mdebug[0m] [0m[0m// #sample[0m
[0m[[0m[0mdebug[0m] [0m[0mimport playground.ActiveMqBroker[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mobject JmsToOneFilePerMessage extends JmsSampleBase with App {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  ActiveMqBroker.start()[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  val connectionFactory = ActiveMqBroker.createConnectionFactory[0m
[0m[[0m[0mdebug[0m] [0m[0m  enqueue(connectionFactory)("a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k")[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  // format: off[0m
[0m[[0m[0mdebug[0m] [0m[0m  // #sample[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  val jmsSource: Source[String, JmsConsumerControl] =                                   // (1)[0m
[0m[[0m[0mdebug[0m] [0m[0m    JmsConsumer.textSource([0m
[0m[[0m[0mdebug[0m] [0m[0m      JmsConsumerSettings(actorSystem, connectionFactory).withBufferSize(10).withQueue("test")[0m
[0m[[0m[0mdebug[0m] [0m[0m    )[0m
[0m[[0m[0mdebug[0m] [0m[0m                                                            // stream element type[0m
[0m[[0m[0mdebug[0m] [0m[0m  val runningSource = jmsSource                             //: String[0m
[0m[[0m[0mdebug[0m] [0m[0m    .map(ByteString(_))                                     //: ByteString         (2)[0m
[0m[[0m[0mdebug[0m] [0m[0m    .zipWithIndex                                           //: (ByteString, Long) (3)[0m
[0m[[0m[0mdebug[0m] [0m[0m    .mapAsyncUnordered(parallelism = 5) { case (byteStr, number) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m      Source                                                //                     (4)[0m
[0m[[0m[0mdebug[0m] [0m[0m        .single(byteStr)[0m
[0m[[0m[0mdebug[0m] [0m[0m        .runWith(FileIO.toPath(Paths.get(s"target/out-$number.txt")))[0m
[0m[[0m[0mdebug[0m] [0m[0m    }                                                       //: IoResult[0m
[0m[[0m[0mdebug[0m] [0m[0m    .toMat(Sink.ignore)(Keep.left)[0m
[0m[[0m[0mdebug[0m] [0m[0m    .run()[0m
[0m[[0m[0mdebug[0m] [0m[0m  // #sample[0m
[0m[[0m[0mdebug[0m] [0m[0m  // format: on[0m
[0m[[0m[0mdebug[0m] [0m[0m  wait(1.second)[0m
[0m[[0m[0mdebug[0m] [0m[0m  runningSource.shutdown()[0m
[0m[[0m[0mdebug[0m] [0m[0m  for {[0m
[0m[[0m[0mdebug[0m] [0m[0m    _ <- actorSystem.terminate()[0m
[0m[[0m[0mdebug[0m] [0m[0m    _ <- ActiveMqBroker.stop()[0m
[0m[[0m[0mdebug[0m] [0m[0m  } ()[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/doc-examples/src/main/scala/jms/JmsToWebSocket.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage jms[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m// #sample[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.Done[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.http.scaladsl.Http[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.http.scaladsl.model._[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.http.scaladsl.model.ws.{WebSocketRequest, WebSocketUpgradeResponse}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.jms.JmsConsumerSettings[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.jms.scaladsl.{JmsConsumer, JmsConsumerControl}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.scaladsl.{Flow, Keep, Sink, Source}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.concurrent.Future[0m
[0m[[0m[0mdebug[0m] [0m[0m// #sample[0m
[0m[[0m[0mdebug[0m] [0m[0mimport playground.{ActiveMqBroker, WebServer}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.concurrent.duration.DurationInt[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mobject JmsToWebSocket extends JmsSampleBase with App {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  ActiveMqBroker.start()[0m
[0m[[0m[0mdebug[0m] [0m[0m  WebServer.start()[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  val connectionFactory = ActiveMqBroker.createConnectionFactory[0m
[0m[[0m[0mdebug[0m] [0m[0m  enqueue(connectionFactory)("a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k")[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  // format: off[0m
[0m[[0m[0mdebug[0m] [0m[0m  // #sample[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  val jmsSource: Source[String, JmsConsumerControl] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    JmsConsumer.textSource(                                                           // (1)[0m
[0m[[0m[0mdebug[0m] [0m[0m      JmsConsumerSettings(actorSystem, connectionFactory).withBufferSize(10).withQueue("test")[0m
[0m[[0m[0mdebug[0m] [0m[0m    )[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  val webSocketFlow: Flow[ws.Message, ws.Message, Future[WebSocketUpgradeResponse]] = // (2)[0m
[0m[[0m[0mdebug[0m] [0m[0m    Http().webSocketClientFlow(WebSocketRequest("ws://localhost:8080/webSocket/ping"))[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  val ((runningSource, wsUpgradeResponse), streamCompletion): ((JmsConsumerControl, Future[WebSocketUpgradeResponse]), Future[Done]) =[0m
[0m[[0m[0mdebug[0m] [0m[0m                                                     // stream element type[0m
[0m[[0m[0mdebug[0m] [0m[0m    jmsSource                                        //: String[0m
[0m[[0m[0mdebug[0m] [0m[0m      .map(ws.TextMessage(_))                        //: ws.TextMessage                  (3)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .viaMat(webSocketFlow)(Keep.both)              //: ws.TextMessage                  (4)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .mapAsync(1)(wsMessageToString)                //: String                          (5)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .map("client received: " + _)                  //: String                          (6)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .toMat(Sink.foreach(println))(Keep.both)       //                                  (7)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .run()[0m
[0m[[0m[0mdebug[0m] [0m[0m  // #sample[0m
[0m[[0m[0mdebug[0m] [0m[0m  // format: on[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  wsUpgradeResponse[0m
[0m[[0m[0mdebug[0m] [0m[0m    .map { upgrade =>[0m
[0m[[0m[0mdebug[0m] [0m[0m      if (upgrade.response.status == StatusCodes.SwitchingProtocols) {[0m
[0m[[0m[0mdebug[0m] [0m[0m        "WebSocket established"[0m
[0m[[0m[0mdebug[0m] [0m[0m      } else {[0m
[0m[[0m[0mdebug[0m] [0m[0m        throw new RuntimeException(s"Connection failed: ${upgrade.response.status}")[0m
[0m[[0m[0mdebug[0m] [0m[0m      }[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m    .onComplete(println)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  wait(5.seconds)[0m
[0m[[0m[0mdebug[0m] [0m[0m  runningSource.shutdown()[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  for {[0m
[0m[[0m[0mdebug[0m] [0m[0m    _ <- streamCompletion[0m
[0m[[0m[0mdebug[0m] [0m[0m    _ <- actorSystem.terminate()[0m
[0m[[0m[0mdebug[0m] [0m[0m    _ <- WebServer.stop()[0m
[0m[[0m[0mdebug[0m] [0m[0m    _ <- ActiveMqBroker.stop()[0m
[0m[[0m[0mdebug[0m] [0m[0m  } ()[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  // #sample[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Convert potentially chunked WebSocket Message to a string.[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def wsMessageToString: ws.Message => Future[String] = {[0m
[0m[[0m[0mdebug[0m] [0m[0m    case message: ws.TextMessage.Strict =>[0m
[0m[[0m[0mdebug[0m] [0m[0m      Future.successful(message.text)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    case message: ws.TextMessage.Streamed =>[0m
[0m[[0m[0mdebug[0m] [0m[0m      val seq = message.textStream.runWith(Sink.seq)[0m
[0m[[0m[0mdebug[0m] [0m[0m      seq.map(seq => seq.mkString)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    case message =>[0m
[0m[[0m[0mdebug[0m] [0m[0m      Future.successful(message.toString)[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m  // #sample[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/doc-examples/src/main/scala/jms/JmsToHttpGet.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage jms[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m// #sample[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.Done[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.http.scaladsl.Http[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.http.scaladsl.model._[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.jms.JmsConsumerSettings[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.jms.scaladsl.{JmsConsumer, JmsConsumerControl}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.scaladsl.{Keep, Sink, Source}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.util.ByteString[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.concurrent.Future[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.concurrent.duration.DurationInt[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m// #sample[0m
[0m[[0m[0mdebug[0m] [0m[0mimport playground.{ActiveMqBroker, WebServer}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mobject JmsToHttpGet extends JmsSampleBase with App {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  WebServer.start()[0m
[0m[[0m[0mdebug[0m] [0m[0m  ActiveMqBroker.start()[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  val connectionFactory = ActiveMqBroker.createConnectionFactory[0m
[0m[[0m[0mdebug[0m] [0m[0m  enqueue(connectionFactory)("a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k")[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  // format: off[0m
[0m[[0m[0mdebug[0m] [0m[0m  // #sample[0m
[0m[[0m[0mdebug[0m] [0m[0m  val jmsSource: Source[String, JmsConsumerControl] =                                 // (1)[0m
[0m[[0m[0mdebug[0m] [0m[0m    JmsConsumer.textSource([0m
[0m[[0m[0mdebug[0m] [0m[0m      JmsConsumerSettings(actorSystem,connectionFactory).withBufferSize(10).withQueue("test")[0m
[0m[[0m[0mdebug[0m] [0m[0m    )[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  val (runningSource, finished): (JmsConsumerControl, Future[Done]) =[0m
[0m[[0m[0mdebug[0m] [0m[0m    jmsSource                                                   //: String[0m
[0m[[0m[0mdebug[0m] [0m[0m      .map(ByteString(_))                                       //: ByteString   (2)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .map { bs =>[0m
[0m[[0m[0mdebug[0m] [0m[0m        HttpRequest(uri = Uri("http://localhost:8080/hello"),   //: HttpRequest  (3)[0m
[0m[[0m[0mdebug[0m] [0m[0m          entity = HttpEntity(bs))[0m
[0m[[0m[0mdebug[0m] [0m[0m      }[0m
[0m[[0m[0mdebug[0m] [0m[0m      .mapAsyncUnordered(4)(Http().singleRequest(_))            //: HttpResponse (4)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .toMat(Sink.foreach(println))(Keep.both)                  //               (5)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .run()[0m
[0m[[0m[0mdebug[0m] [0m[0m  // #sample[0m
[0m[[0m[0mdebug[0m] [0m[0m  // format: on[0m
[0m[[0m[0mdebug[0m] [0m[0m  finished.foreach(_ => println("stream finished"))[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  wait(5.seconds)[0m
[0m[[0m[0mdebug[0m] [0m[0m  runningSource.shutdown()[0m
[0m[[0m[0mdebug[0m] [0m[0m  for {[0m
[0m[[0m[0mdebug[0m] [0m[0m    _ <- actorSystem.terminate()[0m
[0m[[0m[0mdebug[0m] [0m[0m    _ <- WebServer.stop()[0m
[0m[[0m[0mdebug[0m] [0m[0m    _ <- ActiveMqBroker.stop()[0m
[0m[[0m[0mdebug[0m] [0m[0m  } ()[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/doc-examples/src/main/scala/jms/JmsToFile.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage jms[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m// #sample[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.nio.file.Paths[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.IOResult[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.jms.JmsConsumerSettings[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.jms.scaladsl.{JmsConsumer, JmsConsumerControl}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.scaladsl.{FileIO, Keep, Sink, Source}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.util.ByteString[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.concurrent.Future[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.concurrent.duration.DurationInt[0m
[0m[[0m[0mdebug[0m] [0m[0m// #sample[0m
[0m[[0m[0mdebug[0m] [0m[0mimport playground.ActiveMqBroker[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mobject JmsToFile extends JmsSampleBase with App {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  ActiveMqBroker.start()[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  val connectionFactory = ActiveMqBroker.createConnectionFactory[0m
[0m[[0m[0mdebug[0m] [0m[0m  enqueue(connectionFactory)("a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k")[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  // format: off[0m
[0m[[0m[0mdebug[0m] [0m[0m  // #sample[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  val jmsSource: Source[String, JmsConsumerControl] =        // (1)[0m
[0m[[0m[0mdebug[0m] [0m[0m    JmsConsumer.textSource([0m
[0m[[0m[0mdebug[0m] [0m[0m      JmsConsumerSettings(actorSystem, connectionFactory).withBufferSize(10).withQueue("test")[0m
[0m[[0m[0mdebug[0m] [0m[0m    )[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  val fileSink: Sink[ByteString, Future[IOResult]] = // (2)[0m
[0m[[0m[0mdebug[0m] [0m[0m    FileIO.toPath(Paths.get("target/out.txt"))[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  val (runningSource, finished): (JmsConsumerControl, Future[IOResult]) =[0m
[0m[[0m[0mdebug[0m] [0m[0m                                                     // stream element type[0m
[0m[[0m[0mdebug[0m] [0m[0m    jmsSource                                        //: String[0m
[0m[[0m[0mdebug[0m] [0m[0m      .map(ByteString(_))                            //: ByteString    (3)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .toMat(fileSink)(Keep.both)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .run()[0m
[0m[[0m[0mdebug[0m] [0m[0m  // #sample[0m
[0m[[0m[0mdebug[0m] [0m[0m  // format: on[0m
[0m[[0m[0mdebug[0m] [0m[0m  wait(1.second)[0m
[0m[[0m[0mdebug[0m] [0m[0m  runningSource.shutdown()[0m
[0m[[0m[0mdebug[0m] [0m[0m  for {[0m
[0m[[0m[0mdebug[0m] [0m[0m    _ <- actorSystem.terminate()[0m
[0m[[0m[0mdebug[0m] [0m[0m    _ <- ActiveMqBroker.stop()[0m
[0m[[0m[0mdebug[0m] [0m[0m  } ()[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
