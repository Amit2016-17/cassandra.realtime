[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/google-cloud-pub-sub/src/main/scala/akka/stream/alpakka/googlecloud/pubsub/javadsl/GooglePubSub.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.googlecloud.pubsub.javadsl[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.util.concurrent.CompletionStage[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.{Done, NotUsed}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.actor.ActorSystem[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.Materializer[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.googlecloud.pubsub.{AcknowledgeRequest, PubSubConfig, PublishRequest, ReceivedMessage}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.googlecloud.pubsub.scaladsl.{GooglePubSub => GPubSub}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.javadsl.{Flow, Sink, Source}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.compat.java8.FutureConverters._[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.collection.JavaConverters._[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mobject GooglePubSub {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def publish(topic: String,[0m
[0m[[0m[0mdebug[0m] [0m[0m              config: PubSubConfig,[0m
[0m[[0m[0mdebug[0m] [0m[0m              parallelism: Int,[0m
[0m[[0m[0mdebug[0m] [0m[0m              actorSystem: ActorSystem,[0m
[0m[[0m[0mdebug[0m] [0m[0m              materializer: Materializer): Flow[PublishRequest, java.util.List[String], NotUsed] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    GPubSub[0m
[0m[[0m[0mdebug[0m] [0m[0m      .publish(topic = topic, config = config, parallelism = parallelism)(actorSystem, materializer)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .map(_.asJava)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .asJava[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def subscribe(subscription: String,[0m
[0m[[0m[0mdebug[0m] [0m[0m                config: PubSubConfig,[0m
[0m[[0m[0mdebug[0m] [0m[0m                actorSystem: ActorSystem): Source[ReceivedMessage, NotUsed] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    GPubSub[0m
[0m[[0m[0mdebug[0m] [0m[0m      .subscribe([0m
[0m[[0m[0mdebug[0m] [0m[0m        subscription = subscription,[0m
[0m[[0m[0mdebug[0m] [0m[0m        config = config[0m
[0m[[0m[0mdebug[0m] [0m[0m      )(actorSystem)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .asJava[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def acknowledge(subscription: String,[0m
[0m[[0m[0mdebug[0m] [0m[0m                  config: PubSubConfig,[0m
[0m[[0m[0mdebug[0m] [0m[0m                  parallelism: Int,[0m
[0m[[0m[0mdebug[0m] [0m[0m                  actorSystem: ActorSystem,[0m
[0m[[0m[0mdebug[0m] [0m[0m                  materializer: Materializer): Sink[AcknowledgeRequest, CompletionStage[Done]] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    GPubSub[0m
[0m[[0m[0mdebug[0m] [0m[0m      .acknowledge(subscription = subscription, config = config, parallelism = parallelism)(actorSystem, materializer)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .mapMaterializedValue(_.toJava)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .asJava[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/google-cloud-pub-sub/src/main/scala/akka/stream/alpakka/googlecloud/pubsub/scaladsl/GooglePubSub.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.googlecloud.pubsub.scaladsl[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.actor.ActorSystem[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.Materializer[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.googlecloud.pubsub._[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.googlecloud.pubsub.impl._[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.scaladsl.{Flow, Keep, Sink, Source}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.{Done, NotUsed}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.collection.immutable[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.concurrent.Future[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mobject GooglePubSub extends GooglePubSub {[0m
[0m[[0m[0mdebug[0m] [0m[0m  private[pubsub] override val httpApi = PubSubApi[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mprotected[pubsub] trait GooglePubSub {[0m
[0m[[0m[0mdebug[0m] [0m[0m  private[pubsub] def httpApi: PubSubApi[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Creates a flow to that publish messages to a topic and emits the message ids[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def publish(topic: String, config: PubSubConfig, parallelism: Int = 1)([0m
[0m[[0m[0mdebug[0m] [0m[0m      implicit actorSystem: ActorSystem,[0m
[0m[[0m[0mdebug[0m] [0m[0m      materializer: Materializer[0m
[0m[[0m[0mdebug[0m] [0m[0m  ): Flow[PublishRequest, immutable.Seq[String], NotUsed] = {[0m
[0m[[0m[0mdebug[0m] [0m[0m    import materializer.executionContext[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    if (httpApi.isEmulated) {[0m
[0m[[0m[0mdebug[0m] [0m[0m      Flow[PublishRequest].mapAsyncUnordered(parallelism) { request =>[0m
[0m[[0m[0mdebug[0m] [0m[0m        httpApi.publish(config.projectId, topic, maybeAccessToken = None, request)[0m
[0m[[0m[0mdebug[0m] [0m[0m      }[0m
[0m[[0m[0mdebug[0m] [0m[0m    } else {[0m
[0m[[0m[0mdebug[0m] [0m[0m      Flow[PublishRequest].mapAsyncUnordered(parallelism) { request =>[0m
[0m[[0m[0mdebug[0m] [0m[0m        config.session.getToken().flatMap { accessToken =>[0m
[0m[[0m[0mdebug[0m] [0m[0m          httpApi.publish(config.projectId, topic, Some(accessToken), request)[0m
[0m[[0m[0mdebug[0m] [0m[0m        }[0m
[0m[[0m[0mdebug[0m] [0m[0m      }[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def subscribe(subscription: String, config: PubSubConfig)([0m
[0m[[0m[0mdebug[0m] [0m[0m      implicit actorSystem: ActorSystem[0m
[0m[[0m[0mdebug[0m] [0m[0m  ): Source[ReceivedMessage, NotUsed] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    Source.fromGraph([0m
[0m[[0m[0mdebug[0m] [0m[0m      new GooglePubSubSource([0m
[0m[[0m[0mdebug[0m] [0m[0m        projectId = config.projectId,[0m
[0m[[0m[0mdebug[0m] [0m[0m        session = config.session,[0m
[0m[[0m[0mdebug[0m] [0m[0m        subscription = subscription,[0m
[0m[[0m[0mdebug[0m] [0m[0m        returnImmediately = config.pullReturnImmediately,[0m
[0m[[0m[0mdebug[0m] [0m[0m        maxMessages = config.pullMaxMessagesPerInternalBatch,[0m
[0m[[0m[0mdebug[0m] [0m[0m        httpApi = httpApi[0m
[0m[[0m[0mdebug[0m] [0m[0m      )[0m
[0m[[0m[0mdebug[0m] [0m[0m    )[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def acknowledge([0m
[0m[[0m[0mdebug[0m] [0m[0m      subscription: String,[0m
[0m[[0m[0mdebug[0m] [0m[0m      config: PubSubConfig,[0m
[0m[[0m[0mdebug[0m] [0m[0m      parallelism: Int = 1[0m
[0m[[0m[0mdebug[0m] [0m[0m  )(implicit actorSystem: ActorSystem, materializer: Materializer): Sink[AcknowledgeRequest, Future[Done]] = {[0m
[0m[[0m[0mdebug[0m] [0m[0m    import materializer.executionContext[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    (if (httpApi.isEmulated) {[0m
[0m[[0m[0mdebug[0m] [0m[0m       Flow[AcknowledgeRequest].mapAsyncUnordered(parallelism) { ackReq =>[0m
[0m[[0m[0mdebug[0m] [0m[0m         httpApi.acknowledge(project = config.projectId,[0m
[0m[[0m[0mdebug[0m] [0m[0m                             subscription = subscription,[0m
[0m[[0m[0mdebug[0m] [0m[0m                             maybeAccessToken = None,[0m
[0m[[0m[0mdebug[0m] [0m[0m                             request = ackReq)[0m
[0m[[0m[0mdebug[0m] [0m[0m       }[0m
[0m[[0m[0mdebug[0m] [0m[0m     } else {[0m
[0m[[0m[0mdebug[0m] [0m[0m       Flow[AcknowledgeRequest][0m
[0m[[0m[0mdebug[0m] [0m[0m         .mapAsyncUnordered(parallelism) { ackReq =>[0m
[0m[[0m[0mdebug[0m] [0m[0m           config.session.getToken().flatMap { accessToken =>[0m
[0m[[0m[0mdebug[0m] [0m[0m             httpApi.acknowledge(project = config.projectId,[0m
[0m[[0m[0mdebug[0m] [0m[0m                                 subscription = subscription,[0m
[0m[[0m[0mdebug[0m] [0m[0m                                 maybeAccessToken = Some(accessToken),[0m
[0m[[0m[0mdebug[0m] [0m[0m                                 request = ackReq)[0m
[0m[[0m[0mdebug[0m] [0m[0m           }[0m
[0m[[0m[0mdebug[0m] [0m[0m         }[0m
[0m[[0m[0mdebug[0m] [0m[0m     })[0m
[0m[[0m[0mdebug[0m] [0m[0m      .toMat(Sink.ignore)(Keep.right)[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/google-cloud-pub-sub/src/main/scala/akka/stream/alpakka/googlecloud/pubsub/impl/PubSubApi.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.googlecloud.pubsub.impl[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.time.Instant[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.actor.ActorSystem[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.annotation.InternalApi[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.http.scaladsl.Http[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.http.scaladsl.marshallers.sprayjson.SprayJsonSupport._[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.http.scaladsl.marshalling.Marshal[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.http.scaladsl.model._[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.http.scaladsl.model.headers.OAuth2BearerToken[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.http.scaladsl.unmarshalling.Unmarshal[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.Materializer[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.googlecloud.pubsub._[0m
[0m[[0m[0mdebug[0m] [0m[0mimport spray.json.DefaultJsonProtocol._[0m
[0m[[0m[0mdebug[0m] [0m[0mimport spray.json.{deserializationError, DefaultJsonProtocol, JsString, JsValue, RootJsonFormat}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.collection.immutable[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.concurrent.Future[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m/**[0m
[0m[[0m[0mdebug[0m] [0m[0m * https://cloud.google.com/pubsub/docs/reference/rest/[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m@InternalApi[0m
[0m[[0m[0mdebug[0m] [0m[0mprivate[pubsub] object PubSubApi extends PubSubApi {[0m
[0m[[0m[0mdebug[0m] [0m[0m  val DefaultPubSubGoogleApisHost = "https://pubsub.googleapis.com"[0m
[0m[[0m[0mdebug[0m] [0m[0m  val DefaultGoogleApisHost = "https://www.googleapis.com"[0m
[0m[[0m[0mdebug[0m] [0m[0m  val PubSubEmulatorHostVarName = "PUBSUB_EMULATOR_HOST"[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  val PubSubGoogleApisHost: String = PubSubEmulatorHost.getOrElse(DefaultPubSubGoogleApisHost)[0m
[0m[[0m[0mdebug[0m] [0m[0m  val GoogleApisHost: String = PubSubEmulatorHost.getOrElse(DefaultGoogleApisHost)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  override def isEmulated = PubSubEmulatorHost.nonEmpty[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private[pubsub] lazy val PubSubEmulatorHost: Option[String] = sys.props[0m
[0m[[0m[0mdebug[0m] [0m[0m    .get(PubSubEmulatorHostVarName)[0m
[0m[[0m[0mdebug[0m] [0m[0m    .orElse(sys.env.get(PubSubEmulatorHostVarName))[0m
[0m[[0m[0mdebug[0m] [0m[0m    .map(host => s"http://$host")[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private case class PullRequest(returnImmediately: Boolean, maxMessages: Int)[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m@InternalApi[0m
[0m[[0m[0mdebug[0m] [0m[0mprivate[pubsub] trait PubSubApi {[0m
[0m[[0m[0mdebug[0m] [0m[0m  def PubSubGoogleApisHost: String[0m
[0m[[0m[0mdebug[0m] [0m[0m  def GoogleApisHost: String[0m
[0m[[0m[0mdebug[0m] [0m[0m  def isEmulated: Boolean[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private implicit val instantFormat = new RootJsonFormat[Instant] {[0m
[0m[[0m[0mdebug[0m] [0m[0m    override def read(jsValue: JsValue): Instant = jsValue match {[0m
[0m[[0m[0mdebug[0m] [0m[0m      case JsString(time) => Instant.parse(time)[0m
[0m[[0m[0mdebug[0m] [0m[0m      case _ => deserializationError("Instant required as a string of RFC3339 UTC Zulu format.")[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m    override def write(instant: Instant): JsValue = JsString(instant.toString)[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m  private implicit val pubSubMessageFormat = DefaultJsonProtocol.jsonFormat4(PubSubMessage.apply)[0m
[0m[[0m[0mdebug[0m] [0m[0m  private implicit val pubSubRequestFormat = DefaultJsonProtocol.jsonFormat1(PublishRequest.apply)[0m
[0m[[0m[0mdebug[0m] [0m[0m  private implicit val gcePubSubResponseFormat = DefaultJsonProtocol.jsonFormat1(PublishResponse)[0m
[0m[[0m[0mdebug[0m] [0m[0m  private implicit val receivedMessageFormat = DefaultJsonProtocol.jsonFormat2(ReceivedMessage)[0m
[0m[[0m[0mdebug[0m] [0m[0m  private implicit val pubSubPullResponseFormat = DefaultJsonProtocol.jsonFormat1(PullResponse)[0m
[0m[[0m[0mdebug[0m] [0m[0m  private implicit val acknowledgeRequestFormat =[0m
[0m[[0m[0mdebug[0m] [0m[0m    DefaultJsonProtocol.jsonFormat1(AcknowledgeRequest.apply)[0m
[0m[[0m[0mdebug[0m] [0m[0m  private implicit val pullRequestFormat = DefaultJsonProtocol.jsonFormat2(PubSubApi.PullRequest)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def pull(project: String,[0m
[0m[[0m[0mdebug[0m] [0m[0m           subscription: String,[0m
[0m[[0m[0mdebug[0m] [0m[0m           maybeAccessToken: Option[String],[0m
[0m[[0m[0mdebug[0m] [0m[0m           returnImmediately: Boolean,[0m
[0m[[0m[0mdebug[0m] [0m[0m           maxMessages: Int)([0m
[0m[[0m[0mdebug[0m] [0m[0m      implicit as: ActorSystem,[0m
[0m[[0m[0mdebug[0m] [0m[0m      materializer: Materializer[0m
[0m[[0m[0mdebug[0m] [0m[0m  ): Future[PullResponse] = {[0m
[0m[[0m[0mdebug[0m] [0m[0m    import materializer.executionContext[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    val uri: Uri = s"$PubSubGoogleApisHost/v1/projects/$project/subscriptions/$subscription:pull"[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    val request = PubSubApi.PullRequest(returnImmediately = returnImmediately, maxMessages = maxMessages)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    for {[0m
[0m[[0m[0mdebug[0m] [0m[0m      request <- Marshal((HttpMethods.POST, uri, request)).to[HttpRequest][0m
[0m[[0m[0mdebug[0m] [0m[0m      response <- doRequest(request, maybeAccessToken)[0m
[0m[[0m[0mdebug[0m] [0m[0m      pullResponse <- Unmarshal(response).to[PullResponse][0m
[0m[[0m[0mdebug[0m] [0m[0m    } yield pullResponse[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def acknowledge(project: String, subscription: String, maybeAccessToken: Option[String], request: AcknowledgeRequest)([0m
[0m[[0m[0mdebug[0m] [0m[0m      implicit as: ActorSystem,[0m
[0m[[0m[0mdebug[0m] [0m[0m      materializer: Materializer[0m
[0m[[0m[0mdebug[0m] [0m[0m  ): Future[Unit] = {[0m
[0m[[0m[0mdebug[0m] [0m[0m    import materializer.executionContext[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    val url: Uri =[0m
[0m[[0m[0mdebug[0m] [0m[0m      s"$PubSubGoogleApisHost/v1/projects/$project/subscriptions/$subscription:acknowledge"[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    for {[0m
[0m[[0m[0mdebug[0m] [0m[0m      request <- Marshal((HttpMethods.POST, url, request)).to[HttpRequest][0m
[0m[[0m[0mdebug[0m] [0m[0m      response <- doRequest(request, maybeAccessToken)[0m
[0m[[0m[0mdebug[0m] [0m[0m    } yield {[0m
[0m[[0m[0mdebug[0m] [0m[0m      response.discardEntityBytes()[0m
[0m[[0m[0mdebug[0m] [0m[0m      if (response.status.isSuccess()) {[0m
[0m[[0m[0mdebug[0m] [0m[0m        ()[0m
[0m[[0m[0mdebug[0m] [0m[0m      } else {[0m
[0m[[0m[0mdebug[0m] [0m[0m        new RuntimeException("unexpected response acknowledging messages " + response)[0m
[0m[[0m[0mdebug[0m] [0m[0m      }[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private[this] def doRequest(request: HttpRequest, maybeAccessToken: Option[String])(implicit as: ActorSystem) =[0m
[0m[[0m[0mdebug[0m] [0m[0m    Http().singleRequest([0m
[0m[[0m[0mdebug[0m] [0m[0m      maybeAccessToken.map(accessToken => request.addCredentials(OAuth2BearerToken(accessToken))).getOrElse(request)[0m
[0m[[0m[0mdebug[0m] [0m[0m    )[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def publish(project: String, topic: String, maybeAccessToken: Option[String], request: PublishRequest)([0m
[0m[[0m[0mdebug[0m] [0m[0m      implicit as: ActorSystem,[0m
[0m[[0m[0mdebug[0m] [0m[0m      materializer: Materializer[0m
[0m[[0m[0mdebug[0m] [0m[0m  ): Future[immutable.Seq[String]] = {[0m
[0m[[0m[0mdebug[0m] [0m[0m    import materializer.executionContext[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    val url: Uri = s"$PubSubGoogleApisHost/v1/projects/$project/topics/$topic:publish"[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    for {[0m
[0m[[0m[0mdebug[0m] [0m[0m      request <- Marshal((HttpMethods.POST, url, request)).to[HttpRequest][0m
[0m[[0m[0mdebug[0m] [0m[0m      response <- doRequest(request, maybeAccessToken)[0m
[0m[[0m[0mdebug[0m] [0m[0m    } yield {[0m
[0m[[0m[0mdebug[0m] [0m[0m      response.status match {[0m
[0m[[0m[0mdebug[0m] [0m[0m        case StatusCodes.OK => Unmarshal(response.entity).to[PublishResponse].map(_.messageIds)[0m
[0m[[0m[0mdebug[0m] [0m[0m        case _ => throw new RuntimeException(s"Unexpected publish response. Code: [${response.status}]")[0m
[0m[[0m[0mdebug[0m] [0m[0m      }[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m  }.flatMap(identity)(materializer.executionContext)[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/google-cloud-pub-sub/src/main/scala/akka/stream/alpakka/googlecloud/pubsub/impl/GoogleSession.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.googlecloud.pubsub.impl[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.annotation.InternalApi[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.Materializer[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.googlecloud.pubsub.impl.GoogleTokenApi.AccessTokenExpiry[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.concurrent.Future[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m@InternalApi[0m
[0m[[0m[0mdebug[0m] [0m[0mprivate[googlecloud] class GoogleSession(clientEmail: String, privateKey: String, tokenApi: GoogleTokenApi) {[0m
[0m[[0m[0mdebug[0m] [0m[0m  protected var maybeAccessToken: Option[Future[AccessTokenExpiry]] = None[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private def getNewToken()(implicit materializer: Materializer): Future[AccessTokenExpiry] = {[0m
[0m[[0m[0mdebug[0m] [0m[0m    val accessToken = tokenApi.getAccessToken(clientEmail = clientEmail, privateKey = privateKey)[0m
[0m[[0m[0mdebug[0m] [0m[0m    maybeAccessToken = Some(accessToken)[0m
[0m[[0m[0mdebug[0m] [0m[0m    accessToken[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private def expiresSoon(g: AccessTokenExpiry): Boolean =[0m
[0m[[0m[0mdebug[0m] [0m[0m    g.expiresAt < (tokenApi.now + 60)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def getToken()(implicit materializer: Materializer): Future[String] = {[0m
[0m[[0m[0mdebug[0m] [0m[0m    import materializer.executionContext[0m
[0m[[0m[0mdebug[0m] [0m[0m    maybeAccessToken[0m
[0m[[0m[0mdebug[0m] [0m[0m      .getOrElse(getNewToken())[0m
[0m[[0m[0mdebug[0m] [0m[0m      .flatMap { result =>[0m
[0m[[0m[0mdebug[0m] [0m[0m        if (expiresSoon(result)) {[0m
[0m[[0m[0mdebug[0m] [0m[0m          getNewToken()[0m
[0m[[0m[0mdebug[0m] [0m[0m        } else {[0m
[0m[[0m[0mdebug[0m] [0m[0m          Future.successful(result)[0m
[0m[[0m[0mdebug[0m] [0m[0m        }[0m
[0m[[0m[0mdebug[0m] [0m[0m      }[0m
[0m[[0m[0mdebug[0m] [0m[0m      .map(_.accessToken)[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/google-cloud-pub-sub/src/main/scala/akka/stream/alpakka/googlecloud/pubsub/impl/GooglePubSubSource.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.googlecloud.pubsub.impl[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.NotUsed[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.actor.ActorSystem[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.annotation.InternalApi[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.googlecloud.pubsub.impl.GooglePubSubSource._[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.googlecloud.pubsub.{PullResponse, ReceivedMessage}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.stage.{GraphStage, GraphStageLogic, OutHandler, TimerGraphStageLogic}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.{Attributes, Materializer, Outlet, SourceShape}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.collection.immutable[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.concurrent.Future[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.concurrent.duration._[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.util.{Failure, Success, Try}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m@InternalApi[0m
[0m[[0m[0mdebug[0m] [0m[0mprivate[pubsub] final class GooglePubSubSource(projectId: String,[0m
[0m[[0m[0mdebug[0m] [0m[0m                                               session: GoogleSession,[0m
[0m[[0m[0mdebug[0m] [0m[0m                                               subscription: String,[0m
[0m[[0m[0mdebug[0m] [0m[0m                                               returnImmediately: Boolean,[0m
[0m[[0m[0mdebug[0m] [0m[0m                                               maxMessages: Int,[0m
[0m[[0m[0mdebug[0m] [0m[0m                                               httpApi: PubSubApi)(implicit as: ActorSystem)[0m
[0m[[0m[0mdebug[0m] [0m[0m    extends GraphStage[SourceShape[ReceivedMessage]] {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  val out: Outlet[ReceivedMessage] = Outlet("GooglePubSubSource.out")[0m
[0m[[0m[0mdebug[0m] [0m[0m  override val shape: SourceShape[ReceivedMessage] = SourceShape(out)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  override def createLogic(inheritedAttributes: Attributes): GraphStageLogic =[0m
[0m[[0m[0mdebug[0m] [0m[0m    new TimerGraphStageLogic(shape) {[0m
[0m[[0m[0mdebug[0m] [0m[0m      private var state: State = Pending[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m      def fetch(implicit mat: Materializer): Unit = {[0m
[0m[[0m[0mdebug[0m] [0m[0m        import mat.executionContext[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m        def pull(maybeAccessToken: Option[String]): Future[PullResponse] =[0m
[0m[[0m[0mdebug[0m] [0m[0m          httpApi.pull(projectId, subscription, maybeAccessToken, returnImmediately, maxMessages)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m        val req = if (httpApi.isEmulated) {[0m
[0m[[0m[0mdebug[0m] [0m[0m          pull(None)[0m
[0m[[0m[0mdebug[0m] [0m[0m        } else {[0m
[0m[[0m[0mdebug[0m] [0m[0m          session[0m
[0m[[0m[0mdebug[0m] [0m[0m            .getToken()[0m
[0m[[0m[0mdebug[0m] [0m[0m            .flatMap { token =>[0m
[0m[[0m[0mdebug[0m] [0m[0m              pull(Some(token))[0m
[0m[[0m[0mdebug[0m] [0m[0m            }[0m
[0m[[0m[0mdebug[0m] [0m[0m        }[0m
[0m[[0m[0mdebug[0m] [0m[0m        req.onComplete { tr =>[0m
[0m[[0m[0mdebug[0m] [0m[0m          callback.invoke(tr -> mat)[0m
[0m[[0m[0mdebug[0m] [0m[0m        }[0m
[0m[[0m[0mdebug[0m] [0m[0m        state = Fetching[0m
[0m[[0m[0mdebug[0m] [0m[0m      }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m      override def onTimer(timerKey: Any): Unit =[0m
[0m[[0m[0mdebug[0m] [0m[0m        fetch(materializer)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m      private val callback = getAsyncCallback[(Try[PullResponse], Materializer)] {[0m
[0m[[0m[0mdebug[0m] [0m[0m        case (Failure(tr), _) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m          failStage(tr)[0m
[0m[[0m[0mdebug[0m] [0m[0m        case (Success(response), mat) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m          response.receivedMessages.getOrElse(Nil) match {[0m
[0m[[0m[0mdebug[0m] [0m[0m            case head :: tail =>[0m
[0m[[0m[0mdebug[0m] [0m[0m              state match {[0m
[0m[[0m[0mdebug[0m] [0m[0m                case HoldingMessages(oldHead :: oldTail) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m                  state = HoldingMessages(oldTail ++ Seq(head) ++ tail)[0m
[0m[[0m[0mdebug[0m] [0m[0m                  push(out, oldHead)[0m
[0m[[0m[0mdebug[0m] [0m[0m                case _ =>[0m
[0m[[0m[0mdebug[0m] [0m[0m                  state = HoldingMessages(tail)[0m
[0m[[0m[0mdebug[0m] [0m[0m                  push(out, head)[0m
[0m[[0m[0mdebug[0m] [0m[0m              }[0m
[0m[[0m[0mdebug[0m] [0m[0m            case Nil =>[0m
[0m[[0m[0mdebug[0m] [0m[0m              state = Fetching[0m
[0m[[0m[0mdebug[0m] [0m[0m              scheduleOnce(NotUsed, 1.second)[0m
[0m[[0m[0mdebug[0m] [0m[0m          }[0m
[0m[[0m[0mdebug[0m] [0m[0m      }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m      setHandler([0m
[0m[[0m[0mdebug[0m] [0m[0m        out,[0m
[0m[[0m[0mdebug[0m] [0m[0m        new OutHandler {[0m
[0m[[0m[0mdebug[0m] [0m[0m          override def onPull(): Unit =[0m
[0m[[0m[0mdebug[0m] [0m[0m            state match {[0m
[0m[[0m[0mdebug[0m] [0m[0m              case Pending =>[0m
[0m[[0m[0mdebug[0m] [0m[0m                state = Fetching[0m
[0m[[0m[0mdebug[0m] [0m[0m                fetch(materializer)[0m
[0m[[0m[0mdebug[0m] [0m[0m              case Fetching =>[0m
[0m[[0m[0mdebug[0m] [0m[0m              // do nothing we will push on request result[0m
[0m[[0m[0mdebug[0m] [0m[0m              case HoldingMessages(xs) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m                xs match {[0m
[0m[[0m[0mdebug[0m] [0m[0m                  case head :: tail =>[0m
[0m[[0m[0mdebug[0m] [0m[0m                    state = HoldingMessages(tail)[0m
[0m[[0m[0mdebug[0m] [0m[0m                    push(out, head)[0m
[0m[[0m[0mdebug[0m] [0m[0m                  case Nil =>[0m
[0m[[0m[0mdebug[0m] [0m[0m                    state = Fetching[0m
[0m[[0m[0mdebug[0m] [0m[0m                    fetch(materializer)[0m
[0m[[0m[0mdebug[0m] [0m[0m                }[0m
[0m[[0m[0mdebug[0m] [0m[0m            }[0m
[0m[[0m[0mdebug[0m] [0m[0m        }[0m
[0m[[0m[0mdebug[0m] [0m[0m      )[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m@InternalApi[0m
[0m[[0m[0mdebug[0m] [0m[0mprivate object GooglePubSubSource {[0m
[0m[[0m[0mdebug[0m] [0m[0m  private sealed trait State[0m
[0m[[0m[0mdebug[0m] [0m[0m  private case object Pending extends State[0m
[0m[[0m[0mdebug[0m] [0m[0m  private case object Fetching extends State[0m
[0m[[0m[0mdebug[0m] [0m[0m  private case class HoldingMessages(xs: immutable.Seq[ReceivedMessage]) extends State[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/google-cloud-pub-sub/src/main/scala/akka/stream/alpakka/googlecloud/pubsub/impl/GoogleTokenApi.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.googlecloud.pubsub.impl[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.http.scaladsl.HttpExt[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.http.scaladsl.model.{FormData, HttpMethods, HttpRequest}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.http.scaladsl.unmarshalling.Unmarshal[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.Materializer[0m
[0m[[0m[0mdebug[0m] [0m[0mimport GoogleTokenApi._[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.annotation.InternalApi[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.http.scaladsl.marshallers.sprayjson.SprayJsonSupport[0m
[0m[[0m[0mdebug[0m] [0m[0mimport spray.json.{DefaultJsonProtocol, RootJsonFormat}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport pdi.jwt.{Jwt, JwtAlgorithm, JwtClaim, JwtTime}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.concurrent.Future[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m@InternalApi[0m
[0m[[0m[0mdebug[0m] [0m[0mprivate[googlecloud] class GoogleTokenApi(http: => HttpExt) {[0m
[0m[[0m[0mdebug[0m] [0m[0m  protected val encodingAlgorithm: JwtAlgorithm.RS256.type = JwtAlgorithm.RS256[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private val googleTokenUrl = "https://www.googleapis.com/oauth2/v4/token"[0m
[0m[[0m[0mdebug[0m] [0m[0m  private val scope = "https://www.googleapis.com/auth/pubsub"[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def now: Long = JwtTime.nowSeconds[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private def generateJwt(clientEmail: String, privateKey: String): String = {[0m
[0m[[0m[0mdebug[0m] [0m[0m    val claim = JwtClaim(content = s"""{"scope":"$scope","aud":"$googleTokenUrl"}""", issuer = Option(clientEmail))[0m
[0m[[0m[0mdebug[0m] [0m[0m      .expiresIn(3600)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .issuedNow[0m
[0m[[0m[0mdebug[0m] [0m[0m    Jwt.encode(claim, privateKey, encodingAlgorithm)[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def getAccessToken(clientEmail: String, privateKey: String)([0m
[0m[[0m[0mdebug[0m] [0m[0m      implicit materializer: Materializer[0m
[0m[[0m[0mdebug[0m] [0m[0m  ): Future[AccessTokenExpiry] = {[0m
[0m[[0m[0mdebug[0m] [0m[0m    import materializer.executionContext[0m
[0m[[0m[0mdebug[0m] [0m[0m    import SprayJsonSupport._[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    val expiresAt = now + 3600[0m
[0m[[0m[0mdebug[0m] [0m[0m    val jwt = generateJwt(clientEmail, privateKey)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    val requestEntity = FormData([0m
[0m[[0m[0mdebug[0m] [0m[0m      "grant_type" -> "urn:ietf:params:oauth:grant-type:jwt-bearer",[0m
[0m[[0m[0mdebug[0m] [0m[0m      "assertion" -> jwt[0m
[0m[[0m[0mdebug[0m] [0m[0m    ).toEntity[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    for {[0m
[0m[[0m[0mdebug[0m] [0m[0m      response <- http.singleRequest(HttpRequest(HttpMethods.POST, googleTokenUrl, entity = requestEntity))[0m
[0m[[0m[0mdebug[0m] [0m[0m      result <- Unmarshal(response.entity).to[OAuthResponse][0m
[0m[[0m[0mdebug[0m] [0m[0m    } yield {[0m
[0m[[0m[0mdebug[0m] [0m[0m      AccessTokenExpiry([0m
[0m[[0m[0mdebug[0m] [0m[0m        accessToken = result.access_token,[0m
[0m[[0m[0mdebug[0m] [0m[0m        expiresAt = expiresAt[0m
[0m[[0m[0mdebug[0m] [0m[0m      )[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m@InternalApi[0m
[0m[[0m[0mdebug[0m] [0m[0mprivate[googlecloud] object GoogleTokenApi {[0m
[0m[[0m[0mdebug[0m] [0m[0m  case class AccessTokenExpiry(accessToken: String, expiresAt: Long)[0m
[0m[[0m[0mdebug[0m] [0m[0m  case class OAuthResponse(access_token: String, token_type: String, expires_in: Int)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  import DefaultJsonProtocol._[0m
[0m[[0m[0mdebug[0m] [0m[0m  implicit val oAuthResponseJsonFormat: RootJsonFormat[OAuthResponse] = jsonFormat3(OAuthResponse)[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/google-cloud-pub-sub/src/main/scala/akka/stream/alpakka/googlecloud/pubsub/model.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.googlecloud.pubsub[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.time.Instant[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.actor.ActorSystem[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.annotation.InternalApi[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.http.scaladsl.Http[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.googlecloud.pubsub.impl.{GoogleSession, GoogleTokenApi}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.collection.immutable[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.collection.JavaConverters._[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m/**[0m
[0m[[0m[0mdebug[0m] [0m[0m * @param projectId the project Id in the google account[0m
[0m[[0m[0mdebug[0m] [0m[0m * @param pullReturnImmediately when pulling messages, if there are non the API will wait or return immediately. Defaults to true.[0m
[0m[[0m[0mdebug[0m] [0m[0m * @param pullMaxMessagesPerInternalBatch when pulling messages, the maximum that will be in the batch of messages. Defaults to 1000.[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0mclass PubSubConfig private (val projectId: String,[0m
[0m[[0m[0mdebug[0m] [0m[0m                            val pullReturnImmediately: Boolean,[0m
[0m[[0m[0mdebug[0m] [0m[0m                            val pullMaxMessagesPerInternalBatch: Int,[0m
[0m[[0m[0mdebug[0m] [0m[0m                            /**[0m
[0m[[0m[0mdebug[0m] [0m[0m                             * Internal API[0m
[0m[[0m[0mdebug[0m] [0m[0m                             */[0m
[0m[[0m[0mdebug[0m] [0m[0m                            @InternalApi private[pubsub] val session: GoogleSession) {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Internal API[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  @InternalApi private[pubsub] def withSession(session: GoogleSession) =[0m
[0m[[0m[0mdebug[0m] [0m[0m    copy(session = session)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private def copy(session: GoogleSession) =[0m
[0m[[0m[0mdebug[0m] [0m[0m    new PubSubConfig(projectId, pullReturnImmediately, pullMaxMessagesPerInternalBatch, session)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  override def toString: String =[0m
[0m[[0m[0mdebug[0m] [0m[0m    s"PubSubConfig(projectId=$projectId)"[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mobject PubSubConfig {[0m
[0m[[0m[0mdebug[0m] [0m[0m  def apply(projectId: String, clientEmail: String, privateKey: String)([0m
[0m[[0m[0mdebug[0m] [0m[0m      implicit actorSystem: ActorSystem[0m
[0m[[0m[0mdebug[0m] [0m[0m  ): PubSubConfig =[0m
[0m[[0m[0mdebug[0m] [0m[0m    new PubSubConfig([0m
[0m[[0m[0mdebug[0m] [0m[0m      projectId = projectId,[0m
[0m[[0m[0mdebug[0m] [0m[0m      pullReturnImmediately = true,[0m
[0m[[0m[0mdebug[0m] [0m[0m      pullMaxMessagesPerInternalBatch = 1000,[0m
[0m[[0m[0mdebug[0m] [0m[0m      session = new GoogleSession(clientEmail, privateKey, new GoogleTokenApi(Http()))[0m
[0m[[0m[0mdebug[0m] [0m[0m    )[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def apply(projectId: String,[0m
[0m[[0m[0mdebug[0m] [0m[0m            clientEmail: String,[0m
[0m[[0m[0mdebug[0m] [0m[0m            privateKey: String,[0m
[0m[[0m[0mdebug[0m] [0m[0m            pullReturnImmediately: Boolean,[0m
[0m[[0m[0mdebug[0m] [0m[0m            pullMaxMessagesPerInternalBatch: Int)([0m
[0m[[0m[0mdebug[0m] [0m[0m      implicit actorSystem: ActorSystem[0m
[0m[[0m[0mdebug[0m] [0m[0m  ): PubSubConfig =[0m
[0m[[0m[0mdebug[0m] [0m[0m    new PubSubConfig([0m
[0m[[0m[0mdebug[0m] [0m[0m      projectId = projectId,[0m
[0m[[0m[0mdebug[0m] [0m[0m      pullReturnImmediately = pullReturnImmediately,[0m
[0m[[0m[0mdebug[0m] [0m[0m      pullMaxMessagesPerInternalBatch = pullMaxMessagesPerInternalBatch,[0m
[0m[[0m[0mdebug[0m] [0m[0m      session = new GoogleSession(clientEmail, privateKey, new GoogleTokenApi(Http()))[0m
[0m[[0m[0mdebug[0m] [0m[0m    )[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def create(projectId: String, clientEmail: String, privateKey: String, actorSystem: ActorSystem): PubSubConfig =[0m
[0m[[0m[0mdebug[0m] [0m[0m    apply(projectId, clientEmail, privateKey)(actorSystem)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def create(projectId: String,[0m
[0m[[0m[0mdebug[0m] [0m[0m             clientEmail: String,[0m
[0m[[0m[0mdebug[0m] [0m[0m             privateKey: String,[0m
[0m[[0m[0mdebug[0m] [0m[0m             actorSystem: ActorSystem,[0m
[0m[[0m[0mdebug[0m] [0m[0m             pullReturnImmediately: Boolean,[0m
[0m[[0m[0mdebug[0m] [0m[0m             pullMaxMessagesPerInternalBatch: Int): PubSubConfig =[0m
[0m[[0m[0mdebug[0m] [0m[0m    apply(projectId, clientEmail, privateKey, pullReturnImmediately, pullMaxMessagesPerInternalBatch)(actorSystem)[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m/**[0m
[0m[[0m[0mdebug[0m] [0m[0m *[0m
[0m[[0m[0mdebug[0m] [0m[0m * @param data the base64 encoded data[0m
[0m[[0m[0mdebug[0m] [0m[0m * @param messageId the message id[0m
[0m[[0m[0mdebug[0m] [0m[0m * @param attributes optional extra attributes for this message.[0m
[0m[[0m[0mdebug[0m] [0m[0m * @param publishTime the time the message was published. It must not be populated when publishing.[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0mfinal case class PubSubMessage(data: String,[0m
[0m[[0m[0mdebug[0m] [0m[0m                               messageId: String,[0m
[0m[[0m[0mdebug[0m] [0m[0m                               attributes: Option[immutable.Map[String, String]] = None,[0m
[0m[[0m[0mdebug[0m] [0m[0m                               publishTime: Option[Instant] = None) {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def withAttributes(attributes: java.util.Map[String, String]): PubSubMessage =[0m
[0m[[0m[0mdebug[0m] [0m[0m    copy(attributes = Some(attributes.asScala.toMap))[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def withPublishTime(publishTime: Instant): PubSubMessage =[0m
[0m[[0m[0mdebug[0m] [0m[0m    copy(publishTime = Some(publishTime))[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mobject PubSubMessage {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Java API: create [[PubSubMessage]][0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def create(data: String, messageId: String) =[0m
[0m[[0m[0mdebug[0m] [0m[0m    PubSubMessage(data, messageId)[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mfinal case class PublishRequest(messages: immutable.Seq[PubSubMessage])[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mobject PublishRequest {[0m
[0m[[0m[0mdebug[0m] [0m[0m  def of(messages: java.util.List[PubSubMessage]): PublishRequest =[0m
[0m[[0m[0mdebug[0m] [0m[0m    PublishRequest(messages.asScala.toList)[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m/**[0m
[0m[[0m[0mdebug[0m] [0m[0m * A message as it is received[0m
[0m[[0m[0mdebug[0m] [0m[0m * @param ackId acknowledgement id. This id is used to tell pub/sub the message has been processed.[0m
[0m[[0m[0mdebug[0m] [0m[0m * @param message the pubsub message including its data.[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0mfinal case class ReceivedMessage(ackId: String, message: PubSubMessage)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mfinal case class AcknowledgeRequest(ackIds: immutable.Seq[String])[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mobject AcknowledgeRequest {[0m
[0m[[0m[0mdebug[0m] [0m[0m  def of(ackIds: java.util.List[String]): AcknowledgeRequest =[0m
[0m[[0m[0mdebug[0m] [0m[0m    AcknowledgeRequest(ackIds.asScala.toList)[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mprivate final case class PublishResponse(messageIds: immutable.Seq[String])[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mprivate final case class PullResponse(receivedMessages: Option[immutable.Seq[ReceivedMessage]])[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
