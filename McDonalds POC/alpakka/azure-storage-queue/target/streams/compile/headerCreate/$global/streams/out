[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/azure-storage-queue/src/main/scala/akka/stream/alpakka/azure/storagequeue/javadsl/AzureQueueSource.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.azure.storagequeue.javadsl[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport com.microsoft.azure.storage.queue.{CloudQueue, CloudQueueMessage}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.azure.storagequeue.AzureQueueSourceSettings[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.javadsl.Source[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.NotUsed[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.util.function.Supplier[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.azure.storagequeue.impl.AzureQueueSourceStage[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mobject AzureQueueSource {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Java API: creates a [[AzureQueueSource]] for a Azure CloudQueue.[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def create(cloudQueue: Supplier[CloudQueue], settings: AzureQueueSourceSettings): Source[CloudQueueMessage, NotUsed] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    Source.fromGraph(new AzureQueueSourceStage(() => cloudQueue.get(), settings))[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def create(cloudQueue: Supplier[CloudQueue]): Source[CloudQueueMessage, NotUsed] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    create(cloudQueue, AzureQueueSourceSettings())[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/azure-storage-queue/src/main/scala/akka/stream/alpakka/azure/storagequeue/javadsl/AzureQueueSink.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.azure.storagequeue.javadsl[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport com.microsoft.azure.storage.queue.{CloudQueue, CloudQueueMessage}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.azure.storagequeue.impl.AzureQueueSinkFunctions[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.javadsl.Sink[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.Done[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.util.concurrent.CompletionStage[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.util.function.Supplier[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.azure.storagequeue.DeleteOrUpdateMessage[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mobject AzureQueueSink {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * JavaAPI: creates a [[akka.stream.javadsl.Sink]] which queues message to an Azure Storage Queue.[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def create(cloudQueue: Supplier[CloudQueue]): Sink[CloudQueueMessage, CompletionStage[Done]] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    fromFunction(AzureQueueSinkFunctions.addMessage(() => cloudQueue.get)(_))[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Internal API[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  private[javadsl] def fromFunction[T](f: T => Unit): Sink[T, CompletionStage[Done]] = {[0m
[0m[[0m[0mdebug[0m] [0m[0m    import akka.stream.alpakka.azure.storagequeue.scaladsl.{AzureQueueSink => AzureQueueSinkScalaDSL}[0m
[0m[[0m[0mdebug[0m] [0m[0m    import scala.compat.java8.FutureConverters._[0m
[0m[[0m[0mdebug[0m] [0m[0m    AzureQueueSinkScalaDSL.fromFunction(f).mapMaterializedValue(_.toJava).asJava[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mclass MessageWithTimeouts(val message: CloudQueueMessage, val timeToLive: Int, val initialVisibility: Int)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mobject AzureQueueWithTimeoutsSink {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * JavaAPI: creates an [[akka.stream.javadsl.Sink]] with queues message to an Azure Storage Queue.[0m
[0m[[0m[0mdebug[0m] [0m[0m   * This is the same as [[AzureQueueSink.create]] expect that it takes instead[0m
[0m[[0m[0mdebug[0m] [0m[0m   * of a [[com.microsoft.azure.storage.queue.CouldQueueMessage]] a [[MessageWithTimeouts]].[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def create(cloudQueue: Supplier[CloudQueue]): Sink[MessageWithTimeouts, CompletionStage[Done]] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    AzureQueueSink.fromFunction([0m
[0m[[0m[0mdebug[0m] [0m[0m      { input: MessageWithTimeouts =>[0m
[0m[[0m[0mdebug[0m] [0m[0m        AzureQueueSinkFunctions[0m
[0m[[0m[0mdebug[0m] [0m[0m          .addMessage(() => cloudQueue.get)(input.message, input.timeToLive, input.initialVisibility)[0m
[0m[[0m[0mdebug[0m] [0m[0m      }[0m
[0m[[0m[0mdebug[0m] [0m[0m    )[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mobject AzureQueueDeleteSink {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * JavaAPI: creates a [[akka.stream.javadsl.Sink]] which deletes messages from an Azure Storage Queue.[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def create(cloudQueue: Supplier[CloudQueue]): Sink[CloudQueueMessage, CompletionStage[Done]] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    AzureQueueSink.fromFunction[CloudQueueMessage](AzureQueueSinkFunctions.deleteMessage(() => cloudQueue.get)(_))[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mclass MessageAndDeleteOrUpdate(val message: CloudQueueMessage, val op: DeleteOrUpdateMessage)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mobject AzureQueueDeleteOrUpdateSink {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * JavaAPI: creates a [[akka.stream.javadsl.Sink]] which deletes or updates the visibility timeout of messages[0m
[0m[[0m[0mdebug[0m] [0m[0m   * in an Azure Storage Queue.[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def create(cloudQueue: Supplier[CloudQueue]): Sink[MessageAndDeleteOrUpdate, CompletionStage[Done]] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    AzureQueueSink.fromFunction[MessageAndDeleteOrUpdate]([0m
[0m[[0m[0mdebug[0m] [0m[0m      input => AzureQueueSinkFunctions.deleteOrUpdateMessage(() => cloudQueue.get)(input.message, input.op)[0m
[0m[[0m[0mdebug[0m] [0m[0m    )[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/azure-storage-queue/src/main/scala/akka/stream/alpakka/azure/storagequeue/settings.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.azure.storagequeue[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.time.{Duration => JavaDuration}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport java.util.Optional[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.compat.java8.OptionConverters._[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.concurrent.duration.{Duration, FiniteDuration}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m/** Settings for AzureQueueSource[0m
[0m[[0m[0mdebug[0m] [0m[0m *[0m
[0m[[0m[0mdebug[0m] [0m[0m * @param initalVisibilityTimeout Specifies how many seconds a message becomes invisible after it has been dequeued.[0m
[0m[[0m[0mdebug[0m] [0m[0m *        See parameter of the same name in [[com.microsoft.azure.storage.queue.CloudQueue$.retrieveMessages]].[0m
[0m[[0m[0mdebug[0m] [0m[0m * @param batchSize Specifies how many message are fetched in one batch.[0m
[0m[[0m[0mdebug[0m] [0m[0m *        (This is the numberOfMessages parameter in [[com.microsoft.azure.storage.queue.CloudQueue$.retrieveMessages]].)[0m
[0m[[0m[0mdebug[0m] [0m[0m * @param retrieveRetryTimeout If None the [[akka.stream.alpakka.azure.storagequeue.scaladsl.AzureQueueSource]] will be completed if the queue is empty.[0m
[0m[[0m[0mdebug[0m] [0m[0m *        If Some(timeout) [[akka.stream.alpakka.azure.storagequeue.scaladsl.AzureQueueSource]] will retry after timeout to get new messages. Do not set timeout to low.[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0mfinal class AzureQueueSourceSettings private ([0m
[0m[[0m[0mdebug[0m] [0m[0m    val initialVisibilityTimeout: Int,[0m
[0m[[0m[0mdebug[0m] [0m[0m    val batchSize: Int,[0m
[0m[[0m[0mdebug[0m] [0m[0m    val retrieveRetryTimeout: Option[FiniteDuration] = None[0m
[0m[[0m[0mdebug[0m] [0m[0m) {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def withBatchSize(batchSize: Int): AzureQueueSourceSettings =[0m
[0m[[0m[0mdebug[0m] [0m[0m    copy(batchSize = batchSize)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   *[0m
[0m[[0m[0mdebug[0m] [0m[0m   * @param retrieveRetryTimeout in seconds. If <= 0 retrying of message retrieval is disabled.[0m
[0m[[0m[0mdebug[0m] [0m[0m   * @return[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def withRetrieveRetryTimeout(retrieveRetryTimeout: FiniteDuration): AzureQueueSourceSettings =[0m
[0m[[0m[0mdebug[0m] [0m[0m    copy(retrieveRetryTimeout = Some(retrieveRetryTimeout))[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def withRetrieveRetryTimeout(retrieveRetryTimeout: JavaDuration) =[0m
[0m[[0m[0mdebug[0m] [0m[0m    copy(retrieveRetryTimeout = Some(Duration.fromNanos(retrieveRetryTimeout.toNanos)))[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Java API[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def getRetrieveRetryTimeout(): Optional[JavaDuration] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    retrieveRetryTimeout.map(d => JavaDuration.ofNanos(d.toNanos)).asJava[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  private def copy(batchSize: Int = batchSize, retrieveRetryTimeout: Option[FiniteDuration] = retrieveRetryTimeout) =[0m
[0m[[0m[0mdebug[0m] [0m[0m    new AzureQueueSourceSettings(initialVisibilityTimeout, batchSize, retrieveRetryTimeout)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  override def toString: String =[0m
[0m[[0m[0mdebug[0m] [0m[0m    s"AzureQueueSourceSettings(initialVisibilityTimeout=$initialVisibilityTimeout, batchSize=$batchSize, retrieveRetryTimeout=$retrieveRetryTimeout)"[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mobject AzureQueueSourceSettings {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def apply(initialVisibilityTimeout: Int, batchSize: Int): AzureQueueSourceSettings =[0m
[0m[[0m[0mdebug[0m] [0m[0m    new AzureQueueSourceSettings(initialVisibilityTimeout, batchSize)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def create(initialVisibilityTimeout: Int, batchSize: Int): AzureQueueSourceSettings =[0m
[0m[[0m[0mdebug[0m] [0m[0m    AzureQueueSourceSettings(initialVisibilityTimeout, batchSize)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Default settings[0m
[0m[[0m[0mdebug[0m] [0m[0m   *[0m
[0m[[0m[0mdebug[0m] [0m[0m   * initialVisibilityTimeout (30) is taken from[0m
[0m[[0m[0mdebug[0m] [0m[0m   * [[com.microsoft.azure.storage.queue.QueueConstants.DEFAULT_VISIBILITY_MESSAGE_TIMEOUT_IN_SECONDS]][0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def apply(): AzureQueueSourceSettings = AzureQueueSourceSettings(30, 10)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Java API[0m
[0m[[0m[0mdebug[0m] [0m[0m   *[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Default settings[0m
[0m[[0m[0mdebug[0m] [0m[0m   *[0m
[0m[[0m[0mdebug[0m] [0m[0m   * initialVisibilityTimeout (30) is taken from[0m
[0m[[0m[0mdebug[0m] [0m[0m   * [[com.microsoft.azure.storage.queue.QueueConstants.DEFAULT_VISIBILITY_MESSAGE_TIMEOUT_IN_SECONDS]][0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def create(): AzureQueueSourceSettings = AzureQueueSourceSettings()[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/azure-storage-queue/src/main/scala/akka/stream/alpakka/azure/storagequeue/scaladsl/AzureQueueSource.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.azure.storagequeue.scaladsl[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport com.microsoft.azure.storage.queue.{CloudQueue, CloudQueueMessage}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.azure.storagequeue.AzureQueueSourceSettings[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.scaladsl.Source[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.NotUsed[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.azure.storagequeue.impl.AzureQueueSourceStage[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mobject AzureQueueSource {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Scala API: creates a [[AzureQueueSource]] for a Azure CloudQueue.[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def apply([0m
[0m[[0m[0mdebug[0m] [0m[0m      cloudQueue: () => CloudQueue,[0m
[0m[[0m[0mdebug[0m] [0m[0m      settings: AzureQueueSourceSettings = AzureQueueSourceSettings()[0m
[0m[[0m[0mdebug[0m] [0m[0m  ): Source[CloudQueueMessage, NotUsed] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    Source.fromGraph(new AzureQueueSourceStage(cloudQueue, settings))[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/azure-storage-queue/src/main/scala/akka/stream/alpakka/azure/storagequeue/scaladsl/AzureQueueSink.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.azure.storagequeue.scaladsl[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport com.microsoft.azure.storage.queue.{CloudQueue, CloudQueueMessage}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.azure.storagequeue.impl.AzureQueueSinkFunctions[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.scaladsl.{Flow, Keep, Sink}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.Done[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.concurrent.Future[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.impl.Stages.DefaultAttributes.IODispatcher[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.Attributes[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.azure.storagequeue.DeleteOrUpdateMessage[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mobject AzureQueueSink {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * ScalaAPI: creates a [[akka.stream.scaladsl.Sink]] which queues message to an Azure Storage Queue.[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def apply(cloudQueue: () => CloudQueue): Sink[CloudQueueMessage, Future[Done]] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    fromFunction(AzureQueueSinkFunctions.addMessage(cloudQueue)(_))[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Internal API[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def fromFunction[T](f: T => Unit): Sink[T, Future[Done]] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    Flow[0m
[0m[[0m[0mdebug[0m] [0m[0m      .fromFunction(f)[0m
[0m[[0m[0mdebug[0m] [0m[0m      .addAttributes(Attributes(IODispatcher))[0m
[0m[[0m[0mdebug[0m] [0m[0m      .toMat(Sink.ignore)(Keep.right)[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mobject AzureQueueWithTimeoutsSink {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * ScalaAPI: creates an [[akka.stream.scaladsl.Sink]] with queues message to an Azure Storage Queue.[0m
[0m[[0m[0mdebug[0m] [0m[0m   * This is the same as [[AzureQueueSink.apply]] expect that the sink takes instead[0m
[0m[[0m[0mdebug[0m] [0m[0m   * of a [[com.microsoft.azure.storage.queue.CouldQueueMessage]] a tuple[0m
[0m[[0m[0mdebug[0m] [0m[0m   * with (CouldQueueMessage, timeToLive, initialVisibilityTimeout).[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def apply([0m
[0m[[0m[0mdebug[0m] [0m[0m      cloudQueue: () => CloudQueue[0m
[0m[[0m[0mdebug[0m] [0m[0m  ): Sink[(CloudQueueMessage, Int, Int), Future[Done]] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    AzureQueueSink.fromFunction([0m
[0m[[0m[0mdebug[0m] [0m[0m      tup => AzureQueueSinkFunctions.addMessage(cloudQueue)(tup._1, tup._2, tup._3)[0m
[0m[[0m[0mdebug[0m] [0m[0m    )[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mobject AzureQueueDeleteSink {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * ScalaAPI: creates a [[akka.stream.scaladsl.Sink]] which deletes messages from an Azure Storage Queue.[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def apply(cloudQueue: () => CloudQueue): Sink[CloudQueueMessage, Future[Done]] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    AzureQueueSink.fromFunction(AzureQueueSinkFunctions.deleteMessage(cloudQueue)(_))[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mobject AzureQueueDeleteOrUpdateSink {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * ScalaAPI: creates a [[akka.stream.scaladsl.Sink]] which deletes or updates the visibility timeout of messages[0m
[0m[[0m[0mdebug[0m] [0m[0m   * in an Azure Storage Queue.[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def apply([0m
[0m[[0m[0mdebug[0m] [0m[0m      cloudQueue: () => CloudQueue[0m
[0m[[0m[0mdebug[0m] [0m[0m  ): Sink[(CloudQueueMessage, DeleteOrUpdateMessage), Future[Done]] =[0m
[0m[[0m[0mdebug[0m] [0m[0m    AzureQueueSink.fromFunction([0m
[0m[[0m[0mdebug[0m] [0m[0m      input => AzureQueueSinkFunctions.deleteOrUpdateMessage(cloudQueue)(input._1, input._2)[0m
[0m[[0m[0mdebug[0m] [0m[0m    )[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/azure-storage-queue/src/main/scala/akka/stream/alpakka/azure/storagequeue/impl/AzureQueueSourceStage.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.azure.storagequeue.impl[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.NotUsed[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.annotation.InternalApi[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.azure.storagequeue.AzureQueueSourceSettings[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.impl.Stages.DefaultAttributes.IODispatcher[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.stage.{GraphStage, GraphStageLogic, OutHandler, TimerGraphStageLogic}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.{Attributes, Outlet, SourceShape}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport com.microsoft.azure.storage.queue.{CloudQueue, CloudQueueMessage}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport scala.collection.mutable.Queue[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m/**[0m
[0m[[0m[0mdebug[0m] [0m[0m * INTERNAL API[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m@InternalApi private[storagequeue] final class AzureQueueSourceStage(cloudQueue: () => CloudQueue,[0m
[0m[[0m[0mdebug[0m] [0m[0m                                                                     settings: AzureQueueSourceSettings)[0m
[0m[[0m[0mdebug[0m] [0m[0m    extends GraphStage[SourceShape[CloudQueueMessage]] {[0m
[0m[[0m[0mdebug[0m] [0m[0m  val out: Outlet[CloudQueueMessage] = Outlet("AzureCloudQueue.out")[0m
[0m[[0m[0mdebug[0m] [0m[0m  override val shape: SourceShape[CloudQueueMessage] = SourceShape(out)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  override def initialAttributes: Attributes =[0m
[0m[[0m[0mdebug[0m] [0m[0m    super.initialAttributes and IODispatcher[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  override def createLogic(inheritedAttributes: Attributes): GraphStageLogic = new TimerGraphStageLogic(shape) {[0m
[0m[[0m[0mdebug[0m] [0m[0m    private val buffer = new Queue[CloudQueueMessage][0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    lazy val cloudQueueBuilt = cloudQueue()[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    override def onTimer(timerKey: Any): Unit =[0m
[0m[[0m[0mdebug[0m] [0m[0m      retrieveMessages()[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    def retrieveMessages(): Unit = {[0m
[0m[[0m[0mdebug[0m] [0m[0m      import scala.collection.JavaConverters._[0m
[0m[[0m[0mdebug[0m] [0m[0m      val res = cloudQueueBuilt[0m
[0m[[0m[0mdebug[0m] [0m[0m        .retrieveMessages(settings.batchSize, settings.initialVisibilityTimeout, null, null)[0m
[0m[[0m[0mdebug[0m] [0m[0m        .asScala[0m
[0m[[0m[0mdebug[0m] [0m[0m        .toList[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m      if (res.isEmpty) {[0m
[0m[[0m[0mdebug[0m] [0m[0m        settings.retrieveRetryTimeout match {[0m
[0m[[0m[0mdebug[0m] [0m[0m          case Some(timeout) =>[0m
[0m[[0m[0mdebug[0m] [0m[0m            if (isAvailable(out)) {[0m
[0m[[0m[0mdebug[0m] [0m[0m              scheduleOnce(NotUsed, timeout)[0m
[0m[[0m[0mdebug[0m] [0m[0m            }[0m
[0m[[0m[0mdebug[0m] [0m[0m          case None => complete(out)[0m
[0m[[0m[0mdebug[0m] [0m[0m        }[0m
[0m[[0m[0mdebug[0m] [0m[0m      } else {[0m
[0m[[0m[0mdebug[0m] [0m[0m        buffer ++= res[0m
[0m[[0m[0mdebug[0m] [0m[0m        push(out, buffer.dequeue)[0m
[0m[[0m[0mdebug[0m] [0m[0m      }[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m    setHandler([0m
[0m[[0m[0mdebug[0m] [0m[0m      out,[0m
[0m[[0m[0mdebug[0m] [0m[0m      new OutHandler {[0m
[0m[[0m[0mdebug[0m] [0m[0m        override def onPull: Unit =[0m
[0m[[0m[0mdebug[0m] [0m[0m          if (!buffer.isEmpty) {[0m
[0m[[0m[0mdebug[0m] [0m[0m            push(out, buffer.dequeue)[0m
[0m[[0m[0mdebug[0m] [0m[0m          } else {[0m
[0m[[0m[0mdebug[0m] [0m[0m            retrieveMessages()[0m
[0m[[0m[0mdebug[0m] [0m[0m          }[0m
[0m[[0m[0mdebug[0m] [0m[0m      }[0m
[0m[[0m[0mdebug[0m] [0m[0m    )[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/azure-storage-queue/src/main/scala/akka/stream/alpakka/azure/storagequeue/impl/AzureQueueSinkFunctions.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.azure.storagequeue.impl[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.annotation.InternalApi[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.azure.storagequeue.DeleteOrUpdateMessage[0m
[0m[[0m[0mdebug[0m] [0m[0mimport akka.stream.alpakka.azure.storagequeue.DeleteOrUpdateMessage.{Delete, UpdateVisibility}[0m
[0m[[0m[0mdebug[0m] [0m[0mimport com.microsoft.azure.storage.queue.{CloudQueue, CloudQueueMessage}[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m/**[0m
[0m[[0m[0mdebug[0m] [0m[0m * INTERNAL API[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m@InternalApi private[storagequeue] object AzureQueueSinkFunctions {[0m
[0m[[0m[0mdebug[0m] [0m[0m  def addMessage([0m
[0m[[0m[0mdebug[0m] [0m[0m      cloudQueue: () => CloudQueue[0m
[0m[[0m[0mdebug[0m] [0m[0m  )(msg: CloudQueueMessage, timeToLive: Int = 0, initialVisibilityTimeout: Int = 0): Unit =[0m
[0m[[0m[0mdebug[0m] [0m[0m    cloudQueue().addMessage(msg, timeToLive, initialVisibilityTimeout, null, null)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def deleteMessage([0m
[0m[[0m[0mdebug[0m] [0m[0m      cloudQueue: () => CloudQueue[0m
[0m[[0m[0mdebug[0m] [0m[0m  )(msg: CloudQueueMessage): Unit =[0m
[0m[[0m[0mdebug[0m] [0m[0m    cloudQueue().deleteMessage(msg)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def updateMessage(cloudQueue: () => CloudQueue)(msg: CloudQueueMessage, timeout: Int): Unit =[0m
[0m[[0m[0mdebug[0m] [0m[0m    cloudQueue().updateMessage(msg, timeout)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  def deleteOrUpdateMessage([0m
[0m[[0m[0mdebug[0m] [0m[0m      cloudQueue: () => CloudQueue[0m
[0m[[0m[0mdebug[0m] [0m[0m  )(msg: CloudQueueMessage, op: DeleteOrUpdateMessage): Unit =[0m
[0m[[0m[0mdebug[0m] [0m[0m    op match {[0m
[0m[[0m[0mdebug[0m] [0m[0m      case _: Delete => deleteMessage(cloudQueue)(msg)[0m
[0m[[0m[0mdebug[0m] [0m[0m      case m: UpdateVisibility => updateMessage(cloudQueue)(msg, m.timeout)[0m
[0m[[0m[0mdebug[0m] [0m[0m    }[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to create/update header for /root/alpakka/azure-storage-queue/src/main/scala/akka/stream/alpakka/azure/storagequeue/model.scala[0m
[0m[[0m[0mdebug[0m] [0m[0mFirst line of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mText of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0m/*[0m
[0m[[0m[0mdebug[0m] [0m[0m * Copyright (C) 2016-2019 Lightbend Inc. <http://www.lightbend.com>[0m
[0m[[0m[0mdebug[0m] [0m[0m */[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mpackage akka.stream.alpakka.azure.storagequeue[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0msealed abstract class DeleteOrUpdateMessage[0m
[0m[[0m[0mdebug[0m] [0m[0mobject DeleteOrUpdateMessage {[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  sealed abstract class Delete extends DeleteOrUpdateMessage[0m
[0m[[0m[0mdebug[0m] [0m[0m  case object Delete extends Delete[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Java API[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def createDelete(): Delete = Delete[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  final class UpdateVisibility private (val timeout: Int) extends DeleteOrUpdateMessage {[0m
[0m[[0m[0mdebug[0m] [0m[0m    override def toString: String =[0m
[0m[[0m[0mdebug[0m] [0m[0m      s"DeleteOrUpdateMessage.UpdateVisibility(timeout=$timeout)"[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  object UpdateVisibility {[0m
[0m[[0m[0mdebug[0m] [0m[0m    def apply(timeout: Int) =[0m
[0m[[0m[0mdebug[0m] [0m[0m      new UpdateVisibility(timeout)[0m
[0m[[0m[0mdebug[0m] [0m[0m  }[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0m  /**[0m
[0m[[0m[0mdebug[0m] [0m[0m   * Java API[0m
[0m[[0m[0mdebug[0m] [0m[0m   */[0m
[0m[[0m[0mdebug[0m] [0m[0m  def createUpdateVisibility(timeout: Int): UpdateVisibility = UpdateVisibility(timeout)[0m
[0m[[0m[0mdebug[0m] [0m[0m}[0m
[0m[[0m[0mdebug[0m] [0m[0mModified text of file is:[0m
[0m[[0m[0mdebug[0m] [0m[0mNone[0m
